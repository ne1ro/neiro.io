<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Functional on neiro blog</title>
    <link>https://neiro.io/tags/functional/</link>
    <description>Recent content in Functional on neiro blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <copyright>neiro Â© 2012-2025</copyright>
    <lastBuildDate>Tue, 01 Oct 2019 10:00:00 +0200</lastBuildDate>
    <atom:link href="https://neiro.io/tags/functional/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Well-crafted functional architecture: ports and adapters</title>
      <link>https://neiro.io/blog/2019-10-01-well-crafted-functional-architecture-ports-and-adapters.md/</link>
      <pubDate>Tue, 01 Oct 2019 10:00:00 +0200</pubDate>
      <guid>https://neiro.io/blog/2019-10-01-well-crafted-functional-architecture-ports-and-adapters.md/</guid>
      <description>&lt;p&gt;At &lt;a href=&#34;https://salam.io&#34;&gt;Salam.io&lt;/a&gt; we are developing a modern social&#xA;platform containing a humongous amount of features.&lt;/p&gt;&#xA;&lt;p&gt;Development of such product is quite hard and challenging - we need our&#xA;software to be robust, scalable, fault-tolerant, performant and at the&#xA;same time we want it to be easy to extend, test, maintain and support.&lt;/p&gt;&#xA;&lt;p&gt;All these issues are inevitable upon growth of the app but they for sure&#xA;can be simplified or even avoided by choosing, optimising the software&#xA;architecture.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>At <a href="https://salam.io">Salam.io</a> we are developing a modern social
platform containing a humongous amount of features.</p>
<p>Development of such product is quite hard and challenging - we need our
software to be robust, scalable, fault-tolerant, performant and at the
same time we want it to be easy to extend, test, maintain and support.</p>
<p>All these issues are inevitable upon growth of the app but they for sure
can be simplified or even avoided by choosing, optimising the software
architecture.</p>
<p>We also use functional programming languages -
<a href="https://clojure.org">Clojure</a> &amp; <a href="https://elixir-lang.org">Elixir</a> -
for the backend and frontend as much as possible. Therefore, we need to
adjust the existing architecture approaches to powerful abilities and
intricacies of modern functional programming.</p>
<p>That&rsquo;s why we&rsquo;re starting these series of articles - we think it&rsquo;s
crucial for everyone who&rsquo;s crafting the functional systems to understand
and apply software architectures rules and principles.</p>
<h2 id="why-ports-adapters">Why ports &amp; adapters ?</h2>
<p>Even if you&rsquo;re developing a relatively small scale software you still
need to design it first - and to design it properly. The earlier you
start caring about your architecture the earlier you can benefit from it
and the later a lot of issues caused by bad architecture would appear.</p>
<p>The main idea of ports &amp; adapters architecture is that application that
you&rsquo;re building is a <em>closed area</em>. This means that all your business
logic should be separated from technical details in this area. Often
architecture is about the boundaries so are the ports &amp; adapters.</p>
<p>In case you stick with ports &amp; adapters from the very beginning then
this approach should help you to keep your business logic separated and
easily tested s well as technology agnostic - you can write a port &amp; an
adapter for any software/third-party service/library that you&rsquo;re using
so it can be easily extended or switched in favour of another one.</p>
<h2 id="hexagonal">Hexagonal</h2>
<p>Ports &amp; adapters architecture also has another name: <em>Hexagonal
architecture</em>. According to this terminology the inner part of your
software - the place where you put your business logic - is hexagon
while your adapters are placed surround it.</p>
<figure><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/75/Hexagonal_Architecture.svg/1000px-Hexagonal_Architecture.svg.png"
    alt="Figure 1: Hexagon"><figcaption>
      <p><span class="figure-number">Figure 1: </span>Hexagon</p>
    </figcaption>
</figure>

<p>The hexagon should not contain any references to another frameworks,
real world services, libraries, etc. - all these elements should be
adapters. At the same time the architecture doesn&rsquo;t prescribe you to
design your hexagon in some certain way - you can use Layer
architecture, Onion, DDD or any another suitable architecture inside or
it may be a pure business logic without any sophistications - it&rsquo;s up to
you.</p>
<p>Why hexagon? Well, any geometric figure with boundaries could work, but
the hexagon represents better the concept that you have ports at the
edges of your application and adapters behind it. Likewise, it&rsquo;s a
symmetric figure and we&rsquo;ll describe below why it&rsquo;s important.</p>
<h2 id="ports">Ports</h2>
<p>Every time you need to interact with something from beyond of your
application logic you need to group these actions and describe them in a
<em>port</em>. The port is the edge of hexagon and it should be an integral and
essential part of your application.</p>
<p>Naming of the ports is quite important - you shouldn&rsquo;t use any
technology name in your port but focus on its mission instead. Some of
examples:</p>
<ul>
<li>PushNotifications</li>
<li>Search</li>
<li>Persistence</li>
<li>Authentication</li>
</ul>
<p>The majority of programming languages usually contain interfaces /
protocols feature allowing you to build a port. In Clojure, for example,
you can use <em>multimethods</em> or <em>protocols</em> to achieve this goal. But for
now let&rsquo;s see how we can implement the realisation of port for Elixir
using its&rsquo; capability to create <strong>behaviours</strong>:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln"> 1</span><span class="cl">  defmodule Core.PushNotifications do
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    @moduledoc &#34;&#34;&#34;
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    Port for sending push notifications.
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    &#34;&#34;&#34;
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    @type message :: %{title: String.t(), body: String.t()}
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    @type payload :: Keyword.t
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    @type recipients :: [map]
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl">    @adapter :core |&gt; Application.fetch_env!(__MODULE__) |&gt; Keyword.fetch!(:adapter)
</span></span><span class="line"><span class="ln">11</span><span class="cl">
</span></span><span class="line"><span class="ln">12</span><span class="cl">    @callback send_notifications(message, recipients, payload) :: {:ok, [map]} | {:error, any}
</span></span><span class="line"><span class="ln">13</span><span class="cl">
</span></span><span class="line"><span class="ln">14</span><span class="cl">    defdelegate send_notifications(message, recipients, payload), to: @adapter
</span></span><span class="line"><span class="ln">15</span><span class="cl">  end</span></span></code></pre></div><p>The example above is nothing more than an abstraction for using push
notifications from <code>Core</code>. We declare the behaviour and one callback
that specifies what we send and what we can expect as the result. The
exact implementation - adapter - should be placed in your app
configuration like:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln">1</span><span class="cl">  config :core, Core.PushNotifications, adapter: PushNotifications.APNS</span></span></code></pre></div><p>If you want to call this port from your application you just need to use
the delegated function:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln">1</span><span class="cl">  defmodule Core do
</span></span><span class="line"><span class="ln">2</span><span class="cl">    alias Core.PushNotifications
</span></span><span class="line"><span class="ln">3</span><span class="cl">
</span></span><span class="line"><span class="ln">4</span><span class="cl">    def register_user(params) do
</span></span><span class="line"><span class="ln">5</span><span class="cl">      # business logic ...
</span></span><span class="line"><span class="ln">6</span><span class="cl">       result = PushNotifications.send_notifications(message, recipients, payload)
</span></span><span class="line"><span class="ln">7</span><span class="cl">      # handle the result somehow
</span></span><span class="line"><span class="ln">8</span><span class="cl">    end
</span></span><span class="line"><span class="ln">9</span><span class="cl">  end</span></span></code></pre></div><p>As you can see, from the <code>Core</code> we know nothing about the implementation
details - we just send notifications to users and that&rsquo;s it. In ideal
case we need to move <strong>any impure function, any side-effect</strong> to the edge
of the system - to adapters and call them <strong>only by using ports</strong> .</p>
<h2 id="driver-adapters">Driver Adapters</h2>
<p>Adapters are components which are placed outside of your application -
and your hexagon. They should represent the technology, service, library
that you need to interact through the port.</p>
<p>We specify two types of adapters: <em>Driver</em> and <em>Driven</em>.</p>
<p>The first ones are something from the left side of the picture above. It
could be a HTML page, API endpoint, CLI application, GUI or anything
that <em>drives</em> your application. That also means that the driver adapter
should use a driver port interface so your app receives technology
agnostic request on its borders.</p>
<p>Let&rsquo;s assume that we also have a web application that uses our <em>Core</em>.
If we want to register user then we need to call a
<code>Core.register_user/1</code> function from inside of our controller. In that
case <code>UserController</code> is our driver adapter and <code>Core</code> is the called
application. Fortunately, in Elixir we have type specs that can play a
role of specification of driver port so you&rsquo;ll always be able to see
what we need to send and what we should expect in response.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln">1</span><span class="cl">  defmodule Web.UserController do
</span></span><span class="line"><span class="ln">2</span><span class="cl">    use Web, :controller
</span></span><span class="line"><span class="ln">3</span><span class="cl">
</span></span><span class="line"><span class="ln">4</span><span class="cl">    def create(conn, params) do
</span></span><span class="line"><span class="ln">5</span><span class="cl">      result = Core.register_user(params) # will create user and send notifications
</span></span><span class="line"><span class="ln">6</span><span class="cl">     # handle the result somehow
</span></span><span class="line"><span class="ln">7</span><span class="cl">    end
</span></span><span class="line"><span class="ln">8</span><span class="cl">  end</span></span></code></pre></div><p>In the approach above you can see that we use <code>Core.register_user/1</code>
function as the driver port - because it&rsquo;s spec describes the
interface - and <code>Web.UserController.index/2</code> as the driver adapter.</p>
<h2 id="driven-adapters">Driven Adapters</h2>
<p>A <em>Driven</em> adapter implements an interface given by driven port. That
means that now driven adapter depends on our application, but not visa
versa. The same as driver, this adapter should also be placed outside of
our hexagon and represents a technology/library/real-world device.</p>
<p>Common examples are:</p>
<ul>
<li>Persistence adapters - SQL, NoSQL databases or even in-memory / file
storage</li>
<li>Cache adapters - Redis / Memcached / ETS or in-memory storage</li>
<li>Email adapters - SMTP or third-party services</li>
<li>Message queue adapters</li>
<li>Third-party APIs</li>
</ul>
<p>Let&rsquo;s continue the push notifications solution we&rsquo;ve started before.
Now, in order to implement the driver adapter, we need to use the port
<code>Core.PushNotifications</code> and it&rsquo;s callback <code>send_notifications</code>. We will
adapt realisation of sending push notifications over APNS by the
specification that was given us by this port:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln"> 1</span><span class="cl">  defmodule PushNotifications.APNS do
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    @moduledoc &#34;APNS adapter for push notifications&#34;
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    @behaviour Core.PushNotifications
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    @impl true
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    def send_notifications(message, recipients, payload) do
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">      {:ok, recipients
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">      |&gt; Enum.map(fn r -&gt; build_notification(message, r, payload) end)
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">      |&gt; Pigeon.APNS.Notification.push()}
</span></span><span class="line"><span class="ln">10</span><span class="cl">    end
</span></span><span class="line"><span class="ln">11</span><span class="cl">
</span></span><span class="line"><span class="ln">12</span><span class="cl">     defp build_notification(message, recipient, payload) do
</span></span><span class="line"><span class="ln">13</span><span class="cl">       Pigeon.APNS.Notification.new(message, recipient.device_token, payload)
</span></span><span class="line"><span class="ln">14</span><span class="cl">     end
</span></span><span class="line"><span class="ln">15</span><span class="cl">  end</span></span></code></pre></div><p>Now our push notifications are almost completed. We can always change
the implementation - for example, from APNS to Firebase - or use
third-party library <strong>* without changing our core application*</strong> - so we
can say that&rsquo;s technology agnostic approach.</p>
<h2 id="testing">Testing</h2>
<p>Of course the main benefit of ports and adapters architecture is
improved testability. Instead of manually mocking calls to the
real-world providers we just need to create a test adapter that we
satisfy testing conditions. In the perfect case every <em>driven adapter</em>
should have a test analogue as well as all behaviours of <code>driver ports</code>
should be tested. Let&rsquo;s write a test adapter for the PushNotifications
port then:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln">1</span><span class="cl">  defmodule PushNotifications.TestAdapter do
</span></span><span class="line"><span class="ln">2</span><span class="cl">    @moduledoc &#34;Test adapter for push notifications&#34;
</span></span><span class="line"><span class="ln">3</span><span class="cl">    @behaviour Core.PushNotifications
</span></span><span class="line"><span class="ln">4</span><span class="cl">
</span></span><span class="line"><span class="ln">5</span><span class="cl">    @impl true
</span></span><span class="line"><span class="ln">6</span><span class="cl">    def send_notifications(message, recipients, payload) do
</span></span><span class="line"><span class="ln">7</span><span class="cl">       {:ok, [%{message: message, payload: payload, recipients: recipients}]}
</span></span><span class="line"><span class="ln">8</span><span class="cl">    end
</span></span><span class="line"><span class="ln">9</span><span class="cl">  end</span></span></code></pre></div><p>As you can see we are not sending data to the outer world but use a pure
function instead. In case of any incoming input we will know its&rsquo; output
for sure. Now, when we unit-test the <code>Core</code> module we just need to
select test adapter as the implementation of <code>PushNotifications</code>
interface. In Elixir ecosystem we have a great library called <code>Mox</code> that
can be used for such case:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln"> 1</span><span class="cl">  Mox.defmock(PushNotifications.TestMock, for: Core.PushNotifications)
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">  defmodule CoreTest do
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    use Core.DataCase, async: true
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    import Mox
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">   # Make sure mocks are verified when the test exits
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    setup :verify_on_exit!
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl">    test &#34;register/1&#34; do
</span></span><span class="line"><span class="ln">11</span><span class="cl">       stub_with(PushNotifications.TestMock, PushNotifications.TestAdapter)
</span></span><span class="line"><span class="ln">12</span><span class="cl">       assert {:ok, _} = Core.register_user(some_params)
</span></span><span class="line"><span class="ln">13</span><span class="cl">    end
</span></span><span class="line"><span class="ln">14</span><span class="cl">  end</span></span></code></pre></div><p>In this example you can see that we&rsquo;re not sending push notifications in
the real world but using the local test mock instead. We are free to
change the test adapter for any testing purposes if we want to.</p>
<p>From now you get your <em>driver</em> port&rsquo;s behaviour tested. As the next step
you can test exactly the adapter implementation without any outside
logic attached - you just need to check that your implementation is
working fine as it was predicted. As for the integration testing you&rsquo;re
free to choose between the real-world adapters or you may use some test
adapters for this purpose - it&rsquo;s up to you.</p>
<h2 id="pros-vs-cons">Pros vs Cons</h2>
<p>Now we&rsquo;ve covered the basics of ports and adapters architecture. Let&rsquo;s
summarise what we have:</p>
<h3 id="pros">Pros</h3>
<ul>
<li>Testability</li>
<li>Replaceability</li>
<li>Technology-agnostic approach - you can delay technological solutions</li>
<li>Isolating pure code from impure code</li>
<li>Isolating side-effects</li>
<li>Maintainability</li>
</ul>
<h3 id="cons">Cons</h3>
<ul>
<li>Sometimes it may be an overhead, especially for a small scale software</li>
<li>You may not need it if you are pretty sure that the technology stack
of your project will remain the same over the years</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>We applied ports &amp; adapters architecture at
<a href="https://salam.io">Salam.io</a> when it became clear that our software
will be using a lot of services which could be replaced in the future.
This approach has already given a lot of benefits and allowed us to make
our software even more testable and flexible.</p>
<p>If you want to know more about this architecture you can take a look at
the
<a href="https://web.archive.org/web/20180822100852/http://alistair.cockburn.us/Hexagonal&#43;architecture">original
article by Alistair Cockburn</a> .</p>
<p>In the next article of this series we will show how you can apply ports
&amp; adapters architecture in Clojure by using its language tools and
component libraries.</p>
<p>Stay tuned!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Well-crafted functional architecture: ports and adapters</title>
      <link>https://neiro.io/posts/2019-10-01-well-crafted-functional-architecture-ports-and-adapters.md/</link>
      <pubDate>Tue, 01 Oct 2019 10:00:00 +0200</pubDate>
      <guid>https://neiro.io/posts/2019-10-01-well-crafted-functional-architecture-ports-and-adapters.md/</guid>
      <description>&lt;p&gt;At &lt;a href=&#34;https://salam.io&#34;&gt;Salam.io&lt;/a&gt; we are developing a modern social&#xA;platform containing a humongous amount of features.&lt;/p&gt;&#xA;&lt;p&gt;Development of such product is quite hard and challenging - we need our&#xA;software to be robust, scalable, fault-tolerant, performant and at the&#xA;same time we want it to be easy to extend, test, maintain and support.&lt;/p&gt;&#xA;&lt;p&gt;All these issues are inevitable upon growth of the app but they for sure&#xA;can be simplified or even avoided by choosing, optimising the software&#xA;architecture.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>At <a href="https://salam.io">Salam.io</a> we are developing a modern social
platform containing a humongous amount of features.</p>
<p>Development of such product is quite hard and challenging - we need our
software to be robust, scalable, fault-tolerant, performant and at the
same time we want it to be easy to extend, test, maintain and support.</p>
<p>All these issues are inevitable upon growth of the app but they for sure
can be simplified or even avoided by choosing, optimising the software
architecture.</p>
<p>We also use functional programming languages -
<a href="https://clojure.org">Clojure</a> &amp; <a href="https://elixir-lang.org">Elixir</a> -
for the backend and frontend as much as possible. Therefore, we need to
adjust the existing architecture approaches to powerful abilities and
intricacies of modern functional programming.</p>
<p>That&rsquo;s why we&rsquo;re starting these series of articles - we think it&rsquo;s
crucial for everyone who&rsquo;s crafting the functional systems to understand
and apply software architectures rules and principles.</p>
<h2 id="why-ports-adapters">Why ports &amp; adapters ?</h2>
<p>Even if you&rsquo;re developing a relatively small scale software you still
need to design it first - and to design it properly. The earlier you
start caring about your architecture the earlier you can benefit from it
and the later a lot of issues caused by bad architecture would appear.</p>
<p>The main idea of ports &amp; adapters architecture is that application that
you&rsquo;re building is a <em>closed area</em>. This means that all your business
logic should be separated from technical details in this area. Often
architecture is about the boundaries so are the ports &amp; adapters.</p>
<p>In case you stick with ports &amp; adapters from the very beginning then
this approach should help you to keep your business logic separated and
easily tested s well as technology agnostic - you can write a port &amp; an
adapter for any software/third-party service/library that you&rsquo;re using
so it can be easily extended or switched in favour of another one.</p>
<h2 id="hexagonal">Hexagonal</h2>
<p>Ports &amp; adapters architecture also has another name: <em>Hexagonal
architecture</em>. According to this terminology the inner part of your
software - the place where you put your business logic - is hexagon
while your adapters are placed surround it.</p>
<figure><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/75/Hexagonal_Architecture.svg/1000px-Hexagonal_Architecture.svg.png"
    alt="Figure 1: Hexagon"><figcaption>
      <p><span class="figure-number">Figure 1: </span>Hexagon</p>
    </figcaption>
</figure>

<p>The hexagon should not contain any references to another frameworks,
real world services, libraries, etc. - all these elements should be
adapters. At the same time the architecture doesn&rsquo;t prescribe you to
design your hexagon in some certain way - you can use Layer
architecture, Onion, DDD or any another suitable architecture inside or
it may be a pure business logic without any sophistications - it&rsquo;s up to
you.</p>
<p>Why hexagon? Well, any geometric figure with boundaries could work, but
the hexagon represents better the concept that you have ports at the
edges of your application and adapters behind it. Likewise, it&rsquo;s a
symmetric figure and we&rsquo;ll describe below why it&rsquo;s important.</p>
<h2 id="ports">Ports</h2>
<p>Every time you need to interact with something from beyond of your
application logic you need to group these actions and describe them in a
<em>port</em>. The port is the edge of hexagon and it should be an integral and
essential part of your application.</p>
<p>Naming of the ports is quite important - you shouldn&rsquo;t use any
technology name in your port but focus on its mission instead. Some of
examples:</p>
<ul>
<li>PushNotifications</li>
<li>Search</li>
<li>Persistence</li>
<li>Authentication</li>
</ul>
<p>The majority of programming languages usually contain interfaces /
protocols feature allowing you to build a port. In Clojure, for example,
you can use <em>multimethods</em> or <em>protocols</em> to achieve this goal. But for
now let&rsquo;s see how we can implement the realisation of port for Elixir
using its&rsquo; capability to create <strong>behaviours</strong>:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln"> 1</span><span class="cl">  defmodule Core.PushNotifications do
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    @moduledoc &#34;&#34;&#34;
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    Port for sending push notifications.
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    &#34;&#34;&#34;
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    @type message :: %{title: String.t(), body: String.t()}
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    @type payload :: Keyword.t
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    @type recipients :: [map]
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl">    @adapter :core |&gt; Application.fetch_env!(__MODULE__) |&gt; Keyword.fetch!(:adapter)
</span></span><span class="line"><span class="ln">11</span><span class="cl">
</span></span><span class="line"><span class="ln">12</span><span class="cl">    @callback send_notifications(message, recipients, payload) :: {:ok, [map]} | {:error, any}
</span></span><span class="line"><span class="ln">13</span><span class="cl">
</span></span><span class="line"><span class="ln">14</span><span class="cl">    defdelegate send_notifications(message, recipients, payload), to: @adapter
</span></span><span class="line"><span class="ln">15</span><span class="cl">  end</span></span></code></pre></div><p>The example above is nothing more than an abstraction for using push
notifications from <code>Core</code>. We declare the behaviour and one callback
that specifies what we send and what we can expect as the result. The
exact implementation - adapter - should be placed in your app
configuration like:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln">1</span><span class="cl">  config :core, Core.PushNotifications, adapter: PushNotifications.APNS</span></span></code></pre></div><p>If you want to call this port from your application you just need to use
the delegated function:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln">1</span><span class="cl">  defmodule Core do
</span></span><span class="line"><span class="ln">2</span><span class="cl">    alias Core.PushNotifications
</span></span><span class="line"><span class="ln">3</span><span class="cl">
</span></span><span class="line"><span class="ln">4</span><span class="cl">    def register_user(params) do
</span></span><span class="line"><span class="ln">5</span><span class="cl">      # business logic ...
</span></span><span class="line"><span class="ln">6</span><span class="cl">       result = PushNotifications.send_notifications(message, recipients, payload)
</span></span><span class="line"><span class="ln">7</span><span class="cl">      # handle the result somehow
</span></span><span class="line"><span class="ln">8</span><span class="cl">    end
</span></span><span class="line"><span class="ln">9</span><span class="cl">  end</span></span></code></pre></div><p>As you can see, from the <code>Core</code> we know nothing about the implementation
details - we just send notifications to users and that&rsquo;s it. In ideal
case we need to move <strong>any impure function, any side-effect</strong> to the edge
of the system - to adapters and call them <strong>only by using ports</strong> .</p>
<h2 id="driver-adapters">Driver Adapters</h2>
<p>Adapters are components which are placed outside of your application -
and your hexagon. They should represent the technology, service, library
that you need to interact through the port.</p>
<p>We specify two types of adapters: <em>Driver</em> and <em>Driven</em>.</p>
<p>The first ones are something from the left side of the picture above. It
could be a HTML page, API endpoint, CLI application, GUI or anything
that <em>drives</em> your application. That also means that the driver adapter
should use a driver port interface so your app receives technology
agnostic request on its borders.</p>
<p>Let&rsquo;s assume that we also have a web application that uses our <em>Core</em>.
If we want to register user then we need to call a
<code>Core.register_user/1</code> function from inside of our controller. In that
case <code>UserController</code> is our driver adapter and <code>Core</code> is the called
application. Fortunately, in Elixir we have type specs that can play a
role of specification of driver port so you&rsquo;ll always be able to see
what we need to send and what we should expect in response.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln">1</span><span class="cl">  defmodule Web.UserController do
</span></span><span class="line"><span class="ln">2</span><span class="cl">    use Web, :controller
</span></span><span class="line"><span class="ln">3</span><span class="cl">
</span></span><span class="line"><span class="ln">4</span><span class="cl">    def create(conn, params) do
</span></span><span class="line"><span class="ln">5</span><span class="cl">      result = Core.register_user(params) # will create user and send notifications
</span></span><span class="line"><span class="ln">6</span><span class="cl">     # handle the result somehow
</span></span><span class="line"><span class="ln">7</span><span class="cl">    end
</span></span><span class="line"><span class="ln">8</span><span class="cl">  end</span></span></code></pre></div><p>In the approach above you can see that we use <code>Core.register_user/1</code>
function as the driver port - because it&rsquo;s spec describes the
interface - and <code>Web.UserController.index/2</code> as the driver adapter.</p>
<h2 id="driven-adapters">Driven Adapters</h2>
<p>A <em>Driven</em> adapter implements an interface given by driven port. That
means that now driven adapter depends on our application, but not visa
versa. The same as driver, this adapter should also be placed outside of
our hexagon and represents a technology/library/real-world device.</p>
<p>Common examples are:</p>
<ul>
<li>Persistence adapters - SQL, NoSQL databases or even in-memory / file
storage</li>
<li>Cache adapters - Redis / Memcached / ETS or in-memory storage</li>
<li>Email adapters - SMTP or third-party services</li>
<li>Message queue adapters</li>
<li>Third-party APIs</li>
</ul>
<p>Let&rsquo;s continue the push notifications solution we&rsquo;ve started before.
Now, in order to implement the driver adapter, we need to use the port
<code>Core.PushNotifications</code> and it&rsquo;s callback <code>send_notifications</code>. We will
adapt realisation of sending push notifications over APNS by the
specification that was given us by this port:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln"> 1</span><span class="cl">  defmodule PushNotifications.APNS do
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    @moduledoc &#34;APNS adapter for push notifications&#34;
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    @behaviour Core.PushNotifications
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    @impl true
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    def send_notifications(message, recipients, payload) do
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">      {:ok, recipients
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">      |&gt; Enum.map(fn r -&gt; build_notification(message, r, payload) end)
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">      |&gt; Pigeon.APNS.Notification.push()}
</span></span><span class="line"><span class="ln">10</span><span class="cl">    end
</span></span><span class="line"><span class="ln">11</span><span class="cl">
</span></span><span class="line"><span class="ln">12</span><span class="cl">     defp build_notification(message, recipient, payload) do
</span></span><span class="line"><span class="ln">13</span><span class="cl">       Pigeon.APNS.Notification.new(message, recipient.device_token, payload)
</span></span><span class="line"><span class="ln">14</span><span class="cl">     end
</span></span><span class="line"><span class="ln">15</span><span class="cl">  end</span></span></code></pre></div><p>Now our push notifications are almost completed. We can always change
the implementation - for example, from APNS to Firebase - or use
third-party library <strong>* without changing our core application*</strong> - so we
can say that&rsquo;s technology agnostic approach.</p>
<h2 id="testing">Testing</h2>
<p>Of course the main benefit of ports and adapters architecture is
improved testability. Instead of manually mocking calls to the
real-world providers we just need to create a test adapter that we
satisfy testing conditions. In the perfect case every <em>driven adapter</em>
should have a test analogue as well as all behaviours of <code>driver ports</code>
should be tested. Let&rsquo;s write a test adapter for the PushNotifications
port then:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln">1</span><span class="cl">  defmodule PushNotifications.TestAdapter do
</span></span><span class="line"><span class="ln">2</span><span class="cl">    @moduledoc &#34;Test adapter for push notifications&#34;
</span></span><span class="line"><span class="ln">3</span><span class="cl">    @behaviour Core.PushNotifications
</span></span><span class="line"><span class="ln">4</span><span class="cl">
</span></span><span class="line"><span class="ln">5</span><span class="cl">    @impl true
</span></span><span class="line"><span class="ln">6</span><span class="cl">    def send_notifications(message, recipients, payload) do
</span></span><span class="line"><span class="ln">7</span><span class="cl">       {:ok, [%{message: message, payload: payload, recipients: recipients}]}
</span></span><span class="line"><span class="ln">8</span><span class="cl">    end
</span></span><span class="line"><span class="ln">9</span><span class="cl">  end</span></span></code></pre></div><p>As you can see we are not sending data to the outer world but use a pure
function instead. In case of any incoming input we will know its&rsquo; output
for sure. Now, when we unit-test the <code>Core</code> module we just need to
select test adapter as the implementation of <code>PushNotifications</code>
interface. In Elixir ecosystem we have a great library called <code>Mox</code> that
can be used for such case:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln"> 1</span><span class="cl">  Mox.defmock(PushNotifications.TestMock, for: Core.PushNotifications)
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">  defmodule CoreTest do
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    use Core.DataCase, async: true
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    import Mox
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">   # Make sure mocks are verified when the test exits
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    setup :verify_on_exit!
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl">    test &#34;register/1&#34; do
</span></span><span class="line"><span class="ln">11</span><span class="cl">       stub_with(PushNotifications.TestMock, PushNotifications.TestAdapter)
</span></span><span class="line"><span class="ln">12</span><span class="cl">       assert {:ok, _} = Core.register_user(some_params)
</span></span><span class="line"><span class="ln">13</span><span class="cl">    end
</span></span><span class="line"><span class="ln">14</span><span class="cl">  end</span></span></code></pre></div><p>In this example you can see that we&rsquo;re not sending push notifications in
the real world but using the local test mock instead. We are free to
change the test adapter for any testing purposes if we want to.</p>
<p>From now you get your <em>driver</em> port&rsquo;s behaviour tested. As the next step
you can test exactly the adapter implementation without any outside
logic attached - you just need to check that your implementation is
working fine as it was predicted. As for the integration testing you&rsquo;re
free to choose between the real-world adapters or you may use some test
adapters for this purpose - it&rsquo;s up to you.</p>
<h2 id="pros-vs-cons">Pros vs Cons</h2>
<p>Now we&rsquo;ve covered the basics of ports and adapters architecture. Let&rsquo;s
summarise what we have:</p>
<h3 id="pros">Pros</h3>
<ul>
<li>Testability</li>
<li>Replaceability</li>
<li>Technology-agnostic approach - you can delay technological solutions</li>
<li>Isolating pure code from impure code</li>
<li>Isolating side-effects</li>
<li>Maintainability</li>
</ul>
<h3 id="cons">Cons</h3>
<ul>
<li>Sometimes it may be an overhead, especially for a small scale software</li>
<li>You may not need it if you are pretty sure that the technology stack
of your project will remain the same over the years</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>We applied ports &amp; adapters architecture at
<a href="https://salam.io">Salam.io</a> when it became clear that our software
will be using a lot of services which could be replaced in the future.
This approach has already given a lot of benefits and allowed us to make
our software even more testable and flexible.</p>
<p>If you want to know more about this architecture you can take a look at
the
<a href="https://web.archive.org/web/20180822100852/http://alistair.cockburn.us/Hexagonal&#43;architecture">original
article by Alistair Cockburn</a> .</p>
<p>In the next article of this series we will show how you can apply ports
&amp; adapters architecture in Clojure by using its language tools and
component libraries.</p>
<p>Stay tuned!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Markov chains in Elixir</title>
      <link>https://neiro.io/blog/2016-07-31-markov-chains-in-elixir.md/</link>
      <pubDate>Sun, 31 Jul 2016 10:00:00 +0200</pubDate>
      <guid>https://neiro.io/blog/2016-07-31-markov-chains-in-elixir.md/</guid>
      <description>&lt;h2 id=&#34;markov-chains&#34;&gt;Markov chains&lt;/h2&gt;&#xA;&lt;p&gt;Markov chain or Markov model is a process that undergoes transitions&#xA;from one state to another. The next state depends only on current state&#xA;and not the sequence of previous events. This allows us to use Markov&#xA;chains as statistical models for real-world processes.&lt;/p&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/7/7a/Markov_Chain_weather_model_matrix_as_a_graph.png&#34;&#xA;    alt=&#34;Figure 1: Simple Markov chain&#34;&gt;&lt;figcaption&gt;&#xA;      &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Simple Markov chain&lt;/p&gt;&#xA;    &lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;For the next example we will try to build simple sentence generator&#xA;within Markov chain.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="markov-chains">Markov chains</h2>
<p>Markov chain or Markov model is a process that undergoes transitions
from one state to another. The next state depends only on current state
and not the sequence of previous events. This allows us to use Markov
chains as statistical models for real-world processes.</p>
<figure><img src="https://upload.wikimedia.org/wikipedia/commons/7/7a/Markov_Chain_weather_model_matrix_as_a_graph.png"
    alt="Figure 1: Simple Markov chain"><figcaption>
      <p><span class="figure-number">Figure 1: </span>Simple Markov chain</p>
    </figcaption>
</figure>

<p>For the next example we will try to build simple sentence generator
within Markov chain.</p>
<h2 id="realization">Realization</h2>
<p>Let&rsquo;s create an entry point of new application:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln"> 1</span><span class="cl">    # lib/elixir markov chain.ex
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    defmodule ElixirMarkovChain do
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">      alias ElixirMarkovChain.Model
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">      alias ElixirMarkovChain.Generator
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">      def start(_type, _args) do
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">        case File.read(Application.get_env :elixir_markov_chain, :source_file) do
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">           {:ok, body} -&gt; process_source body
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">           {:error, reason} -&gt; IO.puts reason
</span></span><span class="line"><span class="ln">10</span><span class="cl">        end
</span></span><span class="line"><span class="ln">11</span><span class="cl">
</span></span><span class="line"><span class="ln">12</span><span class="cl">        System.halt 0
</span></span><span class="line"><span class="ln">13</span><span class="cl">      end
</span></span><span class="line"><span class="ln">14</span><span class="cl">
</span></span><span class="line"><span class="ln">15</span><span class="cl">      defp process_source do
</span></span><span class="line"><span class="ln">16</span><span class="cl">      end
</span></span><span class="line"><span class="ln">17</span><span class="cl">    end</span></span></code></pre></div><p>At first, to process the source file for output sentences, we need to
tokenize it:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln">1</span><span class="cl">    # lib/elixir_markov_chain/tokenizer.ex
</span></span><span class="line"><span class="ln">2</span><span class="cl">    defmodule ElixirMarkovChain.Tokenizer do
</span></span><span class="line"><span class="ln">3</span><span class="cl">      def tokenize(text) do
</span></span><span class="line"><span class="ln">4</span><span class="cl">        text
</span></span><span class="line"><span class="ln">5</span><span class="cl">          |&gt; String.downcase
</span></span><span class="line"><span class="ln">6</span><span class="cl">          |&gt; String.split(~r{\n}, trim: true) # split text to sentences
</span></span><span class="line"><span class="ln">7</span><span class="cl">          |&gt; Enum.map(&amp;String.split/1) # split sentences to words
</span></span><span class="line"><span class="ln">8</span><span class="cl">      end
</span></span><span class="line"><span class="ln">9</span><span class="cl">    end</span></span></code></pre></div><p>Next we need to realize Markov model. We&rsquo;ll use agents to share state in
application:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln"> 1</span><span class="cl">    # lib/elixir_markov_chain/model.ex
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    defmodule ElixirMarkovChain.Model do
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">      import ElixirMarkovChain.Tokenizer
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">      def start_link, do: Agent.start_link(fn -&gt; %{} end) # create map for sharing through agent
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">      def populate(pid, text) do
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">        for tokens &lt;- tokenize(text), do: modelize(pid, tokens) # populate model with tokens
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">        pid
</span></span><span class="line"><span class="ln">10</span><span class="cl">      end
</span></span><span class="line"><span class="ln">11</span><span class="cl">
</span></span><span class="line"><span class="ln">12</span><span class="cl">      def fetch_token(state, pid) do
</span></span><span class="line"><span class="ln">13</span><span class="cl">        tokens = fetch_tokens state, pid
</span></span><span class="line"><span class="ln">14</span><span class="cl">
</span></span><span class="line"><span class="ln">15</span><span class="cl">        if length(tokens) &gt; 0 do
</span></span><span class="line"><span class="ln">16</span><span class="cl">          token = Enum.random tokens
</span></span><span class="line"><span class="ln">17</span><span class="cl">          count = tokens |&gt; Enum.count(&amp;(token == &amp;1))
</span></span><span class="line"><span class="ln">18</span><span class="cl">          {token, count / length(tokens)} # count probability of the token
</span></span><span class="line"><span class="ln">19</span><span class="cl">        else
</span></span><span class="line"><span class="ln">20</span><span class="cl">          {&#34;&#34;, 0.0}
</span></span><span class="line"><span class="ln">21</span><span class="cl">        end
</span></span><span class="line"><span class="ln">22</span><span class="cl">      end
</span></span><span class="line"><span class="ln">23</span><span class="cl">
</span></span><span class="line"><span class="ln">24</span><span class="cl">      def fetch_state(tokens), do: fetch_state(tokens, length(tokens))
</span></span><span class="line"><span class="ln">25</span><span class="cl">      defp fetch_state(_tokens, id) when id == 0, do: {nil, nil}
</span></span><span class="line"><span class="ln">26</span><span class="cl">      defp fetch_state([head | _tail], id) when id == 1, do: {nil, head}
</span></span><span class="line"><span class="ln">27</span><span class="cl">      defp fetch_state(tokens, id) do
</span></span><span class="line"><span class="ln">28</span><span class="cl">        tokens
</span></span><span class="line"><span class="ln">29</span><span class="cl">          |&gt; Enum.slice(id - 2..id - 1) # fetch states by ids
</span></span><span class="line"><span class="ln">30</span><span class="cl">          |&gt; List.to_tuple
</span></span><span class="line"><span class="ln">31</span><span class="cl">      end
</span></span><span class="line"><span class="ln">32</span><span class="cl">
</span></span><span class="line"><span class="ln">33</span><span class="cl">      # Get tokens within agent
</span></span><span class="line"><span class="ln">34</span><span class="cl">      defp fetch_tokens(state, pid), do: Agent.get pid, &amp;(&amp;1[state] || [])
</span></span><span class="line"><span class="ln">35</span><span class="cl">
</span></span><span class="line"><span class="ln">36</span><span class="cl">      # Build Markov chain model using tokens
</span></span><span class="line"><span class="ln">37</span><span class="cl">      defp modelize(pid, tokens) do
</span></span><span class="line"><span class="ln">38</span><span class="cl">        for {token, id} &lt;- Enum.with_index(tokens) do
</span></span><span class="line"><span class="ln">39</span><span class="cl">          tokens |&gt; fetch_state(id) |&gt; add_state(pid, token)
</span></span><span class="line"><span class="ln">40</span><span class="cl">        end
</span></span><span class="line"><span class="ln">41</span><span class="cl">      end
</span></span><span class="line"><span class="ln">42</span><span class="cl">
</span></span><span class="line"><span class="ln">43</span><span class="cl">      # Add new state within agent
</span></span><span class="line"><span class="ln">44</span><span class="cl">      defp add_state(state, pid, token) do
</span></span><span class="line"><span class="ln">45</span><span class="cl">        Agent.update pid, fn(model) -&gt;
</span></span><span class="line"><span class="ln">46</span><span class="cl">          current_state = model[state] || []
</span></span><span class="line"><span class="ln">47</span><span class="cl">          Map.put model, state, [token | current_state]
</span></span><span class="line"><span class="ln">48</span><span class="cl">        end
</span></span><span class="line"><span class="ln">49</span><span class="cl">      end
</span></span><span class="line"><span class="ln">50</span><span class="cl">    end</span></span></code></pre></div><p>When our Markov model is done, we can use it in application. For this
example, we&rsquo;ll build a random sentence generator based on text source:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln"> 1</span><span class="cl">    # lib/elixir_markov_chain/generator.ex
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    defmodule ElixirMarkovChain.Generator do
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">      alias ElixirMarkovChain.Model
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">      def create_sentence(pid) do
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">        {sentence, prob} = build_sentence pid
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">        # Create new sentence or convert builded based on treshold value
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">        if prob &gt;= Application.get_env(:elixir_markov_chain, :treshold) do
</span></span><span class="line"><span class="ln">10</span><span class="cl">          sentence |&gt; Enum.join(&#34; &#34;) |&gt; String.capitalize
</span></span><span class="line"><span class="ln">11</span><span class="cl">        else
</span></span><span class="line"><span class="ln">12</span><span class="cl">          create_sentence pid
</span></span><span class="line"><span class="ln">13</span><span class="cl">        end
</span></span><span class="line"><span class="ln">14</span><span class="cl">      end
</span></span><span class="line"><span class="ln">15</span><span class="cl">
</span></span><span class="line"><span class="ln">16</span><span class="cl">      # Sentence is complete when it have enough length
</span></span><span class="line"><span class="ln">17</span><span class="cl">      # or when punctuation ends a sentence
</span></span><span class="line"><span class="ln">18</span><span class="cl">      defp complete?(tokens) do
</span></span><span class="line"><span class="ln">19</span><span class="cl">        length(tokens) &gt; 15 ||
</span></span><span class="line"><span class="ln">20</span><span class="cl">        (length(tokens) &gt; 3 &amp;&amp; Regex.match?(~r/[\!\?\.]\z/, List.last tokens))
</span></span><span class="line"><span class="ln">21</span><span class="cl">      end
</span></span><span class="line"><span class="ln">22</span><span class="cl">
</span></span><span class="line"><span class="ln">23</span><span class="cl">      defp build_sentence(pid), do: build_sentence(pid, [], 0.0, 0.0)
</span></span><span class="line"><span class="ln">24</span><span class="cl">      defp build_sentence(pid, tokens, prob_acc, new_tokens) do
</span></span><span class="line"><span class="ln">25</span><span class="cl">        # Fetch Markov model state through agent
</span></span><span class="line"><span class="ln">26</span><span class="cl">        {token, prob} = tokens |&gt; Model.fetch_state |&gt; Model.fetch_token(pid)
</span></span><span class="line"><span class="ln">27</span><span class="cl">
</span></span><span class="line"><span class="ln">28</span><span class="cl">        case complete?(tokens) do
</span></span><span class="line"><span class="ln">29</span><span class="cl">          true -&gt;
</span></span><span class="line"><span class="ln">30</span><span class="cl">            score = case new_tokens == 0 do
</span></span><span class="line"><span class="ln">31</span><span class="cl">              true -&gt; 1.0
</span></span><span class="line"><span class="ln">32</span><span class="cl">              _ -&gt; prob_acc / new_tokens # count new probability for this word
</span></span><span class="line"><span class="ln">33</span><span class="cl">            end
</span></span><span class="line"><span class="ln">34</span><span class="cl">            {tokens, score}
</span></span><span class="line"><span class="ln">35</span><span class="cl">          _ -&gt;
</span></span><span class="line"><span class="ln">36</span><span class="cl">            # Concat sentence with new token and try to continue
</span></span><span class="line"><span class="ln">37</span><span class="cl">            build_sentence pid, tokens ++ [token], prob + prob_acc, new_tokens + 1
</span></span><span class="line"><span class="ln">38</span><span class="cl">        end
</span></span><span class="line"><span class="ln">39</span><span class="cl">      end
</span></span><span class="line"><span class="ln">40</span><span class="cl">    end</span></span></code></pre></div><p>Now, when basic logic is implemented, we need to fill <code>process_source</code>
function:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln">1</span><span class="cl">    # lib/elixir_markov_chain.ex
</span></span><span class="line"><span class="ln">2</span><span class="cl">    defp process_source(text) do
</span></span><span class="line"><span class="ln">3</span><span class="cl">      {:ok, model} = Model.start_link
</span></span><span class="line"><span class="ln">4</span><span class="cl">      model = Model.populate model, text # populate Markov model with the source
</span></span><span class="line"><span class="ln">5</span><span class="cl">
</span></span><span class="line"><span class="ln">6</span><span class="cl">      # Generate 10 random sentences based on text source
</span></span><span class="line"><span class="ln">7</span><span class="cl">      Enum.each(1..10, fn(_) -&gt; model |&gt; Generator.create_sentence |&gt; IO.puts end)
</span></span><span class="line"><span class="ln">8</span><span class="cl">    end</span></span></code></pre></div><h2 id="result">Result</h2>
<p>Processed from <em>Thus Spoke Zarathustra</em> by <em>Friedrich Nietzsche</em>:</p>
<ul>
<li>By thee pursued, my fancy!</li>
<li>Nether-world, thou exuberant star!</li>
<li>Well then! we part here!</li>
<li>Snare for me&ndash;the desire for love&ndash;that i should like to strangle me,
thou fountain of delight!</li>
<li>As yet without meaning: a buffoon at heart.</li>
<li>Loved by overflowing hearts.</li>
<li>Growling bear, and sweeten thy soul!</li>
<li>Fountains shall rush down into his height!</li>
</ul>
<p>Processed from <em>Metamorphosis</em> by <em>Franz Kafka</em>:</p>
<ul>
<li>&ldquo;it&rsquo;s got to get up.</li>
<li>Where we have to open the door, holding himself upright as preparation
for getting through the</li>
<li>Incidental damages even if he did not know that he wouldn&rsquo;t have to
suffer the view</li>
<li>The gentlemen bent over the dishes set in front of them were blown
onto the cool,</li>
<li>Gregor then turned to look after my parents suffer!</li>
<li>&ldquo;we have to overcome it because of that.</li>
<li>Does not agree to be patient.</li>
<li>&ldquo;leave my home. now!&rdquo;, said mr.</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>Elixir allows to easily build Markov chains and applicate them to real
world processes. In our case we have built the random text generator,
but you can find Markov models useful for another cases. To view entire
application please visit
<a href="https://github.com/ne1ro/elixir-markov-chain">this repository</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Markov chains in Elixir</title>
      <link>https://neiro.io/posts/2016-07-31-markov-chains-in-elixir.md/</link>
      <pubDate>Sun, 31 Jul 2016 10:00:00 +0200</pubDate>
      <guid>https://neiro.io/posts/2016-07-31-markov-chains-in-elixir.md/</guid>
      <description>&lt;h2 id=&#34;markov-chains&#34;&gt;Markov chains&lt;/h2&gt;&#xA;&lt;p&gt;Markov chain or Markov model is a process that undergoes transitions&#xA;from one state to another. The next state depends only on current state&#xA;and not the sequence of previous events. This allows us to use Markov&#xA;chains as statistical models for real-world processes.&lt;/p&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/7/7a/Markov_Chain_weather_model_matrix_as_a_graph.png&#34;&#xA;    alt=&#34;Figure 1: Simple Markov chain&#34;&gt;&lt;figcaption&gt;&#xA;      &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Simple Markov chain&lt;/p&gt;&#xA;    &lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;For the next example we will try to build simple sentence generator&#xA;within Markov chain.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="markov-chains">Markov chains</h2>
<p>Markov chain or Markov model is a process that undergoes transitions
from one state to another. The next state depends only on current state
and not the sequence of previous events. This allows us to use Markov
chains as statistical models for real-world processes.</p>
<figure><img src="https://upload.wikimedia.org/wikipedia/commons/7/7a/Markov_Chain_weather_model_matrix_as_a_graph.png"
    alt="Figure 1: Simple Markov chain"><figcaption>
      <p><span class="figure-number">Figure 1: </span>Simple Markov chain</p>
    </figcaption>
</figure>

<p>For the next example we will try to build simple sentence generator
within Markov chain.</p>
<h2 id="realization">Realization</h2>
<p>Let&rsquo;s create an entry point of new application:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln"> 1</span><span class="cl">    # lib/elixir markov chain.ex
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    defmodule ElixirMarkovChain do
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">      alias ElixirMarkovChain.Model
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">      alias ElixirMarkovChain.Generator
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">      def start(_type, _args) do
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">        case File.read(Application.get_env :elixir_markov_chain, :source_file) do
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">           {:ok, body} -&gt; process_source body
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">           {:error, reason} -&gt; IO.puts reason
</span></span><span class="line"><span class="ln">10</span><span class="cl">        end
</span></span><span class="line"><span class="ln">11</span><span class="cl">
</span></span><span class="line"><span class="ln">12</span><span class="cl">        System.halt 0
</span></span><span class="line"><span class="ln">13</span><span class="cl">      end
</span></span><span class="line"><span class="ln">14</span><span class="cl">
</span></span><span class="line"><span class="ln">15</span><span class="cl">      defp process_source do
</span></span><span class="line"><span class="ln">16</span><span class="cl">      end
</span></span><span class="line"><span class="ln">17</span><span class="cl">    end</span></span></code></pre></div><p>At first, to process the source file for output sentences, we need to
tokenize it:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln">1</span><span class="cl">    # lib/elixir_markov_chain/tokenizer.ex
</span></span><span class="line"><span class="ln">2</span><span class="cl">    defmodule ElixirMarkovChain.Tokenizer do
</span></span><span class="line"><span class="ln">3</span><span class="cl">      def tokenize(text) do
</span></span><span class="line"><span class="ln">4</span><span class="cl">        text
</span></span><span class="line"><span class="ln">5</span><span class="cl">          |&gt; String.downcase
</span></span><span class="line"><span class="ln">6</span><span class="cl">          |&gt; String.split(~r{\n}, trim: true) # split text to sentences
</span></span><span class="line"><span class="ln">7</span><span class="cl">          |&gt; Enum.map(&amp;String.split/1) # split sentences to words
</span></span><span class="line"><span class="ln">8</span><span class="cl">      end
</span></span><span class="line"><span class="ln">9</span><span class="cl">    end</span></span></code></pre></div><p>Next we need to realize Markov model. We&rsquo;ll use agents to share state in
application:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln"> 1</span><span class="cl">    # lib/elixir_markov_chain/model.ex
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    defmodule ElixirMarkovChain.Model do
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">      import ElixirMarkovChain.Tokenizer
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">      def start_link, do: Agent.start_link(fn -&gt; %{} end) # create map for sharing through agent
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">      def populate(pid, text) do
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">        for tokens &lt;- tokenize(text), do: modelize(pid, tokens) # populate model with tokens
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">        pid
</span></span><span class="line"><span class="ln">10</span><span class="cl">      end
</span></span><span class="line"><span class="ln">11</span><span class="cl">
</span></span><span class="line"><span class="ln">12</span><span class="cl">      def fetch_token(state, pid) do
</span></span><span class="line"><span class="ln">13</span><span class="cl">        tokens = fetch_tokens state, pid
</span></span><span class="line"><span class="ln">14</span><span class="cl">
</span></span><span class="line"><span class="ln">15</span><span class="cl">        if length(tokens) &gt; 0 do
</span></span><span class="line"><span class="ln">16</span><span class="cl">          token = Enum.random tokens
</span></span><span class="line"><span class="ln">17</span><span class="cl">          count = tokens |&gt; Enum.count(&amp;(token == &amp;1))
</span></span><span class="line"><span class="ln">18</span><span class="cl">          {token, count / length(tokens)} # count probability of the token
</span></span><span class="line"><span class="ln">19</span><span class="cl">        else
</span></span><span class="line"><span class="ln">20</span><span class="cl">          {&#34;&#34;, 0.0}
</span></span><span class="line"><span class="ln">21</span><span class="cl">        end
</span></span><span class="line"><span class="ln">22</span><span class="cl">      end
</span></span><span class="line"><span class="ln">23</span><span class="cl">
</span></span><span class="line"><span class="ln">24</span><span class="cl">      def fetch_state(tokens), do: fetch_state(tokens, length(tokens))
</span></span><span class="line"><span class="ln">25</span><span class="cl">      defp fetch_state(_tokens, id) when id == 0, do: {nil, nil}
</span></span><span class="line"><span class="ln">26</span><span class="cl">      defp fetch_state([head | _tail], id) when id == 1, do: {nil, head}
</span></span><span class="line"><span class="ln">27</span><span class="cl">      defp fetch_state(tokens, id) do
</span></span><span class="line"><span class="ln">28</span><span class="cl">        tokens
</span></span><span class="line"><span class="ln">29</span><span class="cl">          |&gt; Enum.slice(id - 2..id - 1) # fetch states by ids
</span></span><span class="line"><span class="ln">30</span><span class="cl">          |&gt; List.to_tuple
</span></span><span class="line"><span class="ln">31</span><span class="cl">      end
</span></span><span class="line"><span class="ln">32</span><span class="cl">
</span></span><span class="line"><span class="ln">33</span><span class="cl">      # Get tokens within agent
</span></span><span class="line"><span class="ln">34</span><span class="cl">      defp fetch_tokens(state, pid), do: Agent.get pid, &amp;(&amp;1[state] || [])
</span></span><span class="line"><span class="ln">35</span><span class="cl">
</span></span><span class="line"><span class="ln">36</span><span class="cl">      # Build Markov chain model using tokens
</span></span><span class="line"><span class="ln">37</span><span class="cl">      defp modelize(pid, tokens) do
</span></span><span class="line"><span class="ln">38</span><span class="cl">        for {token, id} &lt;- Enum.with_index(tokens) do
</span></span><span class="line"><span class="ln">39</span><span class="cl">          tokens |&gt; fetch_state(id) |&gt; add_state(pid, token)
</span></span><span class="line"><span class="ln">40</span><span class="cl">        end
</span></span><span class="line"><span class="ln">41</span><span class="cl">      end
</span></span><span class="line"><span class="ln">42</span><span class="cl">
</span></span><span class="line"><span class="ln">43</span><span class="cl">      # Add new state within agent
</span></span><span class="line"><span class="ln">44</span><span class="cl">      defp add_state(state, pid, token) do
</span></span><span class="line"><span class="ln">45</span><span class="cl">        Agent.update pid, fn(model) -&gt;
</span></span><span class="line"><span class="ln">46</span><span class="cl">          current_state = model[state] || []
</span></span><span class="line"><span class="ln">47</span><span class="cl">          Map.put model, state, [token | current_state]
</span></span><span class="line"><span class="ln">48</span><span class="cl">        end
</span></span><span class="line"><span class="ln">49</span><span class="cl">      end
</span></span><span class="line"><span class="ln">50</span><span class="cl">    end</span></span></code></pre></div><p>When our Markov model is done, we can use it in application. For this
example, we&rsquo;ll build a random sentence generator based on text source:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln"> 1</span><span class="cl">    # lib/elixir_markov_chain/generator.ex
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    defmodule ElixirMarkovChain.Generator do
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">      alias ElixirMarkovChain.Model
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">      def create_sentence(pid) do
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">        {sentence, prob} = build_sentence pid
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">        # Create new sentence or convert builded based on treshold value
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">        if prob &gt;= Application.get_env(:elixir_markov_chain, :treshold) do
</span></span><span class="line"><span class="ln">10</span><span class="cl">          sentence |&gt; Enum.join(&#34; &#34;) |&gt; String.capitalize
</span></span><span class="line"><span class="ln">11</span><span class="cl">        else
</span></span><span class="line"><span class="ln">12</span><span class="cl">          create_sentence pid
</span></span><span class="line"><span class="ln">13</span><span class="cl">        end
</span></span><span class="line"><span class="ln">14</span><span class="cl">      end
</span></span><span class="line"><span class="ln">15</span><span class="cl">
</span></span><span class="line"><span class="ln">16</span><span class="cl">      # Sentence is complete when it have enough length
</span></span><span class="line"><span class="ln">17</span><span class="cl">      # or when punctuation ends a sentence
</span></span><span class="line"><span class="ln">18</span><span class="cl">      defp complete?(tokens) do
</span></span><span class="line"><span class="ln">19</span><span class="cl">        length(tokens) &gt; 15 ||
</span></span><span class="line"><span class="ln">20</span><span class="cl">        (length(tokens) &gt; 3 &amp;&amp; Regex.match?(~r/[\!\?\.]\z/, List.last tokens))
</span></span><span class="line"><span class="ln">21</span><span class="cl">      end
</span></span><span class="line"><span class="ln">22</span><span class="cl">
</span></span><span class="line"><span class="ln">23</span><span class="cl">      defp build_sentence(pid), do: build_sentence(pid, [], 0.0, 0.0)
</span></span><span class="line"><span class="ln">24</span><span class="cl">      defp build_sentence(pid, tokens, prob_acc, new_tokens) do
</span></span><span class="line"><span class="ln">25</span><span class="cl">        # Fetch Markov model state through agent
</span></span><span class="line"><span class="ln">26</span><span class="cl">        {token, prob} = tokens |&gt; Model.fetch_state |&gt; Model.fetch_token(pid)
</span></span><span class="line"><span class="ln">27</span><span class="cl">
</span></span><span class="line"><span class="ln">28</span><span class="cl">        case complete?(tokens) do
</span></span><span class="line"><span class="ln">29</span><span class="cl">          true -&gt;
</span></span><span class="line"><span class="ln">30</span><span class="cl">            score = case new_tokens == 0 do
</span></span><span class="line"><span class="ln">31</span><span class="cl">              true -&gt; 1.0
</span></span><span class="line"><span class="ln">32</span><span class="cl">              _ -&gt; prob_acc / new_tokens # count new probability for this word
</span></span><span class="line"><span class="ln">33</span><span class="cl">            end
</span></span><span class="line"><span class="ln">34</span><span class="cl">            {tokens, score}
</span></span><span class="line"><span class="ln">35</span><span class="cl">          _ -&gt;
</span></span><span class="line"><span class="ln">36</span><span class="cl">            # Concat sentence with new token and try to continue
</span></span><span class="line"><span class="ln">37</span><span class="cl">            build_sentence pid, tokens ++ [token], prob + prob_acc, new_tokens + 1
</span></span><span class="line"><span class="ln">38</span><span class="cl">        end
</span></span><span class="line"><span class="ln">39</span><span class="cl">      end
</span></span><span class="line"><span class="ln">40</span><span class="cl">    end</span></span></code></pre></div><p>Now, when basic logic is implemented, we need to fill <code>process_source</code>
function:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln">1</span><span class="cl">    # lib/elixir_markov_chain.ex
</span></span><span class="line"><span class="ln">2</span><span class="cl">    defp process_source(text) do
</span></span><span class="line"><span class="ln">3</span><span class="cl">      {:ok, model} = Model.start_link
</span></span><span class="line"><span class="ln">4</span><span class="cl">      model = Model.populate model, text # populate Markov model with the source
</span></span><span class="line"><span class="ln">5</span><span class="cl">
</span></span><span class="line"><span class="ln">6</span><span class="cl">      # Generate 10 random sentences based on text source
</span></span><span class="line"><span class="ln">7</span><span class="cl">      Enum.each(1..10, fn(_) -&gt; model |&gt; Generator.create_sentence |&gt; IO.puts end)
</span></span><span class="line"><span class="ln">8</span><span class="cl">    end</span></span></code></pre></div><h2 id="result">Result</h2>
<p>Processed from <em>Thus Spoke Zarathustra</em> by <em>Friedrich Nietzsche</em>:</p>
<ul>
<li>By thee pursued, my fancy!</li>
<li>Nether-world, thou exuberant star!</li>
<li>Well then! we part here!</li>
<li>Snare for me&ndash;the desire for love&ndash;that i should like to strangle me,
thou fountain of delight!</li>
<li>As yet without meaning: a buffoon at heart.</li>
<li>Loved by overflowing hearts.</li>
<li>Growling bear, and sweeten thy soul!</li>
<li>Fountains shall rush down into his height!</li>
</ul>
<p>Processed from <em>Metamorphosis</em> by <em>Franz Kafka</em>:</p>
<ul>
<li>&ldquo;it&rsquo;s got to get up.</li>
<li>Where we have to open the door, holding himself upright as preparation
for getting through the</li>
<li>Incidental damages even if he did not know that he wouldn&rsquo;t have to
suffer the view</li>
<li>The gentlemen bent over the dishes set in front of them were blown
onto the cool,</li>
<li>Gregor then turned to look after my parents suffer!</li>
<li>&ldquo;we have to overcome it because of that.</li>
<li>Does not agree to be patient.</li>
<li>&ldquo;leave my home. now!&rdquo;, said mr.</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>Elixir allows to easily build Markov chains and applicate them to real
world processes. In our case we have built the random text generator,
but you can find Markov models useful for another cases. To view entire
application please visit
<a href="https://github.com/ne1ro/elixir-markov-chain">this repository</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Pattern matching in Elixir</title>
      <link>https://neiro.io/blog/2016-05-31-pattern-matching-in-elixir.md/</link>
      <pubDate>Tue, 31 May 2016 10:00:00 +0200</pubDate>
      <guid>https://neiro.io/blog/2016-05-31-pattern-matching-in-elixir.md/</guid>
      <description>&lt;p&gt;Pattern matching is a key feature of functional programming. It allows&#xA;you to check a given sequence of tokens for the presence of the&#xA;constituents of some pattern. Using pattern matching you can easily&#xA;operate with complex data structures in most expressive and eloquent&#xA;way. Elixir provides pattern matching like any other functional&#xA;programming language.&lt;/p&gt;&#xA;&lt;h2 id=&#34;match-operator&#34;&gt;Match operator&lt;/h2&gt;&#xA;&lt;p&gt;Most of programming languages have assign operator: &lt;code&gt;var x = 10&lt;/code&gt; . In&#xA;Elixir equals sign is actually &lt;em&gt;match operator&lt;/em&gt;. Using this operator we&#xA;can assign and match values:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Pattern matching is a key feature of functional programming. It allows
you to check a given sequence of tokens for the presence of the
constituents of some pattern. Using pattern matching you can easily
operate with complex data structures in most expressive and eloquent
way. Elixir provides pattern matching like any other functional
programming language.</p>
<h2 id="match-operator">Match operator</h2>
<p>Most of programming languages have assign operator: <code>var x = 10</code> . In
Elixir equals sign is actually <em>match operator</em>. Using this operator we
can assign and match values:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln">1</span><span class="cl">  x = 1
</span></span><span class="line"><span class="ln">2</span><span class="cl">  1 = x
</span></span><span class="line"><span class="ln">3</span><span class="cl">  x # 1</span></span></code></pre></div><p>But if we will provide invalid pattern?</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln">1</span><span class="cl">  2 = x # ** (MatchError) no match of right hand side value: 1</span></span></code></pre></div><p>As you see, Elixir raises <code>MatchError</code> because left and right sides of
match operator are different - they don&rsquo;t match. You can assign variable
only on the left side of match operator:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln">1</span><span class="cl">  true = undefined # * (CompileError) undefined function undefined/0</span></span></code></pre></div><h2 id="pattern-matching">Pattern matching</h2>
<p>You can use match operator not for assign only - it&rsquo;s useful for
destructuring operations:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln"> 1</span><span class="cl">    # Lists
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    list = [1, 2]
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    [1 | tail] = list
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    tail # [2]
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    [1 | _] = list # [1, 2]
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    [2 | _] = list # ** (MatchError) no match of right hand side value: [1, 2]
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    # Tuples
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    { res, val } = { :ok, 1 } # res =&gt; :ok, val =&gt; 1
</span></span><span class="line"><span class="ln">10</span><span class="cl">    { :ok, val } = { :ok, 1 } # val =&gt; 1
</span></span><span class="line"><span class="ln">11</span><span class="cl">    { :ok, val } = { :fail, 1 } # ** (MatchError) no match of right hand side value: {:fail, 1}
</span></span><span class="line"><span class="ln">12</span><span class="cl">    { :ok, val } = { :fail } # ** (MatchError) no match of right hand side value: {:fail}
</span></span><span class="line"><span class="ln">13</span><span class="cl">
</span></span><span class="line"><span class="ln">14</span><span class="cl">    # Maps
</span></span><span class="line"><span class="ln">15</span><span class="cl">    %{ foo: res } = %{ foo: &#34;bar&#34; } # res =&gt; &#34;foo&#34;
</span></span><span class="line"><span class="ln">16</span><span class="cl">    %{ bar: res } = %{ foo: &#34;bar&#34; } # ** (MatchError) no match of right hand side value: %{foo: &#34;bar&#34;}</span></span></code></pre></div><p>You can also use pattern matching with functions:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln">1</span><span class="cl">  defmodule HelloWorld do
</span></span><span class="line"><span class="ln">2</span><span class="cl">    def hello(:world), do: &#34;Hello, world!&#34;
</span></span><span class="line"><span class="ln">3</span><span class="cl">    def hello(name), do: &#34;Hello, #{ name }!&#34;
</span></span><span class="line"><span class="ln">4</span><span class="cl">    def hello, do: &#34;Hello!&#34;
</span></span><span class="line"><span class="ln">5</span><span class="cl">  end
</span></span><span class="line"><span class="ln">6</span><span class="cl">
</span></span><span class="line"><span class="ln">7</span><span class="cl">  HelloWorld.hello :world # &#34;Hello, world!&#34;
</span></span><span class="line"><span class="ln">8</span><span class="cl">  HelloWorld.hello &#34;Elixir&#34; # &#34;Hello, Elixir!&#34;
</span></span><span class="line"><span class="ln">9</span><span class="cl">  HelloWorld.hello # &#34;Hello!&#34;</span></span></code></pre></div><h2 id="pin-operator">Pin operator</h2>
<p>You can rebound Elixir&rsquo;s variables:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln">1</span><span class="cl">  x = 1
</span></span><span class="line"><span class="ln">2</span><span class="cl">  x = 2
</span></span><span class="line"><span class="ln">3</span><span class="cl">  x # 2</span></span></code></pre></div><p>If you want to provide existing variable&rsquo;s value in pattern matching,
then you should use <em>pin operator</em>:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln">1</span><span class="cl">  x = 1
</span></span><span class="line"><span class="ln">2</span><span class="cl">  ^x = 2 # MatchError because 1 != 2
</span></span><span class="line"><span class="ln">3</span><span class="cl">  [^x, y] = [1, 2] # [1, 2]
</span></span><span class="line"><span class="ln">4</span><span class="cl">  y # 2
</span></span><span class="line"><span class="ln">5</span><span class="cl">  [2, ^y] = [2, 1] # ** (MatchError) no match of right hand side value: [2, 1]
</span></span><span class="line"><span class="ln">6</span><span class="cl">  [_, ^y] = [3, 2] # [3, 2]</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>Elixir comes with match and pin operators that provide support of
pattern matching. It allows you to write simple and elegant code to
operate basic values, complex data structures or even functions.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Pattern matching in Elixir</title>
      <link>https://neiro.io/posts/2016-05-31-pattern-matching-in-elixir.md/</link>
      <pubDate>Tue, 31 May 2016 10:00:00 +0200</pubDate>
      <guid>https://neiro.io/posts/2016-05-31-pattern-matching-in-elixir.md/</guid>
      <description>&lt;p&gt;Pattern matching is a key feature of functional programming. It allows&#xA;you to check a given sequence of tokens for the presence of the&#xA;constituents of some pattern. Using pattern matching you can easily&#xA;operate with complex data structures in most expressive and eloquent&#xA;way. Elixir provides pattern matching like any other functional&#xA;programming language.&lt;/p&gt;&#xA;&lt;h2 id=&#34;match-operator&#34;&gt;Match operator&lt;/h2&gt;&#xA;&lt;p&gt;Most of programming languages have assign operator: &lt;code&gt;var x = 10&lt;/code&gt; . In&#xA;Elixir equals sign is actually &lt;em&gt;match operator&lt;/em&gt;. Using this operator we&#xA;can assign and match values:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Pattern matching is a key feature of functional programming. It allows
you to check a given sequence of tokens for the presence of the
constituents of some pattern. Using pattern matching you can easily
operate with complex data structures in most expressive and eloquent
way. Elixir provides pattern matching like any other functional
programming language.</p>
<h2 id="match-operator">Match operator</h2>
<p>Most of programming languages have assign operator: <code>var x = 10</code> . In
Elixir equals sign is actually <em>match operator</em>. Using this operator we
can assign and match values:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln">1</span><span class="cl">  x = 1
</span></span><span class="line"><span class="ln">2</span><span class="cl">  1 = x
</span></span><span class="line"><span class="ln">3</span><span class="cl">  x # 1</span></span></code></pre></div><p>But if we will provide invalid pattern?</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln">1</span><span class="cl">  2 = x # ** (MatchError) no match of right hand side value: 1</span></span></code></pre></div><p>As you see, Elixir raises <code>MatchError</code> because left and right sides of
match operator are different - they don&rsquo;t match. You can assign variable
only on the left side of match operator:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln">1</span><span class="cl">  true = undefined # * (CompileError) undefined function undefined/0</span></span></code></pre></div><h2 id="pattern-matching">Pattern matching</h2>
<p>You can use match operator not for assign only - it&rsquo;s useful for
destructuring operations:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln"> 1</span><span class="cl">    # Lists
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    list = [1, 2]
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    [1 | tail] = list
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    tail # [2]
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    [1 | _] = list # [1, 2]
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    [2 | _] = list # ** (MatchError) no match of right hand side value: [1, 2]
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    # Tuples
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    { res, val } = { :ok, 1 } # res =&gt; :ok, val =&gt; 1
</span></span><span class="line"><span class="ln">10</span><span class="cl">    { :ok, val } = { :ok, 1 } # val =&gt; 1
</span></span><span class="line"><span class="ln">11</span><span class="cl">    { :ok, val } = { :fail, 1 } # ** (MatchError) no match of right hand side value: {:fail, 1}
</span></span><span class="line"><span class="ln">12</span><span class="cl">    { :ok, val } = { :fail } # ** (MatchError) no match of right hand side value: {:fail}
</span></span><span class="line"><span class="ln">13</span><span class="cl">
</span></span><span class="line"><span class="ln">14</span><span class="cl">    # Maps
</span></span><span class="line"><span class="ln">15</span><span class="cl">    %{ foo: res } = %{ foo: &#34;bar&#34; } # res =&gt; &#34;foo&#34;
</span></span><span class="line"><span class="ln">16</span><span class="cl">    %{ bar: res } = %{ foo: &#34;bar&#34; } # ** (MatchError) no match of right hand side value: %{foo: &#34;bar&#34;}</span></span></code></pre></div><p>You can also use pattern matching with functions:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln">1</span><span class="cl">  defmodule HelloWorld do
</span></span><span class="line"><span class="ln">2</span><span class="cl">    def hello(:world), do: &#34;Hello, world!&#34;
</span></span><span class="line"><span class="ln">3</span><span class="cl">    def hello(name), do: &#34;Hello, #{ name }!&#34;
</span></span><span class="line"><span class="ln">4</span><span class="cl">    def hello, do: &#34;Hello!&#34;
</span></span><span class="line"><span class="ln">5</span><span class="cl">  end
</span></span><span class="line"><span class="ln">6</span><span class="cl">
</span></span><span class="line"><span class="ln">7</span><span class="cl">  HelloWorld.hello :world # &#34;Hello, world!&#34;
</span></span><span class="line"><span class="ln">8</span><span class="cl">  HelloWorld.hello &#34;Elixir&#34; # &#34;Hello, Elixir!&#34;
</span></span><span class="line"><span class="ln">9</span><span class="cl">  HelloWorld.hello # &#34;Hello!&#34;</span></span></code></pre></div><h2 id="pin-operator">Pin operator</h2>
<p>You can rebound Elixir&rsquo;s variables:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln">1</span><span class="cl">  x = 1
</span></span><span class="line"><span class="ln">2</span><span class="cl">  x = 2
</span></span><span class="line"><span class="ln">3</span><span class="cl">  x # 2</span></span></code></pre></div><p>If you want to provide existing variable&rsquo;s value in pattern matching,
then you should use <em>pin operator</em>:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln">1</span><span class="cl">  x = 1
</span></span><span class="line"><span class="ln">2</span><span class="cl">  ^x = 2 # MatchError because 1 != 2
</span></span><span class="line"><span class="ln">3</span><span class="cl">  [^x, y] = [1, 2] # [1, 2]
</span></span><span class="line"><span class="ln">4</span><span class="cl">  y # 2
</span></span><span class="line"><span class="ln">5</span><span class="cl">  [2, ^y] = [2, 1] # ** (MatchError) no match of right hand side value: [2, 1]
</span></span><span class="line"><span class="ln">6</span><span class="cl">  [_, ^y] = [3, 2] # [3, 2]</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>Elixir comes with match and pin operators that provide support of
pattern matching. It allows you to write simple and elegant code to
operate basic values, complex data structures or even functions.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Introduction to Elixir</title>
      <link>https://neiro.io/blog/2016-04-24-introduction-to-elixir.md/</link>
      <pubDate>Sun, 24 Apr 2016 10:00:00 +0200</pubDate>
      <guid>https://neiro.io/blog/2016-04-24-introduction-to-elixir.md/</guid>
      <description>&lt;p&gt;If you want to use all features of functional programming with Ruby-like&#xA;syntax to write modern fast, fault-tolerant applications, you may take a&#xA;look at Elixir programming language.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-elixir&#34;&gt;What is Elixir?&lt;/h2&gt;&#xA;&lt;p&gt;Elixir is dynamic, functional, concurrent, fast programming language&#xA;that runs on top of the same virtual machine as his ancestor - Erlang -&#xA;&lt;em&gt;(BEAM)&lt;/em&gt;. Elixir was created by &lt;em&gt;JosÃ© Valim&lt;/em&gt; and was inspired by Ruby&#xA;syntax, but also was influenced by Clojure.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>If you want to use all features of functional programming with Ruby-like
syntax to write modern fast, fault-tolerant applications, you may take a
look at Elixir programming language.</p>
<h2 id="what-is-elixir">What is Elixir?</h2>
<p>Elixir is dynamic, functional, concurrent, fast programming language
that runs on top of the same virtual machine as his ancestor - Erlang -
<em>(BEAM)</em>. Elixir was created by <em>JosÃ© Valim</em> and was inspired by Ruby
syntax, but also was influenced by Clojure.</p>
<h2 id="key-principles">Key principles</h2>
<p>Elixir platform itself presents you next availabilities:</p>
<ul>
<li>Scalability - Elixir code can runs in thousands and millions
lightweight threads that are isolated, but can exchange information
via messages.</li>
<li>Fault-tolerance - Elixir provides supervisors that can restart parts
of your applications on errors</li>
<li>Functional programming - Elixir code is short, elegant and powerful at
the same time. You can use pattern matching, immutable constructions,
first class functions like in any other functional programming
languages.</li>
<li>Extensibility, DSL - Elixir supports modules, metaprogramming that
lets you easily extend language or another modules.</li>
<li>Erlang compatibility - You can use all of Erlang ecosystem tools and
modules in Elixir.</li>
<li>Tooling - Elixir comes with <em>mix</em> build tool, <em>Hex</em> package manager,
<em>IEx</em> interactive shell, <em>ExUnit</em> testing tool.</li>
</ul>
<h2 id="features">Features</h2>
<ul>
<li>UTF-8 support by default.</li>
<li>Modules and namespaces.</li>
<li>Docstrings documentation support.</li>
<li>Everything is an expression.</li>
<li>Pattern matching.</li>
<li>Immutability.</li>
<li>Compiling to Erlang virtual machine bytecode.</li>
<li>Polymorphism via protocols.</li>
<li>Lazy and async collections with streams.</li>
<li>Recursion, high-order functions without side-effects.</li>
<li>Tail call optimizations.</li>
<li>Metaprogramming, macroses.</li>
<li>Simple and lightweight concurrency using Erlang&rsquo;s mechanisms.</li>
</ul>
<h2 id="code-examples">Code examples</h2>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln"> 1</span><span class="cl">    IO.puts &#34;Hello Elixir!&#34; # Hello Elixir!
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    # Integers
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    255; 0xFF # 255
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    0b0110 # 6
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    # Floats
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    100.0 # 100.0
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    1.0e-10 # 1.0e-10
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl">    # Booleans
</span></span><span class="line"><span class="ln">12</span><span class="cl">    true == false; false
</span></span><span class="line"><span class="ln">13</span><span class="cl">
</span></span><span class="line"><span class="ln">14</span><span class="cl">    # Atoms - string constants whose name is their value
</span></span><span class="line"><span class="ln">15</span><span class="cl">    :foo == :bar # false
</span></span><span class="line"><span class="ln">16</span><span class="cl">
</span></span><span class="line"><span class="ln">17</span><span class="cl">    # Strings are binaries in Elixir and Erlang:
</span></span><span class="line"><span class="ln">18</span><span class="cl">    &#34;Hello&#34; # Hello
</span></span><span class="line"><span class="ln">19</span><span class="cl">
</span></span><span class="line"><span class="ln">20</span><span class="cl">    # Lists
</span></span><span class="line"><span class="ln">21</span><span class="cl">    [3.14, :pie, &#34;Apple&#34;]
</span></span><span class="line"><span class="ln">22</span><span class="cl">    [1] ++ [2] # [1, 2]
</span></span><span class="line"><span class="ln">23</span><span class="cl">    [1, 2] -- [1] # [2]
</span></span><span class="line"><span class="ln">24</span><span class="cl">    [head | tail] = [1, 2] # head: 1, tail: [2]
</span></span><span class="line"><span class="ln">25</span><span class="cl">
</span></span><span class="line"><span class="ln">26</span><span class="cl">    # Tuples
</span></span><span class="line"><span class="ln">27</span><span class="cl">    { 3.14, :pie, &#34;Apple&#34; }
</span></span><span class="line"><span class="ln">28</span><span class="cl">
</span></span><span class="line"><span class="ln">29</span><span class="cl">    # Keywords lists
</span></span><span class="line"><span class="ln">30</span><span class="cl">    [foo: &#34;bar&#34;] # foo: &#34;bar&#34;
</span></span><span class="line"><span class="ln">31</span><span class="cl">
</span></span><span class="line"><span class="ln">32</span><span class="cl">    # Maps
</span></span><span class="line"><span class="ln">33</span><span class="cl">    map = %{:foo =&gt; &#34;bar&#34;}
</span></span><span class="line"><span class="ln">34</span><span class="cl">    map[:foo] # &#34;bar&#34;
</span></span><span class="line"><span class="ln">35</span><span class="cl">
</span></span><span class="line"><span class="ln">36</span><span class="cl">    # Comprehensions
</span></span><span class="line"><span class="ln">37</span><span class="cl">    for x &lt;- [1,2,3], do: x * 2 # [2, 4, 6]
</span></span><span class="line"><span class="ln">38</span><span class="cl">
</span></span><span class="line"><span class="ln">39</span><span class="cl">    # Pattern matching
</span></span><span class="line"><span class="ln">40</span><span class="cl">    [1, a] = [1, 2]
</span></span><span class="line"><span class="ln">41</span><span class="cl">    a # 2
</span></span><span class="line"><span class="ln">42</span><span class="cl">
</span></span><span class="line"><span class="ln">43</span><span class="cl">    # Modules
</span></span><span class="line"><span class="ln">44</span><span class="cl">    defmodule Foo do
</span></span><span class="line"><span class="ln">45</span><span class="cl">      def bar, do: &#34;bar&#34;
</span></span><span class="line"><span class="ln">46</span><span class="cl">    end
</span></span><span class="line"><span class="ln">47</span><span class="cl">    Foo.bar # &#34;bar&#34;
</span></span><span class="line"><span class="ln">48</span><span class="cl">
</span></span><span class="line"><span class="ln">49</span><span class="cl">    # Pipe operator
</span></span><span class="line"><span class="ln">50</span><span class="cl">    &#34;Hello world&#34; |&gt; String.split |&gt; Enum.map(&amp;String.first/1) |&gt; Enum.join # Hw
</span></span><span class="line"><span class="ln">51</span><span class="cl">
</span></span><span class="line"><span class="ln">52</span><span class="cl">    # Sigils
</span></span><span class="line"><span class="ln">53</span><span class="cl">    ~r/abcd/ # Regexp
</span></span><span class="line"><span class="ln">54</span><span class="cl">    ~s/hello world/ # String
</span></span><span class="line"><span class="ln">55</span><span class="cl">    ~w/hello world/ # List of words: [&#34;hello&#34;, &#34;world&#34;]</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>If you want to use functional programming language for web-development,
fault-tolerant , distributed applications, that you may like an Elixir.
It comes with familiar Ruby syntax, but with all of power and eloquence
of functional programming languages. Elixir built on top of Erlang
platform and you can easily use all of Erlang ecosystem tools and
modules in your projects with modern syntax.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Introduction to Elixir</title>
      <link>https://neiro.io/posts/2016-04-24-introduction-to-elixir.md/</link>
      <pubDate>Sun, 24 Apr 2016 10:00:00 +0200</pubDate>
      <guid>https://neiro.io/posts/2016-04-24-introduction-to-elixir.md/</guid>
      <description>&lt;p&gt;If you want to use all features of functional programming with Ruby-like&#xA;syntax to write modern fast, fault-tolerant applications, you may take a&#xA;look at Elixir programming language.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-elixir&#34;&gt;What is Elixir?&lt;/h2&gt;&#xA;&lt;p&gt;Elixir is dynamic, functional, concurrent, fast programming language&#xA;that runs on top of the same virtual machine as his ancestor - Erlang -&#xA;&lt;em&gt;(BEAM)&lt;/em&gt;. Elixir was created by &lt;em&gt;JosÃ© Valim&lt;/em&gt; and was inspired by Ruby&#xA;syntax, but also was influenced by Clojure.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>If you want to use all features of functional programming with Ruby-like
syntax to write modern fast, fault-tolerant applications, you may take a
look at Elixir programming language.</p>
<h2 id="what-is-elixir">What is Elixir?</h2>
<p>Elixir is dynamic, functional, concurrent, fast programming language
that runs on top of the same virtual machine as his ancestor - Erlang -
<em>(BEAM)</em>. Elixir was created by <em>JosÃ© Valim</em> and was inspired by Ruby
syntax, but also was influenced by Clojure.</p>
<h2 id="key-principles">Key principles</h2>
<p>Elixir platform itself presents you next availabilities:</p>
<ul>
<li>Scalability - Elixir code can runs in thousands and millions
lightweight threads that are isolated, but can exchange information
via messages.</li>
<li>Fault-tolerance - Elixir provides supervisors that can restart parts
of your applications on errors</li>
<li>Functional programming - Elixir code is short, elegant and powerful at
the same time. You can use pattern matching, immutable constructions,
first class functions like in any other functional programming
languages.</li>
<li>Extensibility, DSL - Elixir supports modules, metaprogramming that
lets you easily extend language or another modules.</li>
<li>Erlang compatibility - You can use all of Erlang ecosystem tools and
modules in Elixir.</li>
<li>Tooling - Elixir comes with <em>mix</em> build tool, <em>Hex</em> package manager,
<em>IEx</em> interactive shell, <em>ExUnit</em> testing tool.</li>
</ul>
<h2 id="features">Features</h2>
<ul>
<li>UTF-8 support by default.</li>
<li>Modules and namespaces.</li>
<li>Docstrings documentation support.</li>
<li>Everything is an expression.</li>
<li>Pattern matching.</li>
<li>Immutability.</li>
<li>Compiling to Erlang virtual machine bytecode.</li>
<li>Polymorphism via protocols.</li>
<li>Lazy and async collections with streams.</li>
<li>Recursion, high-order functions without side-effects.</li>
<li>Tail call optimizations.</li>
<li>Metaprogramming, macroses.</li>
<li>Simple and lightweight concurrency using Erlang&rsquo;s mechanisms.</li>
</ul>
<h2 id="code-examples">Code examples</h2>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln"> 1</span><span class="cl">    IO.puts &#34;Hello Elixir!&#34; # Hello Elixir!
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    # Integers
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    255; 0xFF # 255
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    0b0110 # 6
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    # Floats
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    100.0 # 100.0
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    1.0e-10 # 1.0e-10
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl">    # Booleans
</span></span><span class="line"><span class="ln">12</span><span class="cl">    true == false; false
</span></span><span class="line"><span class="ln">13</span><span class="cl">
</span></span><span class="line"><span class="ln">14</span><span class="cl">    # Atoms - string constants whose name is their value
</span></span><span class="line"><span class="ln">15</span><span class="cl">    :foo == :bar # false
</span></span><span class="line"><span class="ln">16</span><span class="cl">
</span></span><span class="line"><span class="ln">17</span><span class="cl">    # Strings are binaries in Elixir and Erlang:
</span></span><span class="line"><span class="ln">18</span><span class="cl">    &#34;Hello&#34; # Hello
</span></span><span class="line"><span class="ln">19</span><span class="cl">
</span></span><span class="line"><span class="ln">20</span><span class="cl">    # Lists
</span></span><span class="line"><span class="ln">21</span><span class="cl">    [3.14, :pie, &#34;Apple&#34;]
</span></span><span class="line"><span class="ln">22</span><span class="cl">    [1] ++ [2] # [1, 2]
</span></span><span class="line"><span class="ln">23</span><span class="cl">    [1, 2] -- [1] # [2]
</span></span><span class="line"><span class="ln">24</span><span class="cl">    [head | tail] = [1, 2] # head: 1, tail: [2]
</span></span><span class="line"><span class="ln">25</span><span class="cl">
</span></span><span class="line"><span class="ln">26</span><span class="cl">    # Tuples
</span></span><span class="line"><span class="ln">27</span><span class="cl">    { 3.14, :pie, &#34;Apple&#34; }
</span></span><span class="line"><span class="ln">28</span><span class="cl">
</span></span><span class="line"><span class="ln">29</span><span class="cl">    # Keywords lists
</span></span><span class="line"><span class="ln">30</span><span class="cl">    [foo: &#34;bar&#34;] # foo: &#34;bar&#34;
</span></span><span class="line"><span class="ln">31</span><span class="cl">
</span></span><span class="line"><span class="ln">32</span><span class="cl">    # Maps
</span></span><span class="line"><span class="ln">33</span><span class="cl">    map = %{:foo =&gt; &#34;bar&#34;}
</span></span><span class="line"><span class="ln">34</span><span class="cl">    map[:foo] # &#34;bar&#34;
</span></span><span class="line"><span class="ln">35</span><span class="cl">
</span></span><span class="line"><span class="ln">36</span><span class="cl">    # Comprehensions
</span></span><span class="line"><span class="ln">37</span><span class="cl">    for x &lt;- [1,2,3], do: x * 2 # [2, 4, 6]
</span></span><span class="line"><span class="ln">38</span><span class="cl">
</span></span><span class="line"><span class="ln">39</span><span class="cl">    # Pattern matching
</span></span><span class="line"><span class="ln">40</span><span class="cl">    [1, a] = [1, 2]
</span></span><span class="line"><span class="ln">41</span><span class="cl">    a # 2
</span></span><span class="line"><span class="ln">42</span><span class="cl">
</span></span><span class="line"><span class="ln">43</span><span class="cl">    # Modules
</span></span><span class="line"><span class="ln">44</span><span class="cl">    defmodule Foo do
</span></span><span class="line"><span class="ln">45</span><span class="cl">      def bar, do: &#34;bar&#34;
</span></span><span class="line"><span class="ln">46</span><span class="cl">    end
</span></span><span class="line"><span class="ln">47</span><span class="cl">    Foo.bar # &#34;bar&#34;
</span></span><span class="line"><span class="ln">48</span><span class="cl">
</span></span><span class="line"><span class="ln">49</span><span class="cl">    # Pipe operator
</span></span><span class="line"><span class="ln">50</span><span class="cl">    &#34;Hello world&#34; |&gt; String.split |&gt; Enum.map(&amp;String.first/1) |&gt; Enum.join # Hw
</span></span><span class="line"><span class="ln">51</span><span class="cl">
</span></span><span class="line"><span class="ln">52</span><span class="cl">    # Sigils
</span></span><span class="line"><span class="ln">53</span><span class="cl">    ~r/abcd/ # Regexp
</span></span><span class="line"><span class="ln">54</span><span class="cl">    ~s/hello world/ # String
</span></span><span class="line"><span class="ln">55</span><span class="cl">    ~w/hello world/ # List of words: [&#34;hello&#34;, &#34;world&#34;]</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>If you want to use functional programming language for web-development,
fault-tolerant , distributed applications, that you may like an Elixir.
It comes with familiar Ruby syntax, but with all of power and eloquence
of functional programming languages. Elixir built on top of Erlang
platform and you can easily use all of Erlang ecosystem tools and
modules in your projects with modern syntax.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Partial function application and currying in Ruby</title>
      <link>https://neiro.io/blog/2016-03-08-partial-function-application-and-currying-in-ruby.md/</link>
      <pubDate>Tue, 08 Mar 2016 10:00:00 +0100</pubDate>
      <guid>https://neiro.io/blog/2016-03-08-partial-function-application-and-currying-in-ruby.md/</guid>
      <description>&lt;p&gt;Currying and partial function application are common concepts of the&#xA;functional programming. They look similar, but have differences in&#xA;realization and using. Ruby allows you to easily operate with both of&#xA;them.&lt;/p&gt;&#xA;&lt;h2 id=&#34;partial-function-application&#34;&gt;Partial function application&lt;/h2&gt;&#xA;&lt;p&gt;First we need to know what is really &lt;em&gt;application&lt;/em&gt; is: it&amp;rsquo;s the process&#xA;of applying function to &lt;strong&gt;all of it&amp;rsquo;s arguments&lt;/strong&gt; to return value.&lt;br /&gt;&#xA;&lt;em&gt;Partial function application&lt;/em&gt; is the process of applying function to&#xA;&lt;strong&gt;some of it&amp;rsquo;s arguments&lt;/strong&gt;. This process creates a new function, based on&#xA;the parent function, but with lower arity (&lt;em&gt;with fewer arguments&lt;/em&gt;). So,&#xA;if we have an abstract function&#xA;&lt;img src=&#34;https://upload.wikimedia.org/math/4/3/a/43a45f58c8f35707c396444463e2ef24.png&#34; alt=&#34;&#34;&gt;&#xA;with three arguments, then we can create a partial function&#xA;&lt;img src=&#34;https://upload.wikimedia.org/math/1/d/5/1d54867424707e76c6f46bf426fc193e.png&#34; alt=&#34;&#34;&gt;&#xA;with two arguments that both of this functions return the same result.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Currying and partial function application are common concepts of the
functional programming. They look similar, but have differences in
realization and using. Ruby allows you to easily operate with both of
them.</p>
<h2 id="partial-function-application">Partial function application</h2>
<p>First we need to know what is really <em>application</em> is: it&rsquo;s the process
of applying function to <strong>all of it&rsquo;s arguments</strong> to return value.<br />
<em>Partial function application</em> is the process of applying function to
<strong>some of it&rsquo;s arguments</strong>. This process creates a new function, based on
the parent function, but with lower arity (<em>with fewer arguments</em>). So,
if we have an abstract function
<img src="https://upload.wikimedia.org/math/4/3/a/43a45f58c8f35707c396444463e2ef24.png" alt="">
with three arguments, then we can create a partial function
<img src="https://upload.wikimedia.org/math/1/d/5/1d54867424707e76c6f46bf426fc193e.png" alt="">
with two arguments that both of this functions return the same result.</p>
<p>For example, we have a simple multiply function that multiplies two
arguments:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"> <span class="n">multiply</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span> <span class="p">}</span> <span class="n">multiply</span><span class="o">.</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c1"># 4</span></span></span></code></pre></div><p>But what if we want just double numbers ? Should we pass the <em>2</em>
argument each time? Not really. We can use partial function application
to create a new <em>double</em> function that takes just one argument:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">double</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">{</span> <span class="n">multiply</span><span class="o">.</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span> <span class="p">}</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">double</span><span class="o">.</span><span class="n">arity</span> <span class="c1"># 1</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="n">double</span><span class="o">.</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1"># 4</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="n">double</span><span class="o">.</span><span class="p">(</span><span class="mi">1984</span><span class="p">)</span> <span class="c1"># 3968</span></span></span></code></pre></div><p>Ruby has <em>Proc#curry</em> method that allows you to use partial function
application even more simpler:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">double</span> <span class="o">=</span> <span class="n">multiply</span><span class="o">.</span><span class="n">curry</span><span class="o">.</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="n">double</span><span class="o">.</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1"># 4</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">double</span><span class="o">.</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span> <span class="c1"># 600</span></span></span></code></pre></div><h2 id="currying">Currying</h2>
<p>Currying is similar to partial function application concept.</p>
<p><strong>Currying</strong> is the process of translating the evaluating of <em>function
with many arguments</em> into evaluating a sequence of functions, each with
<em>exactly one parameter</em>. So, if we have a function with two arguments:
<img src="https://upload.wikimedia.org/math/4/3/b/43ba302d099d623ae50cce466eb1f34d.png" alt="">
then we can translate it with
<img src="https://upload.wikimedia.org/math/0/1/3/0138ee5c8706ca68729e27f0e01e56ee.png" alt="">
transformation to return a new function with one parameter:
<img src="https://upload.wikimedia.org/math/7/b/5/7b547dc91687bfb09ee27d4c22f815eb.png" alt="">.</p>
<p>For example, look back at previous <em>multiply</em> function. What if we want
to multiply more than two arguments?</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">multiply</span><span class="o">.</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c1"># ArgumentError: wrong number of arguments (given 3, expected 2)</span></span></span></code></pre></div><p>To prevent this, we can change multiply function and use <em>Proc#curry</em>
method:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">multiply</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="sr">/tail) { head /</span> <span class="n">tail</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="ss">:*</span><span class="p">)</span> <span class="p">}</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">multiply</span><span class="o">.</span><span class="n">curry</span><span class="o">.</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c1"># 8</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="n">multiply</span><span class="o">.</span><span class="n">curry</span><span class="o">.</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span> <span class="c1"># 42</span></span></span></code></pre></div><p>If we want to restrict arguments count, we can use <em>arity</em> optional
argument in <em>Proc#curry</em> function:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">multiply</span><span class="o">.</span><span class="n">curry</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">2</span><span class="o">][</span><span class="mi">3</span><span class="o">]</span> <span class="c1"># 6</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">multiply</span><span class="o">.</span><span class="n">curry</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">2</span><span class="o">][</span><span class="mi">3</span><span class="o">][</span><span class="mi">4</span><span class="o">]</span> <span class="c1"># 0 because of the last argument is nil</span></span></span></code></pre></div><p>You can also use <em>curry</em> method on plain methods, not only procs with
Ruby 2.2:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="k">def</span> <span class="nf">sum</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">  <span class="n">args</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="n">plus_two</span> <span class="o">=</span> <span class="nb">method</span><span class="p">(</span><span class="ss">:sum</span><span class="p">)</span><span class="o">.</span><span class="n">curry</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="n">plus_two</span><span class="o">.</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="c1"># 5</span></span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>Partial function application and currying are both great features of
functional programming that allows you to write clean, simple and
flexible functions based on anothers. You can use Ruby&rsquo;s <em>#curry</em> method
with procs or methods to write eloquent and powerful code.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Partial function application and currying in Ruby</title>
      <link>https://neiro.io/posts/2016-03-08-partial-function-application-and-currying-in-ruby.md/</link>
      <pubDate>Tue, 08 Mar 2016 10:00:00 +0100</pubDate>
      <guid>https://neiro.io/posts/2016-03-08-partial-function-application-and-currying-in-ruby.md/</guid>
      <description>&lt;p&gt;Currying and partial function application are common concepts of the&#xA;functional programming. They look similar, but have differences in&#xA;realization and using. Ruby allows you to easily operate with both of&#xA;them.&lt;/p&gt;&#xA;&lt;h2 id=&#34;partial-function-application&#34;&gt;Partial function application&lt;/h2&gt;&#xA;&lt;p&gt;First we need to know what is really &lt;em&gt;application&lt;/em&gt; is: it&amp;rsquo;s the process&#xA;of applying function to &lt;strong&gt;all of it&amp;rsquo;s arguments&lt;/strong&gt; to return value.&lt;br /&gt;&#xA;&lt;em&gt;Partial function application&lt;/em&gt; is the process of applying function to&#xA;&lt;strong&gt;some of it&amp;rsquo;s arguments&lt;/strong&gt;. This process creates a new function, based on&#xA;the parent function, but with lower arity (&lt;em&gt;with fewer arguments&lt;/em&gt;). So,&#xA;if we have an abstract function&#xA;&lt;img src=&#34;https://upload.wikimedia.org/math/4/3/a/43a45f58c8f35707c396444463e2ef24.png&#34; alt=&#34;&#34;&gt;&#xA;with three arguments, then we can create a partial function&#xA;&lt;img src=&#34;https://upload.wikimedia.org/math/1/d/5/1d54867424707e76c6f46bf426fc193e.png&#34; alt=&#34;&#34;&gt;&#xA;with two arguments that both of this functions return the same result.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Currying and partial function application are common concepts of the
functional programming. They look similar, but have differences in
realization and using. Ruby allows you to easily operate with both of
them.</p>
<h2 id="partial-function-application">Partial function application</h2>
<p>First we need to know what is really <em>application</em> is: it&rsquo;s the process
of applying function to <strong>all of it&rsquo;s arguments</strong> to return value.<br />
<em>Partial function application</em> is the process of applying function to
<strong>some of it&rsquo;s arguments</strong>. This process creates a new function, based on
the parent function, but with lower arity (<em>with fewer arguments</em>). So,
if we have an abstract function
<img src="https://upload.wikimedia.org/math/4/3/a/43a45f58c8f35707c396444463e2ef24.png" alt="">
with three arguments, then we can create a partial function
<img src="https://upload.wikimedia.org/math/1/d/5/1d54867424707e76c6f46bf426fc193e.png" alt="">
with two arguments that both of this functions return the same result.</p>
<p>For example, we have a simple multiply function that multiplies two
arguments:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"> <span class="n">multiply</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span> <span class="p">}</span> <span class="n">multiply</span><span class="o">.</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c1"># 4</span></span></span></code></pre></div><p>But what if we want just double numbers ? Should we pass the <em>2</em>
argument each time? Not really. We can use partial function application
to create a new <em>double</em> function that takes just one argument:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">double</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">{</span> <span class="n">multiply</span><span class="o">.</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span> <span class="p">}</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">double</span><span class="o">.</span><span class="n">arity</span> <span class="c1"># 1</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="n">double</span><span class="o">.</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1"># 4</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="n">double</span><span class="o">.</span><span class="p">(</span><span class="mi">1984</span><span class="p">)</span> <span class="c1"># 3968</span></span></span></code></pre></div><p>Ruby has <em>Proc#curry</em> method that allows you to use partial function
application even more simpler:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">double</span> <span class="o">=</span> <span class="n">multiply</span><span class="o">.</span><span class="n">curry</span><span class="o">.</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="n">double</span><span class="o">.</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1"># 4</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">double</span><span class="o">.</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span> <span class="c1"># 600</span></span></span></code></pre></div><h2 id="currying">Currying</h2>
<p>Currying is similar to partial function application concept.</p>
<p><strong>Currying</strong> is the process of translating the evaluating of <em>function
with many arguments</em> into evaluating a sequence of functions, each with
<em>exactly one parameter</em>. So, if we have a function with two arguments:
<img src="https://upload.wikimedia.org/math/4/3/b/43ba302d099d623ae50cce466eb1f34d.png" alt="">
then we can translate it with
<img src="https://upload.wikimedia.org/math/0/1/3/0138ee5c8706ca68729e27f0e01e56ee.png" alt="">
transformation to return a new function with one parameter:
<img src="https://upload.wikimedia.org/math/7/b/5/7b547dc91687bfb09ee27d4c22f815eb.png" alt="">.</p>
<p>For example, look back at previous <em>multiply</em> function. What if we want
to multiply more than two arguments?</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">multiply</span><span class="o">.</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c1"># ArgumentError: wrong number of arguments (given 3, expected 2)</span></span></span></code></pre></div><p>To prevent this, we can change multiply function and use <em>Proc#curry</em>
method:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">multiply</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="sr">/tail) { head /</span> <span class="n">tail</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="ss">:*</span><span class="p">)</span> <span class="p">}</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">multiply</span><span class="o">.</span><span class="n">curry</span><span class="o">.</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c1"># 8</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="n">multiply</span><span class="o">.</span><span class="n">curry</span><span class="o">.</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span> <span class="c1"># 42</span></span></span></code></pre></div><p>If we want to restrict arguments count, we can use <em>arity</em> optional
argument in <em>Proc#curry</em> function:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">multiply</span><span class="o">.</span><span class="n">curry</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">2</span><span class="o">][</span><span class="mi">3</span><span class="o">]</span> <span class="c1"># 6</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">multiply</span><span class="o">.</span><span class="n">curry</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">2</span><span class="o">][</span><span class="mi">3</span><span class="o">][</span><span class="mi">4</span><span class="o">]</span> <span class="c1"># 0 because of the last argument is nil</span></span></span></code></pre></div><p>You can also use <em>curry</em> method on plain methods, not only procs with
Ruby 2.2:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="k">def</span> <span class="nf">sum</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">  <span class="n">args</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="n">plus_two</span> <span class="o">=</span> <span class="nb">method</span><span class="p">(</span><span class="ss">:sum</span><span class="p">)</span><span class="o">.</span><span class="n">curry</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="n">plus_two</span><span class="o">.</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="c1"># 5</span></span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>Partial function application and currying are both great features of
functional programming that allows you to write clean, simple and
flexible functions based on anothers. You can use Ruby&rsquo;s <em>#curry</em> method
with procs or methods to write eloquent and powerful code.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Immutable collections in Ruby with Hamster</title>
      <link>https://neiro.io/blog/2016-02-14-immutable-collections-in-ruby-with-hamster/</link>
      <pubDate>Sun, 14 Feb 2016 10:00:00 +0100</pubDate>
      <guid>https://neiro.io/blog/2016-02-14-immutable-collections-in-ruby-with-hamster/</guid>
      <description>&lt;p&gt;Ruby has much in common with functional programming languages. For&#xA;example, Ruby supports high-order functions, lambdas, currying and&#xA;recursion, but not the immutability - Ruby&amp;rsquo;s types and data structures&#xA;are mutable and can be changed at any time.&lt;/p&gt;&#xA;&lt;p&gt;Why immutability is important? The&amp;rsquo;re many arguments for that:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;reliability&lt;/li&gt;&#xA;&lt;li&gt;thread-safety&lt;/li&gt;&#xA;&lt;li&gt;simpler debugging&lt;/li&gt;&#xA;&lt;li&gt;purity - immutable data allows you to write side-effects free code&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;If you want to make Ruby hash immutable, you can use freeze it:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Ruby has much in common with functional programming languages. For
example, Ruby supports high-order functions, lambdas, currying and
recursion, but not the immutability - Ruby&rsquo;s types and data structures
are mutable and can be changed at any time.</p>
<p>Why immutability is important? The&rsquo;re many arguments for that:</p>
<ul>
<li>reliability</li>
<li>thread-safety</li>
<li>simpler debugging</li>
<li>purity - immutable data allows you to write side-effects free code</li>
</ul>
<p>If you want to make Ruby hash immutable, you can use freeze it:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">immutable</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">foo</span><span class="p">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">}</span> <span class="n">immutable</span><span class="o">.</span><span class="n">freeze</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="n">immutable</span><span class="o">[</span><span class="ss">:foo</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;tball&#39;</span><span class="c1"># RuntimeError: can&#39;t modify frozen Hash</span></span></span></code></pre></div><p>But if you want to use already immutable collections, sets and other
data structures, you can try
<a href="https://github.com/hamstergem/hamster">Hamster</a> library.</p>
<h2 id="hamster">Hamster</h2>
<p>Hamster provides efficient, immutable and thread-safe collection classes
for Ruby, such as <em>Hash</em>, <em>Vector</em>, <em>Set</em>, <em>SortedSet</em> and <em>List</em>.
Hamster collections offers Ruby`s <em>Hash</em>, <em>Array</em>, <em>Enumberable</em>
compatibility where it possible. You can require all of Hamster
collection classes:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">gem</span> <span class="n">i</span> <span class="n">hamster</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nb">require</span> <span class="s1">&#39;hamster&#39;</span></span></span></code></pre></div><p>or only certain types:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">require</span> <span class="s1">&#39;hamster/hash&#39;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nb">require</span> <span class="s1">&#39;hamster/vector&#39;</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="nb">require</span> <span class="s1">&#39;hamster/set&#39;</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="nb">require</span> <span class="s1">&#39;hamster/sorted_set&#39;</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="nb">require</span> <span class="s1">&#39;hamster/list&#39;</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="nb">require</span> <span class="s1">&#39;hamster/deque&#39;</span></span></span></code></pre></div><h2 id="hash">Hash</h2>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1"># Create new Hamster Hash</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="n">parrot</span> <span class="o">=</span> <span class="no">Hamster</span><span class="o">::</span><span class="no">Hash</span><span class="o">[</span><span class="ss">type</span><span class="p">:</span> <span class="s1">&#39;bird&#39;</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s1">&#39;parrot&#39;</span><span class="p">,</span> <span class="ss">color</span><span class="p">:</span> <span class="s1">&#39;yellow&#39;</span><span class="o">]</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="n">parrot</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="ss">:color</span><span class="p">)</span> <span class="c1"># yellow</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="n">parrot</span><span class="o">[</span><span class="ss">:type</span><span class="o">]</span> <span class="c1"># bird</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="c1"># You can not change hash because of immutability</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="n">parrot</span><span class="o">[</span><span class="ss">:subclass</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;budgie&#39;</span> <span class="c1"># NoMethodError: undefined method `[]=&#39;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="c1"># But you can create a new</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="n">budgie</span> <span class="o">=</span> <span class="n">parrot</span><span class="o">.</span><span class="n">put</span> <span class="ss">:subclass</span><span class="p">,</span> <span class="s1">&#39;budgie&#39;</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="n">budgie</span> <span class="o">==</span> <span class="n">parrot</span> <span class="c1"># false</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="n">budgie</span><span class="o">[</span><span class="ss">:subclass</span><span class="o">]</span> <span class="c1"># budgie</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="n">parrot</span><span class="o">[</span><span class="ss">:subclass</span><span class="o">]</span> <span class="c1"># nil</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">
</span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="n">budgie</span><span class="o">.</span><span class="n">to_hash</span><span class="o">.</span><span class="n">class</span> <span class="c1"># Plain Ruby Hash</span></span></span></code></pre></div><h2 id="list">List</h2>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">list</span> <span class="o">=</span> <span class="no">Hamster</span><span class="o">::</span><span class="no">List</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span> <span class="n">list</span><span class="o">.</span><span class="n">tail</span> <span class="c1"># Hamster::List[1, 2]</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">list</span><span class="o">.</span><span class="n">head</span> <span class="c1"># 0</span></span></span></code></pre></div><h2 id="set">Set</h2>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1"># Hamster&#39;s set is an unordered collection with no duplicates</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="n">colors</span> <span class="o">=</span> <span class="no">Hamster</span><span class="o">::</span><span class="no">Set</span><span class="o">[</span><span class="ss">:green</span><span class="p">,</span> <span class="ss">:white</span><span class="o">]</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="n">colors</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="ss">:green</span><span class="p">)</span> <span class="c1"># true</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="n">palette</span> <span class="o">=</span> <span class="n">colors</span><span class="o">.</span><span class="n">add</span> <span class="ss">:yellow</span> <span class="c1"># Hamster::Set[:green, :yellow, :white]</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="n">colors</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="ss">:yellow</span><span class="p">)</span> <span class="c1"># false palette.superset?(colors) # true</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="n">palette</span><span class="o">.</span><span class="n">intersection</span><span class="p">(</span><span class="n">colors</span><span class="p">)</span> <span class="c1"># Hamster::Set[:green, :white]</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="n">palette</span><span class="o">.</span><span class="n">difference</span><span class="p">(</span><span class="n">colors</span><span class="p">)</span><span class="o">.</span><span class="n">first</span> <span class="c1"># :yellow</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="n">palette</span><span class="o">.</span><span class="n">to_a</span> <span class="c1"># Plain Ruby array: [:green, :white, :yellow]</span></span></span></code></pre></div><h2 id="vector">Vector</h2>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln"> 1</span><span class="cl"> <span class="c1"># Vector is an integer-indexed immutable array</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="n">vector</span> <span class="o">=</span> <span class="no">Hamster</span><span class="o">::</span><span class="no">Vector</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="n">vector</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="c1"># 2</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="n">vector</span><span class="o">[-</span><span class="mi">1</span><span class="o">]</span> <span class="c1"># 2</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="n">vector</span><span class="o">[-</span><span class="mi">4</span><span class="o">]</span> <span class="c1"># nil</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="n">vector</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="o">]</span> <span class="c1"># Hamster::Vector[1, 2]</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="n">vector</span><span class="o">[</span><span class="mi">0</span><span class="o">..</span><span class="mi">2</span><span class="o">]</span> <span class="c1"># Hamster::Vector[0, 1, 2]</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="n">binary_vector</span> <span class="o">=</span> <span class="n">vector</span><span class="o">.</span><span class="n">delete_at</span> <span class="mi">0</span> <span class="c1"># Hamster::Vector[1, 2]</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="n">vector</span><span class="o">.</span><span class="n">size</span> <span class="c1"># 3</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="n">binary_vector</span><span class="o">.</span><span class="n">size</span> <span class="c1"># 2</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="n">vector</span> <span class="o">==</span> <span class="n">binary_vector</span> <span class="c1"># false</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="p">(</span><span class="n">binary_vector</span> <span class="o">+</span> <span class="n">vector</span><span class="p">)</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">uniq</span> <span class="c1"># Hamster::Vector[0, 1, 2]</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="p">(</span><span class="n">binary_vector</span> <span class="o">+</span> <span class="n">vector</span><span class="p">)</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">uniq</span> <span class="o">==</span> <span class="n">vector</span> <span class="c1"># true</span></span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>If you want to use immutable data structures in Ruby to write more
reliable, efficient and at the same time thread-safe code, you can take
a look at Hamster. You can find more in Hamster&rsquo;s
<a href="http://www.rubydoc.info/github/hamstergem/hamster/master">API
documentation</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Immutable collections in Ruby with Hamster</title>
      <link>https://neiro.io/posts/2016-02-14-immutable-collections-in-ruby-with-hamster/</link>
      <pubDate>Sun, 14 Feb 2016 10:00:00 +0100</pubDate>
      <guid>https://neiro.io/posts/2016-02-14-immutable-collections-in-ruby-with-hamster/</guid>
      <description>&lt;p&gt;Ruby has much in common with functional programming languages. For&#xA;example, Ruby supports high-order functions, lambdas, currying and&#xA;recursion, but not the immutability - Ruby&amp;rsquo;s types and data structures&#xA;are mutable and can be changed at any time.&lt;/p&gt;&#xA;&lt;p&gt;Why immutability is important? The&amp;rsquo;re many arguments for that:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;reliability&lt;/li&gt;&#xA;&lt;li&gt;thread-safety&lt;/li&gt;&#xA;&lt;li&gt;simpler debugging&lt;/li&gt;&#xA;&lt;li&gt;purity - immutable data allows you to write side-effects free code&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;If you want to make Ruby hash immutable, you can use freeze it:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Ruby has much in common with functional programming languages. For
example, Ruby supports high-order functions, lambdas, currying and
recursion, but not the immutability - Ruby&rsquo;s types and data structures
are mutable and can be changed at any time.</p>
<p>Why immutability is important? The&rsquo;re many arguments for that:</p>
<ul>
<li>reliability</li>
<li>thread-safety</li>
<li>simpler debugging</li>
<li>purity - immutable data allows you to write side-effects free code</li>
</ul>
<p>If you want to make Ruby hash immutable, you can use freeze it:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">immutable</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">foo</span><span class="p">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">}</span> <span class="n">immutable</span><span class="o">.</span><span class="n">freeze</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="n">immutable</span><span class="o">[</span><span class="ss">:foo</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;tball&#39;</span><span class="c1"># RuntimeError: can&#39;t modify frozen Hash</span></span></span></code></pre></div><p>But if you want to use already immutable collections, sets and other
data structures, you can try
<a href="https://github.com/hamstergem/hamster">Hamster</a> library.</p>
<h2 id="hamster">Hamster</h2>
<p>Hamster provides efficient, immutable and thread-safe collection classes
for Ruby, such as <em>Hash</em>, <em>Vector</em>, <em>Set</em>, <em>SortedSet</em> and <em>List</em>.
Hamster collections offers Ruby`s <em>Hash</em>, <em>Array</em>, <em>Enumberable</em>
compatibility where it possible. You can require all of Hamster
collection classes:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">gem</span> <span class="n">i</span> <span class="n">hamster</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nb">require</span> <span class="s1">&#39;hamster&#39;</span></span></span></code></pre></div><p>or only certain types:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">require</span> <span class="s1">&#39;hamster/hash&#39;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nb">require</span> <span class="s1">&#39;hamster/vector&#39;</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="nb">require</span> <span class="s1">&#39;hamster/set&#39;</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="nb">require</span> <span class="s1">&#39;hamster/sorted_set&#39;</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="nb">require</span> <span class="s1">&#39;hamster/list&#39;</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="nb">require</span> <span class="s1">&#39;hamster/deque&#39;</span></span></span></code></pre></div><h2 id="hash">Hash</h2>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1"># Create new Hamster Hash</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="n">parrot</span> <span class="o">=</span> <span class="no">Hamster</span><span class="o">::</span><span class="no">Hash</span><span class="o">[</span><span class="ss">type</span><span class="p">:</span> <span class="s1">&#39;bird&#39;</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s1">&#39;parrot&#39;</span><span class="p">,</span> <span class="ss">color</span><span class="p">:</span> <span class="s1">&#39;yellow&#39;</span><span class="o">]</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="n">parrot</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="ss">:color</span><span class="p">)</span> <span class="c1"># yellow</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="n">parrot</span><span class="o">[</span><span class="ss">:type</span><span class="o">]</span> <span class="c1"># bird</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="c1"># You can not change hash because of immutability</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="n">parrot</span><span class="o">[</span><span class="ss">:subclass</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;budgie&#39;</span> <span class="c1"># NoMethodError: undefined method `[]=&#39;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="c1"># But you can create a new</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="n">budgie</span> <span class="o">=</span> <span class="n">parrot</span><span class="o">.</span><span class="n">put</span> <span class="ss">:subclass</span><span class="p">,</span> <span class="s1">&#39;budgie&#39;</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="n">budgie</span> <span class="o">==</span> <span class="n">parrot</span> <span class="c1"># false</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="n">budgie</span><span class="o">[</span><span class="ss">:subclass</span><span class="o">]</span> <span class="c1"># budgie</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="n">parrot</span><span class="o">[</span><span class="ss">:subclass</span><span class="o">]</span> <span class="c1"># nil</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">
</span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="n">budgie</span><span class="o">.</span><span class="n">to_hash</span><span class="o">.</span><span class="n">class</span> <span class="c1"># Plain Ruby Hash</span></span></span></code></pre></div><h2 id="list">List</h2>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">list</span> <span class="o">=</span> <span class="no">Hamster</span><span class="o">::</span><span class="no">List</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span> <span class="n">list</span><span class="o">.</span><span class="n">tail</span> <span class="c1"># Hamster::List[1, 2]</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">list</span><span class="o">.</span><span class="n">head</span> <span class="c1"># 0</span></span></span></code></pre></div><h2 id="set">Set</h2>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1"># Hamster&#39;s set is an unordered collection with no duplicates</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="n">colors</span> <span class="o">=</span> <span class="no">Hamster</span><span class="o">::</span><span class="no">Set</span><span class="o">[</span><span class="ss">:green</span><span class="p">,</span> <span class="ss">:white</span><span class="o">]</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="n">colors</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="ss">:green</span><span class="p">)</span> <span class="c1"># true</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="n">palette</span> <span class="o">=</span> <span class="n">colors</span><span class="o">.</span><span class="n">add</span> <span class="ss">:yellow</span> <span class="c1"># Hamster::Set[:green, :yellow, :white]</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="n">colors</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="ss">:yellow</span><span class="p">)</span> <span class="c1"># false palette.superset?(colors) # true</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="n">palette</span><span class="o">.</span><span class="n">intersection</span><span class="p">(</span><span class="n">colors</span><span class="p">)</span> <span class="c1"># Hamster::Set[:green, :white]</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="n">palette</span><span class="o">.</span><span class="n">difference</span><span class="p">(</span><span class="n">colors</span><span class="p">)</span><span class="o">.</span><span class="n">first</span> <span class="c1"># :yellow</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="n">palette</span><span class="o">.</span><span class="n">to_a</span> <span class="c1"># Plain Ruby array: [:green, :white, :yellow]</span></span></span></code></pre></div><h2 id="vector">Vector</h2>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln"> 1</span><span class="cl"> <span class="c1"># Vector is an integer-indexed immutable array</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="n">vector</span> <span class="o">=</span> <span class="no">Hamster</span><span class="o">::</span><span class="no">Vector</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="n">vector</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="c1"># 2</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="n">vector</span><span class="o">[-</span><span class="mi">1</span><span class="o">]</span> <span class="c1"># 2</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="n">vector</span><span class="o">[-</span><span class="mi">4</span><span class="o">]</span> <span class="c1"># nil</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="n">vector</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="o">]</span> <span class="c1"># Hamster::Vector[1, 2]</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="n">vector</span><span class="o">[</span><span class="mi">0</span><span class="o">..</span><span class="mi">2</span><span class="o">]</span> <span class="c1"># Hamster::Vector[0, 1, 2]</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="n">binary_vector</span> <span class="o">=</span> <span class="n">vector</span><span class="o">.</span><span class="n">delete_at</span> <span class="mi">0</span> <span class="c1"># Hamster::Vector[1, 2]</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="n">vector</span><span class="o">.</span><span class="n">size</span> <span class="c1"># 3</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="n">binary_vector</span><span class="o">.</span><span class="n">size</span> <span class="c1"># 2</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="n">vector</span> <span class="o">==</span> <span class="n">binary_vector</span> <span class="c1"># false</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="p">(</span><span class="n">binary_vector</span> <span class="o">+</span> <span class="n">vector</span><span class="p">)</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">uniq</span> <span class="c1"># Hamster::Vector[0, 1, 2]</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="p">(</span><span class="n">binary_vector</span> <span class="o">+</span> <span class="n">vector</span><span class="p">)</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">uniq</span> <span class="o">==</span> <span class="n">vector</span> <span class="c1"># true</span></span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>If you want to use immutable data structures in Ruby to write more
reliable, efficient and at the same time thread-safe code, you can take
a look at Hamster. You can find more in Hamster&rsquo;s
<a href="http://www.rubydoc.info/github/hamstergem/hamster/master">API
documentation</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>High level Node.JS streams</title>
      <link>https://neiro.io/blog/2016-01-28-high-level-nodejs-streams-with-highland/</link>
      <pubDate>Thu, 28 Jan 2016 10:00:00 +0100</pubDate>
      <guid>https://neiro.io/blog/2016-01-28-high-level-nodejs-streams-with-highland/</guid>
      <description>&lt;p&gt;Node.js has a simple and powerful stream API. Streams in Node.js are&#xA;unix pipes that let you perform asynchronous I/O operations by reading&#xA;source data and pipe it to destination. If your application operates not&#xA;with streams only, but promises, callbacks or synchronous code, you may&#xA;want to use more deeper abstraction that fits your needs. In this case&#xA;you may take a look at &lt;a href=&#34;http://highlandjs.org/&#34;&gt;Highland&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;highland&#34;&gt;Highland&lt;/h2&gt;&#xA;&lt;p&gt;Highland library allows you to manage asynchronous and synchronous code&#xA;easily both in Node.js and in the browser. With Highland you can simple&#xA;switch between synchronous and asynchronous data sources without&#xA;re-writing your code. You can install Highland with NPM:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Node.js has a simple and powerful stream API. Streams in Node.js are
unix pipes that let you perform asynchronous I/O operations by reading
source data and pipe it to destination. If your application operates not
with streams only, but promises, callbacks or synchronous code, you may
want to use more deeper abstraction that fits your needs. In this case
you may take a look at <a href="http://highlandjs.org/">Highland</a>.</p>
<h2 id="highland">Highland</h2>
<p>Highland library allows you to manage asynchronous and synchronous code
easily both in Node.js and in the browser. With Highland you can simple
switch between synchronous and asynchronous data sources without
re-writing your code. You can install Highland with NPM:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln">1</span><span class="cl"> npm install highland</span></span></code></pre></div><p>and require or import it as yet another Node.js module:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="kr">import</span> <span class="nx">_</span> <span class="nx">from</span> <span class="s1">&#39;highland&#39;</span><span class="p">;</span></span></span></code></pre></div><h2 id="general-examples">General examples</h2>
<p>Converting from arrays to Highland Streams:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="nx">_</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]).</span><span class="nx">toArray</span><span class="p">(</span><span class="nx">xs</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">xs</span><span class="p">));</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1">// 0, 1, 2
</span></span></span></code></pre></div><p>Map and reduce over a stream:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="nx">_</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]).</span><span class="nx">map</span><span class="p">(</span><span class="nx">x</span> <span class="p">=&gt;</span> <span class="nx">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">).</span><span class="nx">reduce</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nx">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">a</span> <span class="o">*</span> <span class="nx">b</span><span class="p">);</span> <span class="c1">// [6]
</span></span></span></code></pre></div><p>Reading files in parallel:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="kr">import</span> <span class="nx">fs</span> <span class="nx">from</span> <span class="s1">&#39;fs&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="kr">const</span> <span class="nx">readFile</span> <span class="o">=</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="sr">/.wrapCallback(fs.readFile); const stream = /</span><span class="p">([</span><span class="s1">&#39;./.babelrc&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="s1">&#39;./.eslintrc&#39;</span><span class="p">]).</span><span class="nx">map</span><span class="p">(</span><span class="nx">readFile</span><span class="p">).</span><span class="nx">parallel</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span></span></span></code></pre></div><p>Handling errors:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="nx">stream</span><span class="p">.</span><span class="nx">errors</span><span class="p">((</span><span class="nx">err</span><span class="p">,</span> <span class="nx">rethrow</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span> <span class="p">});</span></span></span></code></pre></div><p>Pipe to Node.js streams:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="nx">stream</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">outputStream</span><span class="p">);</span></span></span></code></pre></div><h2 id="stream-objects">Stream objects</h2>
<p>Constructor:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="kr">const</span> <span class="nx">stream</span> <span class="o">=</span> <span class="nx">_</span><span class="p">(</span><span class="nx">source</span><span class="p">);</span> <span class="c1">// source - Array/Generator/Node Stream/Event Emitter/Promise/Iterator/Iterable
</span></span></span></code></pre></div><p>General functions:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="nx">stream</span><span class="p">.</span><span class="nx">destroy</span><span class="p">();</span> <span class="nx">stream</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nx">stream</span><span class="p">.</span><span class="nx">pause</span><span class="p">();</span> <span class="nx">stream</span><span class="p">.</span><span class="nx">resume</span><span class="p">();</span> <span class="nx">stream</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// Write x value to
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"></span><span class="nx">stream</span></span></span></code></pre></div><h2 id="transformations">Transformations</h2>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl"> <span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]).</span><span class="nx">append</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span> <span class="c1">// [0, 1, 2, 3]
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1"></span> <span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">]).</span><span class="nx">compact</span><span class="p">();</span> <span class="c1">// [1, 2]
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="c1"></span> <span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">]).</span><span class="nx">filter</span><span class="p">(</span><span class="nx">x</span> <span class="p">=&gt;</span> <span class="nx">x</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="o">&lt;=</span> <span class="mi">3</span><span class="p">);</span> <span class="c1">// [1, 2]
</span></span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="c1"></span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]).</span><span class="nx">head</span><span class="p">();</span> <span class="c1">// 1
</span></span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="c1"></span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]).</span><span class="nx">last</span><span class="p">();</span> <span class="c1">// 3
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="c1"></span><span class="p">([</span><span class="s1">&#39;ABC&#39;</span><span class="p">]).</span><span class="nx">invoke</span><span class="p">(</span><span class="s1">&#39;toLowerCase&#39;</span><span class="p">,</span> <span class="p">[]);</span> <span class="c1">// abc
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="c1"></span><span class="p">([{</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">}]).</span><span class="nx">pick</span><span class="p">([</span><span class="s1">&#39;foo&#39;</span><span class="p">]);</span> <span class="c1">// { foo: &#39;bar&#39; }
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="c1"></span><span class="p">([{</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">}]).</span><span class="nx">pluck</span><span class="p">([</span><span class="s1">&#39;foo&#39;</span><span class="p">]);</span> <span class="c1">// bar
</span></span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="c1"></span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]).</span><span class="nx">slice</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span> <span class="c1">// [2, 3]
</span></span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="c1"></span><span class="p">([</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">]).</span><span class="nx">sort</span><span class="p">();</span> <span class="c1">// [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]
</span></span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="c1"></span><span class="nx">_</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]).</span><span class="nx">uniq</span><span class="p">();</span> <span class="c1">// [0, 2, 3]
</span></span></span></code></pre></div><h2 id="high-order-streams">High-order Streams</h2>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">]).</span><span class="nx">concat</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]);</span> <span class="c1">// [0, 1, 2, 3]
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1"></span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="mi">3</span><span class="p">]]]).</span><span class="nx">flatten</span><span class="p">();</span> <span class="c1">// [0, 1, 2, 3]
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"></span><span class="p">(</span><span class="sr">/([0, 1]), /</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])).</span><span class="nx">sequence</span><span class="p">();</span> <span class="c1">// [0, 1, 2, 3]
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="c1"></span><span class="p">([</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">]).</span><span class="nx">zip</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]);</span> <span class="c1">// =&gt; [&#39;a&#39;, 1], [&#39;b&#39;, 2]
</span></span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="kr">const</span> <span class="nx">fork</span> <span class="o">=</span> <span class="nx">stream</span><span class="p">.</span><span class="nx">fork</span><span class="p">();</span> <span class="kr">const</span> <span class="nx">observer</span> <span class="o">=</span> <span class="nx">stream</span><span class="p">.</span><span class="nx">observe</span><span class="p">();</span>
</span></span><span class="line"><span class="ln">7</span><span class="cl"><span class="nx">fork</span><span class="p">.</span><span class="nx">resume</span><span class="p">();</span></span></span></code></pre></div><h2 id="objects">Objects</h2>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="p">.</span><span class="nx">extend</span><span class="p">({</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;foo&#39;</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;obj&#39;</span> <span class="p">});</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1">// { name: &#39;foo&#39;, type: &#39;obj&#39; }
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"></span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">});</span> <span class="c1">// bar
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="c1"></span><span class="p">.</span><span class="nx">keys</span><span class="p">({</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">});</span> <span class="c1">// [&#39;foo&#39;]
</span></span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="c1"></span><span class="p">.</span><span class="nx">values</span><span class="p">({</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">});</span> <span class="c1">// [&#39;bar&#39;]
</span></span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="c1"></span><span class="nx">_</span><span class="p">.</span><span class="nx">pairs</span><span class="p">({</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">});</span> <span class="c1">// [&#39;foo&#39;, &#39;bar&#39;]
</span></span></span></code></pre></div><h2 id="utils">Utils</h2>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="p">.</span><span class="nx">isStream</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]);</span> <span class="c1">// false
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1"></span><span class="p">.</span><span class="nx">isStream</span><span class="p">(</span><span class="nx">stream</span><span class="p">);</span> <span class="c1">// true
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]).</span><span class="nx">each</span><span class="p">(.</span><span class="nx">log</span><span class="p">);</span> <span class="c1">// 1, 2, 3
</span></span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="kr">const</span> <span class="nx">readFile</span> <span class="o">=</span> <span class="p">.</span><span class="nx">wrapCallback</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">);</span> <span class="c1">// Wraps callback to Highland stream
</span></span></span><span class="line"><span class="ln">7</span><span class="cl"><span class="c1"></span><span class="p">.</span><span class="nx">isStream</span><span class="p">(</span><span class="nx">readFile</span><span class="p">);</span> <span class="c1">// true
</span></span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>If you need to handle your synchronous and asynchronous data with
differrent abstractions in one way, operate with Node.js streams at
higher level, you can use Highland high-level streams library to fit
your needs. You can find more at <a href="http://highlandjs.org/">Highland
docs</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>High level Node.JS streams</title>
      <link>https://neiro.io/posts/2016-01-28-high-level-nodejs-streams-with-highland/</link>
      <pubDate>Thu, 28 Jan 2016 10:00:00 +0100</pubDate>
      <guid>https://neiro.io/posts/2016-01-28-high-level-nodejs-streams-with-highland/</guid>
      <description>&lt;p&gt;Node.js has a simple and powerful stream API. Streams in Node.js are&#xA;unix pipes that let you perform asynchronous I/O operations by reading&#xA;source data and pipe it to destination. If your application operates not&#xA;with streams only, but promises, callbacks or synchronous code, you may&#xA;want to use more deeper abstraction that fits your needs. In this case&#xA;you may take a look at &lt;a href=&#34;http://highlandjs.org/&#34;&gt;Highland&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;highland&#34;&gt;Highland&lt;/h2&gt;&#xA;&lt;p&gt;Highland library allows you to manage asynchronous and synchronous code&#xA;easily both in Node.js and in the browser. With Highland you can simple&#xA;switch between synchronous and asynchronous data sources without&#xA;re-writing your code. You can install Highland with NPM:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Node.js has a simple and powerful stream API. Streams in Node.js are
unix pipes that let you perform asynchronous I/O operations by reading
source data and pipe it to destination. If your application operates not
with streams only, but promises, callbacks or synchronous code, you may
want to use more deeper abstraction that fits your needs. In this case
you may take a look at <a href="http://highlandjs.org/">Highland</a>.</p>
<h2 id="highland">Highland</h2>
<p>Highland library allows you to manage asynchronous and synchronous code
easily both in Node.js and in the browser. With Highland you can simple
switch between synchronous and asynchronous data sources without
re-writing your code. You can install Highland with NPM:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln">1</span><span class="cl"> npm install highland</span></span></code></pre></div><p>and require or import it as yet another Node.js module:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="kr">import</span> <span class="nx">_</span> <span class="nx">from</span> <span class="s1">&#39;highland&#39;</span><span class="p">;</span></span></span></code></pre></div><h2 id="general-examples">General examples</h2>
<p>Converting from arrays to Highland Streams:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="nx">_</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]).</span><span class="nx">toArray</span><span class="p">(</span><span class="nx">xs</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">xs</span><span class="p">));</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1">// 0, 1, 2
</span></span></span></code></pre></div><p>Map and reduce over a stream:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="nx">_</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]).</span><span class="nx">map</span><span class="p">(</span><span class="nx">x</span> <span class="p">=&gt;</span> <span class="nx">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">).</span><span class="nx">reduce</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nx">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">a</span> <span class="o">*</span> <span class="nx">b</span><span class="p">);</span> <span class="c1">// [6]
</span></span></span></code></pre></div><p>Reading files in parallel:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="kr">import</span> <span class="nx">fs</span> <span class="nx">from</span> <span class="s1">&#39;fs&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="kr">const</span> <span class="nx">readFile</span> <span class="o">=</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="sr">/.wrapCallback(fs.readFile); const stream = /</span><span class="p">([</span><span class="s1">&#39;./.babelrc&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="s1">&#39;./.eslintrc&#39;</span><span class="p">]).</span><span class="nx">map</span><span class="p">(</span><span class="nx">readFile</span><span class="p">).</span><span class="nx">parallel</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span></span></span></code></pre></div><p>Handling errors:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="nx">stream</span><span class="p">.</span><span class="nx">errors</span><span class="p">((</span><span class="nx">err</span><span class="p">,</span> <span class="nx">rethrow</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span> <span class="p">});</span></span></span></code></pre></div><p>Pipe to Node.js streams:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="nx">stream</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">outputStream</span><span class="p">);</span></span></span></code></pre></div><h2 id="stream-objects">Stream objects</h2>
<p>Constructor:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="kr">const</span> <span class="nx">stream</span> <span class="o">=</span> <span class="nx">_</span><span class="p">(</span><span class="nx">source</span><span class="p">);</span> <span class="c1">// source - Array/Generator/Node Stream/Event Emitter/Promise/Iterator/Iterable
</span></span></span></code></pre></div><p>General functions:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="nx">stream</span><span class="p">.</span><span class="nx">destroy</span><span class="p">();</span> <span class="nx">stream</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nx">stream</span><span class="p">.</span><span class="nx">pause</span><span class="p">();</span> <span class="nx">stream</span><span class="p">.</span><span class="nx">resume</span><span class="p">();</span> <span class="nx">stream</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// Write x value to
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"></span><span class="nx">stream</span></span></span></code></pre></div><h2 id="transformations">Transformations</h2>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl"> <span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]).</span><span class="nx">append</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span> <span class="c1">// [0, 1, 2, 3]
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1"></span> <span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">]).</span><span class="nx">compact</span><span class="p">();</span> <span class="c1">// [1, 2]
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="c1"></span> <span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">]).</span><span class="nx">filter</span><span class="p">(</span><span class="nx">x</span> <span class="p">=&gt;</span> <span class="nx">x</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="o">&lt;=</span> <span class="mi">3</span><span class="p">);</span> <span class="c1">// [1, 2]
</span></span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="c1"></span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]).</span><span class="nx">head</span><span class="p">();</span> <span class="c1">// 1
</span></span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="c1"></span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]).</span><span class="nx">last</span><span class="p">();</span> <span class="c1">// 3
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="c1"></span><span class="p">([</span><span class="s1">&#39;ABC&#39;</span><span class="p">]).</span><span class="nx">invoke</span><span class="p">(</span><span class="s1">&#39;toLowerCase&#39;</span><span class="p">,</span> <span class="p">[]);</span> <span class="c1">// abc
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="c1"></span><span class="p">([{</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">}]).</span><span class="nx">pick</span><span class="p">([</span><span class="s1">&#39;foo&#39;</span><span class="p">]);</span> <span class="c1">// { foo: &#39;bar&#39; }
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="c1"></span><span class="p">([{</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">}]).</span><span class="nx">pluck</span><span class="p">([</span><span class="s1">&#39;foo&#39;</span><span class="p">]);</span> <span class="c1">// bar
</span></span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="c1"></span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]).</span><span class="nx">slice</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span> <span class="c1">// [2, 3]
</span></span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="c1"></span><span class="p">([</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">]).</span><span class="nx">sort</span><span class="p">();</span> <span class="c1">// [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]
</span></span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="c1"></span><span class="nx">_</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]).</span><span class="nx">uniq</span><span class="p">();</span> <span class="c1">// [0, 2, 3]
</span></span></span></code></pre></div><h2 id="high-order-streams">High-order Streams</h2>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">]).</span><span class="nx">concat</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]);</span> <span class="c1">// [0, 1, 2, 3]
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1"></span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="mi">3</span><span class="p">]]]).</span><span class="nx">flatten</span><span class="p">();</span> <span class="c1">// [0, 1, 2, 3]
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"></span><span class="p">(</span><span class="sr">/([0, 1]), /</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])).</span><span class="nx">sequence</span><span class="p">();</span> <span class="c1">// [0, 1, 2, 3]
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="c1"></span><span class="p">([</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">]).</span><span class="nx">zip</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]);</span> <span class="c1">// =&gt; [&#39;a&#39;, 1], [&#39;b&#39;, 2]
</span></span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="kr">const</span> <span class="nx">fork</span> <span class="o">=</span> <span class="nx">stream</span><span class="p">.</span><span class="nx">fork</span><span class="p">();</span> <span class="kr">const</span> <span class="nx">observer</span> <span class="o">=</span> <span class="nx">stream</span><span class="p">.</span><span class="nx">observe</span><span class="p">();</span>
</span></span><span class="line"><span class="ln">7</span><span class="cl"><span class="nx">fork</span><span class="p">.</span><span class="nx">resume</span><span class="p">();</span></span></span></code></pre></div><h2 id="objects">Objects</h2>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="p">.</span><span class="nx">extend</span><span class="p">({</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;foo&#39;</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;obj&#39;</span> <span class="p">});</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1">// { name: &#39;foo&#39;, type: &#39;obj&#39; }
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"></span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">});</span> <span class="c1">// bar
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="c1"></span><span class="p">.</span><span class="nx">keys</span><span class="p">({</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">});</span> <span class="c1">// [&#39;foo&#39;]
</span></span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="c1"></span><span class="p">.</span><span class="nx">values</span><span class="p">({</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">});</span> <span class="c1">// [&#39;bar&#39;]
</span></span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="c1"></span><span class="nx">_</span><span class="p">.</span><span class="nx">pairs</span><span class="p">({</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">});</span> <span class="c1">// [&#39;foo&#39;, &#39;bar&#39;]
</span></span></span></code></pre></div><h2 id="utils">Utils</h2>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="p">.</span><span class="nx">isStream</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]);</span> <span class="c1">// false
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1"></span><span class="p">.</span><span class="nx">isStream</span><span class="p">(</span><span class="nx">stream</span><span class="p">);</span> <span class="c1">// true
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]).</span><span class="nx">each</span><span class="p">(.</span><span class="nx">log</span><span class="p">);</span> <span class="c1">// 1, 2, 3
</span></span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="kr">const</span> <span class="nx">readFile</span> <span class="o">=</span> <span class="p">.</span><span class="nx">wrapCallback</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">);</span> <span class="c1">// Wraps callback to Highland stream
</span></span></span><span class="line"><span class="ln">7</span><span class="cl"><span class="c1"></span><span class="p">.</span><span class="nx">isStream</span><span class="p">(</span><span class="nx">readFile</span><span class="p">);</span> <span class="c1">// true
</span></span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>If you need to handle your synchronous and asynchronous data with
differrent abstractions in one way, operate with Node.js streams at
higher level, you can use Highland high-level streams library to fit
your needs. You can find more at <a href="http://highlandjs.org/">Highland
docs</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Trine util library</title>
      <link>https://neiro.io/blog/2015-12-31-trine-utility-library/</link>
      <pubDate>Thu, 31 Dec 2015 10:00:00 +0100</pubDate>
      <guid>https://neiro.io/blog/2015-12-31-trine-utility-library/</guid>
      <description>&lt;p&gt;As we know, functional programming in JavaScript is not the best&#xA;experience, unlike the plain functional languages (&lt;em&gt;Haskell, Lisp,&#xA;etc&lt;/em&gt;). But new standards of JavaScript - ES6 &lt;em&gt;(ECMAScript 2015)&lt;/em&gt; and&#xA;&lt;em&gt;ES7(ECMAScript 2016)&lt;/em&gt; introduce some improvements and allows you to&#xA;write code in more functional style:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;nx&#34;&gt;flatten&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;collection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;func1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;func2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But there&amp;rsquo;s more: new&#xA;&lt;a href=&#34;https://github.com/zenparsing/es-function-bind&#34;&gt;function bind syntax&lt;/a&gt;&#xA;performs function binding and method extraction. The previous example&#xA;can be rewritten as:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;collection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;func1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;func2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;flatten&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ES6 also introduces the concept of iterators - protocol, that most JS&#xA;collection types implement. You can extend your custom collections to&#xA;support the same protocol, and generators functions support it too. So,&#xA;if you looking for utility library that supports new function bind&#xA;syntax, and iterators, you can take a look on&#xA;&lt;a href=&#34;https://github.com/jussi-kalliokoski/trine&#34;&gt;Trine&lt;/a&gt;.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>As we know, functional programming in JavaScript is not the best
experience, unlike the plain functional languages (<em>Haskell, Lisp,
etc</em>). But new standards of JavaScript - ES6 <em>(ECMAScript 2015)</em> and
<em>ES7(ECMAScript 2016)</em> introduce some improvements and allows you to
write code in more functional style:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="nx">flatten</span><span class="p">(</span><span class="nx">collection</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">func1</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="nx">func2</span><span class="p">));</span></span></span></code></pre></div><p>But there&rsquo;s more: new
<a href="https://github.com/zenparsing/es-function-bind">function bind syntax</a>
performs function binding and method extraction. The previous example
can be rewritten as:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl">
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nx">collection</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">func1</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="nx">func2</span><span class="p">)</span><span class="o">::</span><span class="nx">flatten</span><span class="p">();</span></span></span></code></pre></div><p>ES6 also introduces the concept of iterators - protocol, that most JS
collection types implement. You can extend your custom collections to
support the same protocol, and generators functions support it too. So,
if you looking for utility library that supports new function bind
syntax, and iterators, you can take a look on
<a href="https://github.com/jussi-kalliokoski/trine">Trine</a>.</p>
<h2 id="installing">Installing</h2>
<p>First of all, you may want to use all features of ES6 and most of ES7
standards with <a href="https://babeljs.io/">Babel</a>:</p>
<p><em>npm install &ndash;save babel babel-preset-stage-0 babel-preset-es2015</em></p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="c1">//.babelrc { &#34;presets&#34;: [&#34;stage-0&#34;, &#34;es2015&#34;]
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></div><p>Then install Trine:</p>
<p><em>npm install &ndash;save trine</em></p>
<p>and import to your project required functions:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="kr">import</span> <span class="p">{</span> <span class="nx">last</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;trine/iterable/last&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">
</span></span><span class="line"><span class="ln">3</span><span class="cl"> <span class="kr">const</span> <span class="nx">lastCh</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">]</span><span class="o">::</span><span class="nx">last</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="c1">// yields &#39;c&#39;
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="c1"></span> <span class="nx">lastCh</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">;</span> <span class="c1">// c
</span></span></span></code></pre></div><h2 id="boolean">Boolean</h2>
<p>Trine provides common boolean helpers:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="kc">true</span><span class="o">::</span><span class="nx">not</span><span class="p">()</span> <span class="c1">// false
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1"></span><span class="kc">true</span><span class="o">::</span><span class="nx">and</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span> <span class="c1">// false
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"></span><span class="kc">true</span><span class="o">::</span><span class="nx">or</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span> <span class="c1">// true
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="c1"></span><span class="kc">true</span><span class="o">::</span><span class="nx">xor</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span> <span class="c1">// true
</span></span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="c1"></span><span class="mi">0</span><span class="o">::</span><span class="nx">not</span><span class="p">()</span> <span class="c1">// true
</span></span></span></code></pre></div><h2 id="number">Number</h2>
<p>#+begin_src javascript
10::min(100) <em>/ 10
-100::abs() /</em> 100
4::div(2) <em>/ 2
4::mod(3) /</em> 1
2::pow(4)::max(15) // 16</p>
<h2 id="value">Value</h2>
<p>Extract , compare or convert values to functions:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="s1">&#39;foo&#39;</span><span class="o">::</span><span class="nx">equals</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">)</span><span class="o">::</span><span class="nx">is</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span> <span class="c1">// true
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">func</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">}</span><span class="o">::</span><span class="nx">prop</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">)</span><span class="o">::</span><span class="nx">toFunction</span><span class="p">();</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="nx">func</span><span class="p">();</span> <span class="c1">// bar
</span></span></span></code></pre></div><h2 id="partial">Partial</h2>
<p>Trine includes partial helper:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">parseInt</span><span class="o">::</span><span class="nx">partial</span><span class="p">(</span><span class="nx">_</span><span class="p">,</span> <span class="mi">2</span><span class="p">)(</span><span class="s1">&#39;1010&#39;</span><span class="p">)</span> <span class="c1">// 10
</span></span></span></code></pre></div><h2 id="object">Object</h2>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">};</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nx">obj</span><span class="o">::</span><span class="nx">keys</span><span class="p">().</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">;</span> <span class="c1">// foo
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"></span><span class="nx">obj</span><span class="o">::</span><span class="nx">values</span><span class="p">().</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">;</span> <span class="c1">// bar
</span></span></span></code></pre></div><h2 id="iterable">Iterable</h2>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="kd">let</span> <span class="nx">nums</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nx">nums</span><span class="o">::</span><span class="nx">count</span><span class="p">().</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">;</span> <span class="c1">// 2
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"></span><span class="nx">nums</span><span class="o">::</span><span class="nx">reverse</span><span class="p">()</span><span class="o">::</span><span class="nx">to</span><span class="p">(</span><span class="nb">Array</span><span class="p">);</span> <span class="c1">// 1, 5
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="c1"></span><span class="s1">&#39;cab&#39;</span><span class="o">::</span><span class="nx">sortAlphabetically</span><span class="p">()</span><span class="o">::</span><span class="nx">to</span><span class="p">(</span><span class="nb">Array</span><span class="p">)</span> <span class="c1">// a, b, c
</span></span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="c1"></span><span class="p">[</span><span class="nx">nums</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]]</span><span class="o">::</span><span class="nx">flatten</span><span class="p">()</span><span class="o">::</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="k">this</span> <span class="o">*</span> <span class="mi">3</span> <span class="p">})</span><span class="o">::</span><span class="nx">to</span><span class="p">(</span><span class="nb">Array</span><span class="p">);</span> <span class="c1">// 15, 3, 6, 9
</span></span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>If you like new syntax of ES6, ES7 and want to use iterators, function
binding, you can use Trine as base utility library. If you want to know
more about Trine, you can take a look at it&rsquo;s
<a href="http://jussi-kalliokoski.github.io/trine/docs/latest/">documentation</a>
.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Trine util library</title>
      <link>https://neiro.io/posts/2015-12-31-trine-utility-library/</link>
      <pubDate>Thu, 31 Dec 2015 10:00:00 +0100</pubDate>
      <guid>https://neiro.io/posts/2015-12-31-trine-utility-library/</guid>
      <description>&lt;p&gt;As we know, functional programming in JavaScript is not the best&#xA;experience, unlike the plain functional languages (&lt;em&gt;Haskell, Lisp,&#xA;etc&lt;/em&gt;). But new standards of JavaScript - ES6 &lt;em&gt;(ECMAScript 2015)&lt;/em&gt; and&#xA;&lt;em&gt;ES7(ECMAScript 2016)&lt;/em&gt; introduce some improvements and allows you to&#xA;write code in more functional style:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;nx&#34;&gt;flatten&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;collection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;func1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;func2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But there&amp;rsquo;s more: new&#xA;&lt;a href=&#34;https://github.com/zenparsing/es-function-bind&#34;&gt;function bind syntax&lt;/a&gt;&#xA;performs function binding and method extraction. The previous example&#xA;can be rewritten as:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;collection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;func1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;func2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;flatten&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ES6 also introduces the concept of iterators - protocol, that most JS&#xA;collection types implement. You can extend your custom collections to&#xA;support the same protocol, and generators functions support it too. So,&#xA;if you looking for utility library that supports new function bind&#xA;syntax, and iterators, you can take a look on&#xA;&lt;a href=&#34;https://github.com/jussi-kalliokoski/trine&#34;&gt;Trine&lt;/a&gt;.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>As we know, functional programming in JavaScript is not the best
experience, unlike the plain functional languages (<em>Haskell, Lisp,
etc</em>). But new standards of JavaScript - ES6 <em>(ECMAScript 2015)</em> and
<em>ES7(ECMAScript 2016)</em> introduce some improvements and allows you to
write code in more functional style:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="nx">flatten</span><span class="p">(</span><span class="nx">collection</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">func1</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="nx">func2</span><span class="p">));</span></span></span></code></pre></div><p>But there&rsquo;s more: new
<a href="https://github.com/zenparsing/es-function-bind">function bind syntax</a>
performs function binding and method extraction. The previous example
can be rewritten as:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl">
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nx">collection</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">func1</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="nx">func2</span><span class="p">)</span><span class="o">::</span><span class="nx">flatten</span><span class="p">();</span></span></span></code></pre></div><p>ES6 also introduces the concept of iterators - protocol, that most JS
collection types implement. You can extend your custom collections to
support the same protocol, and generators functions support it too. So,
if you looking for utility library that supports new function bind
syntax, and iterators, you can take a look on
<a href="https://github.com/jussi-kalliokoski/trine">Trine</a>.</p>
<h2 id="installing">Installing</h2>
<p>First of all, you may want to use all features of ES6 and most of ES7
standards with <a href="https://babeljs.io/">Babel</a>:</p>
<p><em>npm install &ndash;save babel babel-preset-stage-0 babel-preset-es2015</em></p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="c1">//.babelrc { &#34;presets&#34;: [&#34;stage-0&#34;, &#34;es2015&#34;]
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></div><p>Then install Trine:</p>
<p><em>npm install &ndash;save trine</em></p>
<p>and import to your project required functions:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="kr">import</span> <span class="p">{</span> <span class="nx">last</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;trine/iterable/last&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">
</span></span><span class="line"><span class="ln">3</span><span class="cl"> <span class="kr">const</span> <span class="nx">lastCh</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">]</span><span class="o">::</span><span class="nx">last</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="c1">// yields &#39;c&#39;
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="c1"></span> <span class="nx">lastCh</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">;</span> <span class="c1">// c
</span></span></span></code></pre></div><h2 id="boolean">Boolean</h2>
<p>Trine provides common boolean helpers:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="kc">true</span><span class="o">::</span><span class="nx">not</span><span class="p">()</span> <span class="c1">// false
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1"></span><span class="kc">true</span><span class="o">::</span><span class="nx">and</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span> <span class="c1">// false
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"></span><span class="kc">true</span><span class="o">::</span><span class="nx">or</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span> <span class="c1">// true
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="c1"></span><span class="kc">true</span><span class="o">::</span><span class="nx">xor</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span> <span class="c1">// true
</span></span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="c1"></span><span class="mi">0</span><span class="o">::</span><span class="nx">not</span><span class="p">()</span> <span class="c1">// true
</span></span></span></code></pre></div><h2 id="number">Number</h2>
<p>#+begin_src javascript
10::min(100) <em>/ 10
-100::abs() /</em> 100
4::div(2) <em>/ 2
4::mod(3) /</em> 1
2::pow(4)::max(15) // 16</p>
<h2 id="value">Value</h2>
<p>Extract , compare or convert values to functions:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="s1">&#39;foo&#39;</span><span class="o">::</span><span class="nx">equals</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">)</span><span class="o">::</span><span class="nx">is</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span> <span class="c1">// true
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">func</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">}</span><span class="o">::</span><span class="nx">prop</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">)</span><span class="o">::</span><span class="nx">toFunction</span><span class="p">();</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="nx">func</span><span class="p">();</span> <span class="c1">// bar
</span></span></span></code></pre></div><h2 id="partial">Partial</h2>
<p>Trine includes partial helper:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">parseInt</span><span class="o">::</span><span class="nx">partial</span><span class="p">(</span><span class="nx">_</span><span class="p">,</span> <span class="mi">2</span><span class="p">)(</span><span class="s1">&#39;1010&#39;</span><span class="p">)</span> <span class="c1">// 10
</span></span></span></code></pre></div><h2 id="object">Object</h2>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">};</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nx">obj</span><span class="o">::</span><span class="nx">keys</span><span class="p">().</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">;</span> <span class="c1">// foo
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"></span><span class="nx">obj</span><span class="o">::</span><span class="nx">values</span><span class="p">().</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">;</span> <span class="c1">// bar
</span></span></span></code></pre></div><h2 id="iterable">Iterable</h2>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="kd">let</span> <span class="nx">nums</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nx">nums</span><span class="o">::</span><span class="nx">count</span><span class="p">().</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">;</span> <span class="c1">// 2
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"></span><span class="nx">nums</span><span class="o">::</span><span class="nx">reverse</span><span class="p">()</span><span class="o">::</span><span class="nx">to</span><span class="p">(</span><span class="nb">Array</span><span class="p">);</span> <span class="c1">// 1, 5
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="c1"></span><span class="s1">&#39;cab&#39;</span><span class="o">::</span><span class="nx">sortAlphabetically</span><span class="p">()</span><span class="o">::</span><span class="nx">to</span><span class="p">(</span><span class="nb">Array</span><span class="p">)</span> <span class="c1">// a, b, c
</span></span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="c1"></span><span class="p">[</span><span class="nx">nums</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]]</span><span class="o">::</span><span class="nx">flatten</span><span class="p">()</span><span class="o">::</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="k">this</span> <span class="o">*</span> <span class="mi">3</span> <span class="p">})</span><span class="o">::</span><span class="nx">to</span><span class="p">(</span><span class="nb">Array</span><span class="p">);</span> <span class="c1">// 15, 3, 6, 9
</span></span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>If you like new syntax of ES6, ES7 and want to use iterators, function
binding, you can use Trine as base utility library. If you want to know
more about Trine, you can take a look at it&rsquo;s
<a href="http://jussi-kalliokoski.github.io/trine/docs/latest/">documentation</a>
.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Functional Ruby gem</title>
      <link>https://neiro.io/blog/2015-11-28-functional-ruby-gem/</link>
      <pubDate>Sat, 28 Nov 2015 10:00:00 +0100</pubDate>
      <guid>https://neiro.io/blog/2015-11-28-functional-ruby-gem/</guid>
      <description>&lt;p&gt;Ruby is a great example of multi-paradigm programming language: it&#xA;allows you to write code in object-oriented, imperative or functional&#xA;styles. Ruby have much in common with functional programming languages:&#xA;&lt;em&gt;high-order functions, closures, anonymous functions, continuations,&#xA;statements all values&lt;/em&gt;. If you want to use more functional programming&#xA;patterns and tools, you might want to take a look on&#xA;&lt;a href=&#34;https://github.com/jdantonio/functional-ruby&#34;&gt;Functional Ruby&lt;/a&gt; gem.&lt;/p&gt;&#xA;&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Thread-safe, immutable data structures&lt;/li&gt;&#xA;&lt;li&gt;Protocol specifications&lt;/li&gt;&#xA;&lt;li&gt;Functions overloading&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Either, Option&lt;/code&gt; classes&lt;/li&gt;&#xA;&lt;li&gt;Immutable variation of Ruby&amp;rsquo;s &lt;code&gt;OpenStruct&lt;/code&gt; class&lt;/li&gt;&#xA;&lt;li&gt;Memoization&lt;/li&gt;&#xA;&lt;li&gt;Lazy execution&lt;/li&gt;&#xA;&lt;li&gt;Tuples&lt;/li&gt;&#xA;&lt;li&gt;Pattern matching&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;installing&#34;&gt;Installing&lt;/h2&gt;&#xA;&lt;p&gt;Install this gem with or without bundler:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Ruby is a great example of multi-paradigm programming language: it
allows you to write code in object-oriented, imperative or functional
styles. Ruby have much in common with functional programming languages:
<em>high-order functions, closures, anonymous functions, continuations,
statements all values</em>. If you want to use more functional programming
patterns and tools, you might want to take a look on
<a href="https://github.com/jdantonio/functional-ruby">Functional Ruby</a> gem.</p>
<h2 id="features">Features</h2>
<ul>
<li>Thread-safe, immutable data structures</li>
<li>Protocol specifications</li>
<li>Functions overloading</li>
<li><code>Either, Option</code> classes</li>
<li>Immutable variation of Ruby&rsquo;s <code>OpenStruct</code> class</li>
<li>Memoization</li>
<li>Lazy execution</li>
<li>Tuples</li>
<li>Pattern matching</li>
</ul>
<h2 id="installing">Installing</h2>
<p>Install this gem with or without bundler:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln">1</span><span class="cl">gem install functional-ruby
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1">#  gem &#39;functional-ruby&#39;</span></span></span></code></pre></div><p>And then require it in your project:</p>
<p>#+begin_src ruby require &lsquo;functional&rsquo; #+end_src</p>
<h2 id="immutable-data-structures">Immutable data structures</h2>
<p>#+begin_src ruby
Address = Functional::Record.new(:city, :country, :street, :house) do
mandatory :country, :city
default :city, &lsquo;Moscow&rsquo;
default :country, &lsquo;Russia&rsquo;
end # &lt;record Address :city=&gt;&ldquo;Moscow&rdquo;, :country=&gt;&ldquo;Russia&rdquo;, :street=&gt;nil, :house=&gt;nil&gt; #+end_src</p>
<h2 id="immutable-openstruct">Immutable OpenStruct</h2>
<p>Immutable, thread-safe, write-once and read-only object variation of
<code>OpenStruct</code>:</p>
<p>#+begin_src ruby
name = Functional::ValueStruct.new firstname: &lsquo;Hodor&rsquo;, lastname: &lsquo;Hodor&rsquo;
name.get :firstname # Hodor
name.lastname # Hodor
name.firstname? # true #+end_src</p>
<h2 id="tuples">Tuples</h2>
<p>Tuple is a data structure that is similar to array, but is immutable and
has a fixed length.</p>
<p>#+begin_src ruby
tuple = Functional::Tuple.new %w(one two three)
tuple.at 0 # one
tuple.last 0 # three
tuple.fetch 4, &lsquo;four&rsquo; # four
tuple.tail.to_a # [&rsquo;two&rsquo;, &rsquo;three&rsquo;]
tuple.repeat(2).to_a.join &lsquo;,&rsquo; # one, two, three, one, two, three #+end_src</p>
<h2 id="protocols">Protocols</h2>
<p>Protocols are specifications to provide polymorphism and method-dispatch
mechanism with strong typing, inspired by <a href="http://clojure.org/protocols">Clojure protocols</a>:</p>
<p>#+begin_src ruby
Functional::SpecifyProtocol(:Address) do
attr_accessor :city
attr_accessor :country
attr_accessor :street
attr_accessor :house
end #+end_src</p>
<h2 id="pattern-matching">Pattern matching</h2>
<p>#+begin_src ruby</p>
<p>class AddressChecker
include Functional::PatternMatching
include Functional::Protocol
include Functional::TypeCheck</p>
<p>def msg &lsquo;You live in Moscow, Russia&rsquo; end</p>
<p>defn(:msg, _) do |addr|
&ldquo;You live in #{addr}&rdquo;
end</p>
<p>defn(:msg, _) { |addr| &ldquo;You live in #{addr.house}, #{addr.street},
#{addr.city}, #{addr.country}&rdquo; }
.when { |addr| Satisfy?(addr, :Address) }</p>
<p>defn(:msg, :name, _) do |addr|
&ldquo;Somebody live in #{addr}&rdquo;
end</p>
<p>defn(:msg, _) { |zip| &ldquo;Your zip is #{zip}&rdquo; }.when { |addr| Type?(addr, Fixnum) }
end #+end_src</p>
<h2 id="conclusion">Conclusion</h2>
<p>If you like functional programming, and want to use it&rsquo;s patterns and
tools with Ruby, then you can use
<a href="https://github.com/jdantonio/functional-ruby">Functional Ruby</a> gem to
write code in more functional style. You can find more information in
<a href="http://jerrydantonio.com/functional-ruby/">API documentation</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Functional Ruby gem</title>
      <link>https://neiro.io/posts/2015-11-28-functional-ruby-gem/</link>
      <pubDate>Sat, 28 Nov 2015 10:00:00 +0100</pubDate>
      <guid>https://neiro.io/posts/2015-11-28-functional-ruby-gem/</guid>
      <description>&lt;p&gt;Ruby is a great example of multi-paradigm programming language: it&#xA;allows you to write code in object-oriented, imperative or functional&#xA;styles. Ruby have much in common with functional programming languages:&#xA;&lt;em&gt;high-order functions, closures, anonymous functions, continuations,&#xA;statements all values&lt;/em&gt;. If you want to use more functional programming&#xA;patterns and tools, you might want to take a look on&#xA;&lt;a href=&#34;https://github.com/jdantonio/functional-ruby&#34;&gt;Functional Ruby&lt;/a&gt; gem.&lt;/p&gt;&#xA;&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Thread-safe, immutable data structures&lt;/li&gt;&#xA;&lt;li&gt;Protocol specifications&lt;/li&gt;&#xA;&lt;li&gt;Functions overloading&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Either, Option&lt;/code&gt; classes&lt;/li&gt;&#xA;&lt;li&gt;Immutable variation of Ruby&amp;rsquo;s &lt;code&gt;OpenStruct&lt;/code&gt; class&lt;/li&gt;&#xA;&lt;li&gt;Memoization&lt;/li&gt;&#xA;&lt;li&gt;Lazy execution&lt;/li&gt;&#xA;&lt;li&gt;Tuples&lt;/li&gt;&#xA;&lt;li&gt;Pattern matching&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;installing&#34;&gt;Installing&lt;/h2&gt;&#xA;&lt;p&gt;Install this gem with or without bundler:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Ruby is a great example of multi-paradigm programming language: it
allows you to write code in object-oriented, imperative or functional
styles. Ruby have much in common with functional programming languages:
<em>high-order functions, closures, anonymous functions, continuations,
statements all values</em>. If you want to use more functional programming
patterns and tools, you might want to take a look on
<a href="https://github.com/jdantonio/functional-ruby">Functional Ruby</a> gem.</p>
<h2 id="features">Features</h2>
<ul>
<li>Thread-safe, immutable data structures</li>
<li>Protocol specifications</li>
<li>Functions overloading</li>
<li><code>Either, Option</code> classes</li>
<li>Immutable variation of Ruby&rsquo;s <code>OpenStruct</code> class</li>
<li>Memoization</li>
<li>Lazy execution</li>
<li>Tuples</li>
<li>Pattern matching</li>
</ul>
<h2 id="installing">Installing</h2>
<p>Install this gem with or without bundler:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln">1</span><span class="cl">gem install functional-ruby
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1">#  gem &#39;functional-ruby&#39;</span></span></span></code></pre></div><p>And then require it in your project:</p>
<p>#+begin_src ruby require &lsquo;functional&rsquo; #+end_src</p>
<h2 id="immutable-data-structures">Immutable data structures</h2>
<p>#+begin_src ruby
Address = Functional::Record.new(:city, :country, :street, :house) do
mandatory :country, :city
default :city, &lsquo;Moscow&rsquo;
default :country, &lsquo;Russia&rsquo;
end # &lt;record Address :city=&gt;&ldquo;Moscow&rdquo;, :country=&gt;&ldquo;Russia&rdquo;, :street=&gt;nil, :house=&gt;nil&gt; #+end_src</p>
<h2 id="immutable-openstruct">Immutable OpenStruct</h2>
<p>Immutable, thread-safe, write-once and read-only object variation of
<code>OpenStruct</code>:</p>
<p>#+begin_src ruby
name = Functional::ValueStruct.new firstname: &lsquo;Hodor&rsquo;, lastname: &lsquo;Hodor&rsquo;
name.get :firstname # Hodor
name.lastname # Hodor
name.firstname? # true #+end_src</p>
<h2 id="tuples">Tuples</h2>
<p>Tuple is a data structure that is similar to array, but is immutable and
has a fixed length.</p>
<p>#+begin_src ruby
tuple = Functional::Tuple.new %w(one two three)
tuple.at 0 # one
tuple.last 0 # three
tuple.fetch 4, &lsquo;four&rsquo; # four
tuple.tail.to_a # [&rsquo;two&rsquo;, &rsquo;three&rsquo;]
tuple.repeat(2).to_a.join &lsquo;,&rsquo; # one, two, three, one, two, three #+end_src</p>
<h2 id="protocols">Protocols</h2>
<p>Protocols are specifications to provide polymorphism and method-dispatch
mechanism with strong typing, inspired by <a href="http://clojure.org/protocols">Clojure protocols</a>:</p>
<p>#+begin_src ruby
Functional::SpecifyProtocol(:Address) do
attr_accessor :city
attr_accessor :country
attr_accessor :street
attr_accessor :house
end #+end_src</p>
<h2 id="pattern-matching">Pattern matching</h2>
<p>#+begin_src ruby</p>
<p>class AddressChecker
include Functional::PatternMatching
include Functional::Protocol
include Functional::TypeCheck</p>
<p>def msg &lsquo;You live in Moscow, Russia&rsquo; end</p>
<p>defn(:msg, _) do |addr|
&ldquo;You live in #{addr}&rdquo;
end</p>
<p>defn(:msg, _) { |addr| &ldquo;You live in #{addr.house}, #{addr.street},
#{addr.city}, #{addr.country}&rdquo; }
.when { |addr| Satisfy?(addr, :Address) }</p>
<p>defn(:msg, :name, _) do |addr|
&ldquo;Somebody live in #{addr}&rdquo;
end</p>
<p>defn(:msg, _) { |zip| &ldquo;Your zip is #{zip}&rdquo; }.when { |addr| Type?(addr, Fixnum) }
end #+end_src</p>
<h2 id="conclusion">Conclusion</h2>
<p>If you like functional programming, and want to use it&rsquo;s patterns and
tools with Ruby, then you can use
<a href="https://github.com/jdantonio/functional-ruby">Functional Ruby</a> gem to
write code in more functional style. You can find more information in
<a href="http://jerrydantonio.com/functional-ruby/">API documentation</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Type checking ruby with contracts</title>
      <link>https://neiro.io/blog/2015-10-24-type-checking-for-ruby-with-contracts/</link>
      <pubDate>Sat, 24 Oct 2015 10:00:00 +0200</pubDate>
      <guid>https://neiro.io/blog/2015-10-24-type-checking-for-ruby-with-contracts/</guid>
      <description>&lt;p&gt;Ruby is dynamically and strong typed programming language. In the most&#xA;of the cases it gives you required level of type safety with minimal&#xA;code. But if you want build more secure applications or you&amp;rsquo;re like&#xA;static typing, then you need to check every variable or method for it&amp;rsquo;s&#xA;type or class:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;fail&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;I supposed it`s not a bar!&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;unless&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_a?&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Hi, bar!&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# Hi, bar!&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100_500&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# RuntimeError: I supposed it`s not a bar!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But what if you&amp;rsquo;re needing more complex type checking on multiple types&#xA;or conditions? Then you need to provide more boilerplate, defensive&#xA;code. If you&amp;rsquo;re want to make your type safety code much cleaner, there&#xA;is the &lt;a href=&#34;https://github.com/egonSchiele/contracts.ruby&#34;&gt;contracts&lt;/a&gt; library.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Ruby is dynamically and strong typed programming language. In the most
of the cases it gives you required level of type safety with minimal
code. But if you want build more secure applications or you&rsquo;re like
static typing, then you need to check every variable or method for it&rsquo;s
type or class:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl">
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">bar</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">  <span class="nb">fail</span> <span class="s1">&#39;I supposed it`s not a bar!&#39;</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">  <span class="k">unless</span> <span class="n">bar</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">String</span><span class="p">)</span> <span class="nb">p</span> <span class="s1">&#39;Hi, bar!&#39;</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl">
</span></span><span class="line"><span class="ln">7</span><span class="cl"><span class="n">foo</span> <span class="s1">&#39;bar&#39;</span> <span class="c1"># Hi, bar!</span>
</span></span><span class="line"><span class="ln">8</span><span class="cl"><span class="n">foo</span> <span class="mi">100_500</span> <span class="c1"># RuntimeError: I supposed it`s not a bar!</span></span></span></code></pre></div><p>But what if you&rsquo;re needing more complex type checking on multiple types
or conditions? Then you need to provide more boilerplate, defensive
code. If you&rsquo;re want to make your type safety code much cleaner, there
is the <a href="https://github.com/egonSchiele/contracts.ruby">contracts</a> library.</p>
<h2 id="contracts">Contracts</h2>
<p>What is a contract? It&rsquo;s a pattern, that comes from functional
programming world. In most cases this is one line of code before
function or method, that validates the arguments and validates return
value.</p>
<p>For example, there is a simple contract:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="nb">require</span> <span class="s1">&#39;contracts&#39;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="k">class</span> <span class="nc">Square</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">  <span class="kp">include</span> <span class="no">Contracts</span><span class="o">::</span><span class="no">Core</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">  <span class="kp">include</span> <span class="no">Contracts</span><span class="o">::</span><span class="no">Builtin</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">  <span class="no">Contract</span> <span class="no">Num</span> <span class="o">=&gt;</span> <span class="no">Num</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">area</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="n">a</span><span class="o">**</span><span class="mi">2</span> <span class="k">end</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="no">Square</span><span class="o">.</span><span class="n">area</span> <span class="mi">10</span> <span class="c1"># 100</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="no">Square</span><span class="o">.</span><span class="n">area</span> <span class="s1">&#39;a&#39;</span> <span class="c1"># ParamContractError: Contract violation for argument 1 of 1</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="no">Square</span><span class="o">.</span><span class="n">area</span> <span class="o">[]</span> <span class="c1"># ParamContractError: Contract violation for argument 1 of 1</span></span></span></code></pre></div><p>You can also use it on multiple arguments or returns:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="k">class</span> <span class="nc">Rectangle</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">  <span class="kp">include</span> <span class="no">Contracts</span><span class="o">::</span><span class="no">Core</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">  <span class="kp">include</span> <span class="no">Contracts</span><span class="o">::</span><span class="no">Builtin</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">  <span class="no">Contract</span> <span class="no">Num</span><span class="p">,</span> <span class="no">Num</span> <span class="o">=&gt;</span> <span class="no">Num</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">area</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="n">a</span> <span class="o">*</span> <span class="n">b</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="no">Rectangle</span><span class="o">.</span><span class="n">area</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span> <span class="c1"># 100</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="no">Rectangle</span><span class="o">.</span><span class="n">area</span> <span class="o">[]</span><span class="p">,</span> <span class="kp">false</span> <span class="c1"># ParamContractError: Contract violation for argument 1 of 2</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="no">Rectangle</span><span class="o">.</span><span class="n">area</span> <span class="mi">10</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span> <span class="c1"># ParamContractError: Contract violation for argument 2 of 2</span></span></span></code></pre></div><p>If you don&rsquo;t want to throw exception, you can easily override error
callback:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="no">Contract</span><span class="o">.</span><span class="n">override_failure_callback</span> <span class="k">do</span> <span class="o">|</span><span class="n">data</span><span class="o">|</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">  <span class="nb">puts</span> <span class="s1">&#39;IT`S AN OM~ ERROR!1&#39;</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">  <span class="nb">p</span> <span class="n">data</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="no">Rectangle</span><span class="o">.</span><span class="n">area</span> <span class="mi">10</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span> <span class="c1"># &#39;IT`S AN OM~ ERROR!1&#39;</span></span></span></code></pre></div><h2 id="custom-types">Custom types</h2>
<p><em>Contracts</em> library comes with many built-in type contracts:</p>
<ul>
<li>Basic types: <code>Num, Pos, Neg, Nat, Bool, Any, None</code></li>
<li>Logical: <code>Maybe, Or, Xor, And, Not</code></li>
<li>Collections: <code>ArrayOf, SetOf, HashOf, RangeOf, Enum</code></li>
</ul>
<p>and others. But if your want to create your own types or check more
complex conditions, then you have to use lambdas:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="k">class</span> <span class="nc">CharCounter</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">  <span class="kp">include</span> <span class="no">Contracts</span><span class="o">::</span><span class="no">Core</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">  <span class="kp">include</span> <span class="no">Contracts</span><span class="o">::</span><span class="no">Builtin</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">  <span class="no">Char</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">char</span><span class="p">)</span> <span class="p">{</span> <span class="n">char</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">String</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">char</span><span class="o">.</span><span class="n">length</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">char</span> <span class="o">=~</span> <span class="sr">/\w/</span> <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">  <span class="no">Contract</span> <span class="no">Maybe</span><span class="o">[</span><span class="nb">String</span><span class="o">]</span><span class="p">,</span> <span class="no">Char</span> <span class="o">=&gt;</span> <span class="no">Num</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">count_chars</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="n">ch</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="n">str</span><span class="o">.</span><span class="n">count</span> <span class="n">ch</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="no">CharCounter</span><span class="o">.</span><span class="n">count_chars</span> <span class="s1">&#39;hello&#39;</span><span class="p">,</span> <span class="s1">&#39;N&#39;</span> <span class="c1"># 0</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="no">CharCounter</span><span class="o">.</span><span class="n">count_chars</span> <span class="s1">&#39;hello&#39;</span><span class="p">,</span> <span class="s1">&#39;l&#39;</span> <span class="c1"># 2</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="no">CharCounter</span><span class="o">.</span><span class="n">count_chars</span> <span class="s1">&#39;hello&#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span> <span class="c1"># ParamContractError: Contract violation for argument 2 of 2</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="no">CharCounter</span><span class="o">.</span><span class="n">count_chars</span> <span class="s1">&#39;llo&#39;</span><span class="p">,</span> <span class="s1">&#39;llo&#39;</span> <span class="c1"># ParamContractError: Contract violation for argument 2 of 2</span></span></span></code></pre></div><h2 id="pattern-matching">Pattern matching</h2>
<p>Pattern matching, like a contract, comes from functional programming.
You can use your contracts to test if your method matches pattern or
not. For example, let&rsquo;s find a factorial of number with contracts:</p>
<p>#+begin_src ruby
class Factorial
include Contracts::Core
include Contracts::Builtin</p>
<p>Contract 0 =&gt; 1
def self.factorial(_n)
1
end</p>
<p>Contract Num =&gt; Num
def self.factorial(n)
n * factorial(n - 1)
end
end</p>
<p>Factorial.factorial 0 # 0
Factorial.factorial 10 # 3628800
Factorial.factorial &lsquo;a&rsquo; # ContractError: Contract violation for argument 1 of 1 #+end_src</p>
<h2 id="conclusion">Conclusion</h2>
<p>Ruby has simple and powerful type system, but if it&rsquo;s not enough or you
want to use safety type checking and you don&rsquo;t like to write tons of a
defensive code, then you may like <em>Contracts</em> library. Contracts allows
you to check many types, conditions for your class methods much cleaner
and simpler. Also you can define your own types or conditions with plain
Ruby lambdas, and then use them for pattern-matching.</p>
<p>If you&rsquo;re like it and want to know more,
<a href="http://egonschiele.github.io/contracts.ruby/">there is Ruby contracts
tutorial</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Type checking ruby with contracts</title>
      <link>https://neiro.io/posts/2015-10-24-type-checking-for-ruby-with-contracts/</link>
      <pubDate>Sat, 24 Oct 2015 10:00:00 +0200</pubDate>
      <guid>https://neiro.io/posts/2015-10-24-type-checking-for-ruby-with-contracts/</guid>
      <description>&lt;p&gt;Ruby is dynamically and strong typed programming language. In the most&#xA;of the cases it gives you required level of type safety with minimal&#xA;code. But if you want build more secure applications or you&amp;rsquo;re like&#xA;static typing, then you need to check every variable or method for it&amp;rsquo;s&#xA;type or class:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;fail&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;I supposed it`s not a bar!&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;unless&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_a?&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Hi, bar!&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# Hi, bar!&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100_500&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# RuntimeError: I supposed it`s not a bar!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But what if you&amp;rsquo;re needing more complex type checking on multiple types&#xA;or conditions? Then you need to provide more boilerplate, defensive&#xA;code. If you&amp;rsquo;re want to make your type safety code much cleaner, there&#xA;is the &lt;a href=&#34;https://github.com/egonSchiele/contracts.ruby&#34;&gt;contracts&lt;/a&gt; library.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Ruby is dynamically and strong typed programming language. In the most
of the cases it gives you required level of type safety with minimal
code. But if you want build more secure applications or you&rsquo;re like
static typing, then you need to check every variable or method for it&rsquo;s
type or class:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl">
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">bar</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">  <span class="nb">fail</span> <span class="s1">&#39;I supposed it`s not a bar!&#39;</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">  <span class="k">unless</span> <span class="n">bar</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">String</span><span class="p">)</span> <span class="nb">p</span> <span class="s1">&#39;Hi, bar!&#39;</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl">
</span></span><span class="line"><span class="ln">7</span><span class="cl"><span class="n">foo</span> <span class="s1">&#39;bar&#39;</span> <span class="c1"># Hi, bar!</span>
</span></span><span class="line"><span class="ln">8</span><span class="cl"><span class="n">foo</span> <span class="mi">100_500</span> <span class="c1"># RuntimeError: I supposed it`s not a bar!</span></span></span></code></pre></div><p>But what if you&rsquo;re needing more complex type checking on multiple types
or conditions? Then you need to provide more boilerplate, defensive
code. If you&rsquo;re want to make your type safety code much cleaner, there
is the <a href="https://github.com/egonSchiele/contracts.ruby">contracts</a> library.</p>
<h2 id="contracts">Contracts</h2>
<p>What is a contract? It&rsquo;s a pattern, that comes from functional
programming world. In most cases this is one line of code before
function or method, that validates the arguments and validates return
value.</p>
<p>For example, there is a simple contract:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="nb">require</span> <span class="s1">&#39;contracts&#39;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="k">class</span> <span class="nc">Square</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">  <span class="kp">include</span> <span class="no">Contracts</span><span class="o">::</span><span class="no">Core</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">  <span class="kp">include</span> <span class="no">Contracts</span><span class="o">::</span><span class="no">Builtin</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">  <span class="no">Contract</span> <span class="no">Num</span> <span class="o">=&gt;</span> <span class="no">Num</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">area</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="n">a</span><span class="o">**</span><span class="mi">2</span> <span class="k">end</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="no">Square</span><span class="o">.</span><span class="n">area</span> <span class="mi">10</span> <span class="c1"># 100</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="no">Square</span><span class="o">.</span><span class="n">area</span> <span class="s1">&#39;a&#39;</span> <span class="c1"># ParamContractError: Contract violation for argument 1 of 1</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="no">Square</span><span class="o">.</span><span class="n">area</span> <span class="o">[]</span> <span class="c1"># ParamContractError: Contract violation for argument 1 of 1</span></span></span></code></pre></div><p>You can also use it on multiple arguments or returns:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="k">class</span> <span class="nc">Rectangle</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">  <span class="kp">include</span> <span class="no">Contracts</span><span class="o">::</span><span class="no">Core</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">  <span class="kp">include</span> <span class="no">Contracts</span><span class="o">::</span><span class="no">Builtin</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">  <span class="no">Contract</span> <span class="no">Num</span><span class="p">,</span> <span class="no">Num</span> <span class="o">=&gt;</span> <span class="no">Num</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">area</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="n">a</span> <span class="o">*</span> <span class="n">b</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="no">Rectangle</span><span class="o">.</span><span class="n">area</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span> <span class="c1"># 100</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="no">Rectangle</span><span class="o">.</span><span class="n">area</span> <span class="o">[]</span><span class="p">,</span> <span class="kp">false</span> <span class="c1"># ParamContractError: Contract violation for argument 1 of 2</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="no">Rectangle</span><span class="o">.</span><span class="n">area</span> <span class="mi">10</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span> <span class="c1"># ParamContractError: Contract violation for argument 2 of 2</span></span></span></code></pre></div><p>If you don&rsquo;t want to throw exception, you can easily override error
callback:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="no">Contract</span><span class="o">.</span><span class="n">override_failure_callback</span> <span class="k">do</span> <span class="o">|</span><span class="n">data</span><span class="o">|</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">  <span class="nb">puts</span> <span class="s1">&#39;IT`S AN OM~ ERROR!1&#39;</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">  <span class="nb">p</span> <span class="n">data</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="no">Rectangle</span><span class="o">.</span><span class="n">area</span> <span class="mi">10</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span> <span class="c1"># &#39;IT`S AN OM~ ERROR!1&#39;</span></span></span></code></pre></div><h2 id="custom-types">Custom types</h2>
<p><em>Contracts</em> library comes with many built-in type contracts:</p>
<ul>
<li>Basic types: <code>Num, Pos, Neg, Nat, Bool, Any, None</code></li>
<li>Logical: <code>Maybe, Or, Xor, And, Not</code></li>
<li>Collections: <code>ArrayOf, SetOf, HashOf, RangeOf, Enum</code></li>
</ul>
<p>and others. But if your want to create your own types or check more
complex conditions, then you have to use lambdas:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="k">class</span> <span class="nc">CharCounter</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">  <span class="kp">include</span> <span class="no">Contracts</span><span class="o">::</span><span class="no">Core</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">  <span class="kp">include</span> <span class="no">Contracts</span><span class="o">::</span><span class="no">Builtin</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">  <span class="no">Char</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">char</span><span class="p">)</span> <span class="p">{</span> <span class="n">char</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">String</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">char</span><span class="o">.</span><span class="n">length</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">char</span> <span class="o">=~</span> <span class="sr">/\w/</span> <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">  <span class="no">Contract</span> <span class="no">Maybe</span><span class="o">[</span><span class="nb">String</span><span class="o">]</span><span class="p">,</span> <span class="no">Char</span> <span class="o">=&gt;</span> <span class="no">Num</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">count_chars</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="n">ch</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="n">str</span><span class="o">.</span><span class="n">count</span> <span class="n">ch</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="no">CharCounter</span><span class="o">.</span><span class="n">count_chars</span> <span class="s1">&#39;hello&#39;</span><span class="p">,</span> <span class="s1">&#39;N&#39;</span> <span class="c1"># 0</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="no">CharCounter</span><span class="o">.</span><span class="n">count_chars</span> <span class="s1">&#39;hello&#39;</span><span class="p">,</span> <span class="s1">&#39;l&#39;</span> <span class="c1"># 2</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="no">CharCounter</span><span class="o">.</span><span class="n">count_chars</span> <span class="s1">&#39;hello&#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span> <span class="c1"># ParamContractError: Contract violation for argument 2 of 2</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="no">CharCounter</span><span class="o">.</span><span class="n">count_chars</span> <span class="s1">&#39;llo&#39;</span><span class="p">,</span> <span class="s1">&#39;llo&#39;</span> <span class="c1"># ParamContractError: Contract violation for argument 2 of 2</span></span></span></code></pre></div><h2 id="pattern-matching">Pattern matching</h2>
<p>Pattern matching, like a contract, comes from functional programming.
You can use your contracts to test if your method matches pattern or
not. For example, let&rsquo;s find a factorial of number with contracts:</p>
<p>#+begin_src ruby
class Factorial
include Contracts::Core
include Contracts::Builtin</p>
<p>Contract 0 =&gt; 1
def self.factorial(_n)
1
end</p>
<p>Contract Num =&gt; Num
def self.factorial(n)
n * factorial(n - 1)
end
end</p>
<p>Factorial.factorial 0 # 0
Factorial.factorial 10 # 3628800
Factorial.factorial &lsquo;a&rsquo; # ContractError: Contract violation for argument 1 of 1 #+end_src</p>
<h2 id="conclusion">Conclusion</h2>
<p>Ruby has simple and powerful type system, but if it&rsquo;s not enough or you
want to use safety type checking and you don&rsquo;t like to write tons of a
defensive code, then you may like <em>Contracts</em> library. Contracts allows
you to check many types, conditions for your class methods much cleaner
and simpler. Also you can define your own types or conditions with plain
Ruby lambdas, and then use them for pattern-matching.</p>
<p>If you&rsquo;re like it and want to know more,
<a href="http://egonschiele.github.io/contracts.ruby/">there is Ruby contracts
tutorial</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Functional programming with Ramda.js</title>
      <link>https://neiro.io/blog/2015-09-05-functional-programming-with-ramda-js/</link>
      <pubDate>Sat, 05 Sep 2015 10:00:00 +0200</pubDate>
      <guid>https://neiro.io/blog/2015-09-05-functional-programming-with-ramda-js/</guid>
      <description>&lt;p&gt;JavaScript is one of the most dynamic, flexible programming&#xA;languages. It supports multiple programming paradigms - imperative,&#xA;object (prototype) oriented, scripting, and functional.&lt;br /&gt;&#xA;Let&amp;rsquo; see what JavaScript has common with functional programming&#xA;languages:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;First-class functions - functions are objects themselves&lt;/li&gt;&#xA;&lt;li&gt;Anonymous functions - functions can be unnamed and nested&lt;/li&gt;&#xA;&lt;li&gt;Closures - functions that refer to independent variables, that were&#xA;created in other scope&lt;/li&gt;&#xA;&lt;li&gt;Recursion - function can call itself&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;By the way, there are some significant differences:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>JavaScript is one of the most dynamic, flexible programming
languages. It supports multiple programming paradigms - imperative,
object (prototype) oriented, scripting, and functional.<br />
Let&rsquo; see what JavaScript has common with functional programming
languages:</p>
<ul>
<li>First-class functions - functions are objects themselves</li>
<li>Anonymous functions - functions can be unnamed and nested</li>
<li>Closures - functions that refer to independent variables, that were
created in other scope</li>
<li>Recursion - function can call itself</li>
</ul>
<p>By the way, there are some significant differences:</p>
<ul>
<li>Immutability - objects, functions in JavaScript can be modified after
creation</li>
<li>Pure functions - JavaScript functions often depends on outside scope,
and it&rsquo;s hard to create function that always returns the same result
with given same parameters</li>
<li>Strong (and static) typing - JavaScript allows use a value of one type
as if it were a value of another type, and has not static typing
system</li>
</ul>
<p>JavaScript ecosystem has great tools for advanced use of functional
programming features, such as <em>Underscore</em> and <em>Lodash</em> - most popular
toolkit libraries. But if you want use library, that was specifically
designed for functional programming, you may have to look at
<a href="http://ramdajs.com/0.17/index.html">Ramda.js</a> .</p>
<p>Ramda.js has some distinguishing features:</p>
<ul>
<li>It&rsquo;s designed in pure functional style, with immutability and
side-effects free functions, that helps you to write simple and
effective code.</li>
<li>Parameters in functions have the same order, with key params at first
and data at last</li>
<li>Ramda.js functions are automatically curried, that allows you to
easily build new functions from old ones</li>
</ul>
<p>To show examples of Ramda.js using, i will use io.js 3.2 and Babel, so
let&rsquo;s create new <em>.js</em> file:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="ch">#!/usr/bin/env babel-node
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="ch"></span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="kr">import</span> <span class="nx">R</span> <span class="nx">from</span> <span class="s1">&#39;ramda&#39;</span><span class="p">;</span></span></span></code></pre></div><p>Ramda.js API has some general use functions:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl">
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1">// Typing let str = &#39;test&#39;;
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nb">String</span><span class="p">,</span> <span class="nx">str</span><span class="p">);</span> <span class="c1">//=&gt; true // The same with currying
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nb">String</span><span class="p">)(</span><span class="nx">str</span><span class="p">);</span> <span class="c1">//=&gt; true
</span></span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">isString</span> <span class="o">=</span> <span class="nx">R</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nb">String</span><span class="p">);</span> <span class="nx">isString</span><span class="p">(</span><span class="s1">&#39;string&#39;</span><span class="p">);</span> <span class="c1">//=&gt; true
</span></span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">type</span><span class="p">(</span><span class="nx">isString</span><span class="p">);</span> <span class="c1">//=&gt; String
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="c1">// Math
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">500</span><span class="p">);</span> <span class="c1">//=&gt; 600
</span></span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="mi">100</span><span class="p">)(</span><span class="mi">500</span><span class="p">);</span> <span class="c1">//=&gt; 600
</span></span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">mean</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">]);</span> <span class="c1">//=&gt; 4 R.sum(R.range(1, 5)); //=&gt; 10
</span></span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="c1">// Logic
</span></span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">and</span><span class="p">(</span><span class="kc">true</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span> <span class="c1">//=&gt; false
</span></span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">and</span><span class="p">([])(</span><span class="mi">0</span><span class="p">);</span> <span class="c1">//=&gt; 0
</span></span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">not</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span><span class="c1">//=&gt; false
</span></span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">both</span><span class="p">(</span><span class="nx">isString</span><span class="p">,</span> <span class="nx">R</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nb">String</span><span class="p">))(</span><span class="nx">str</span><span class="p">);</span> <span class="c1">// =&gt; true
</span></span></span></code></pre></div><p>Like the <em>Underscore</em> and <em>Lodash</em>, Ramda has collection helper
functions:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl">
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1">// Lists
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">animals</span> <span class="o">=</span> <span class="p">[</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;goose&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;bird&#39;</span><span class="p">,</span> <span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;white&#39;</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;parrot&#39;</span><span class="p">,</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;bird&#39;</span><span class="p">,</span> <span class="nx">color</span><span class="o">:</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="s1">&#39;yellow&#39;</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;cat&#39;</span><span class="p">,</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;mammal&#39;</span><span class="p">,</span> <span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;grey&#39;</span> <span class="p">}];</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="nx">R</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">animal</span> <span class="p">=&gt;</span> <span class="nx">animal</span><span class="p">.</span><span class="nx">color</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="nx">animal</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="nx">animals</span><span class="p">);</span> <span class="c1">//=&gt; [
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="c1"></span><span class="s1">&#39;white goose&#39;</span><span class="p">,</span> <span class="s1">&#39;yellow parrot&#39;</span><span class="p">,</span> <span class="s1">&#39;grey cat&#39;</span> <span class="p">]</span> <span class="nx">R</span><span class="p">.</span><span class="nx">head</span><span class="p">(</span><span class="nx">animals</span><span class="p">).</span><span class="nx">name</span><span class="p">;</span> <span class="c1">//=&gt;
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="c1"></span><span class="nx">goose</span> <span class="nx">R</span><span class="p">.</span><span class="nx">last</span><span class="p">(</span><span class="nx">animals</span><span class="p">).</span><span class="nx">name</span><span class="p">;</span> <span class="c1">//=&gt; cat
</span></span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">uniq</span><span class="p">(</span><span class="nx">R</span><span class="p">.</span><span class="nx">pluck</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">,</span> <span class="nx">animals</span><span class="p">));</span> <span class="c1">//=&gt; [ &#39;bird&#39;, &#39;mammal&#39; ]
</span></span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">length</span><span class="p">(</span><span class="nx">R</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">animal</span> <span class="p">=&gt;</span> <span class="nx">animal</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;bird&#39;</span><span class="p">,</span> <span class="nx">animals</span><span class="p">));</span> <span class="c1">//=&gt; 2
</span></span></span></code></pre></div><p>And object helpers too:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl">
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1">// Objects let cat = { type: &#39;animal&#39;,
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="c1"></span><span class="nx">subclass</span><span class="o">:</span> <span class="s1">&#39;mammal&#39;</span><span class="p">,</span> <span class="nx">binomialName</span><span class="o">:</span> <span class="s1">&#39;Felis catus&#39;</span> <span class="p">};</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="nx">R</span><span class="p">.</span><span class="nx">assoc</span><span class="p">(</span><span class="s1">&#39;status&#39;</span><span class="p">,</span> <span class="s1">&#39;domesticated&#39;</span><span class="p">,</span> <span class="nx">cat</span><span class="p">).</span><span class="nx">status</span><span class="p">;</span> <span class="c1">//=&gt; domesticated
</span></span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">dissoc</span><span class="p">(</span><span class="s1">&#39;binomialName&#39;</span><span class="p">,</span> <span class="nx">cat</span><span class="p">).</span><span class="nx">binomialName</span><span class="p">;</span> <span class="c1">//=&gt; undefined
</span></span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">cat</span><span class="p">);</span> <span class="c1">//=&gt; [ &#39;type&#39;, &#39;subclass&#39;, &#39;binomialName&#39; ]
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">,</span> <span class="nx">cat</span><span class="p">);</span> <span class="c1">//=&gt; true
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">prop</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">,</span> <span class="nx">cat</span><span class="p">);</span> <span class="c1">//=&gt; animal
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">values</span><span class="p">(</span><span class="nx">cat</span><span class="p">);</span> <span class="c1">//=&gt; [ &#39;animal&#39;, &#39;mammal&#39;, &#39;felis catus&#39; ]
</span></span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="c1">// Object transformation
</span></span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">transformations</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="nx">R</span><span class="p">.</span><span class="nx">toUpper</span><span class="p">,</span> <span class="nx">binomialName</span><span class="o">:</span> <span class="nx">R</span><span class="p">.</span><span class="nx">toLower</span> <span class="p">}</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="nx">R</span><span class="p">.</span><span class="nx">evolve</span><span class="p">(</span><span class="nx">transformations</span><span class="p">,</span> <span class="nx">cat</span><span class="p">).</span><span class="nx">type</span><span class="p">;</span> <span class="c1">// =&gt; ANIMAL
</span></span></span></code></pre></div><p>But key point of Ramda.js is functions. Ramda allows you to easily
compose multiple functions in different orders:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="c1">// Compose and pipe R.join(&#39; and &#39;,
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">uniq</span><span class="p">(</span><span class="nx">R</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">R</span><span class="p">.</span><span class="nx">toUpper</span><span class="p">)(</span><span class="nx">R</span><span class="p">.</span><span class="nx">pluck</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">,</span> <span class="nx">animals</span><span class="p">))));</span> <span class="c1">//=&gt; BIRD and MAMMAL
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1">// Performs right-to-left function composition
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">compose</span><span class="p">(</span><span class="nx">R</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39; and &#39;</span><span class="p">),</span> <span class="nx">R</span><span class="p">.</span><span class="nx">uniq</span><span class="p">,</span> <span class="nx">R</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">R</span><span class="p">.</span><span class="nx">toUpper</span><span class="p">),</span> <span class="nx">R</span><span class="p">.</span><span class="nx">pluck</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">)</span> <span class="p">)(</span><span class="nx">animals</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="c1">//=&gt; BIRD and MAMMAL
</span></span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="ln">7</span><span class="cl"><span class="c1">// Performs left-to-right function composition
</span></span></span><span class="line"><span class="ln">8</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">R</span><span class="p">.</span><span class="nx">pluck</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">)</span> <span class="nx">R</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">R</span><span class="p">.</span><span class="nx">toUpper</span><span class="p">),</span> <span class="nx">R</span><span class="p">.</span><span class="nx">uniq</span><span class="p">,</span> <span class="nx">R</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39; and &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">9</span><span class="cl"><span class="p">)(</span><span class="nx">animals</span><span class="p">);</span> <span class="c1">//=&gt; BIRD and MAMMAL
</span></span></span></code></pre></div><p>Another power of Ramda is currying. Currying is the process of
translating evaluation of function that takes multiple parameters in
evaluating a sequence of functions, each with one argument.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="kd">let</span> <span class="nx">tripleMultiply</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">a</span> <span class="o">*</span> <span class="nx">b</span> <span class="o">*</span> <span class="nx">c</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nx">tripleMultiply</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span> <span class="c1">//=&gt; 54
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"></span><span class="nx">tripleMultiply</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">9</span><span class="p">)(</span><span class="mi">2</span><span class="p">);</span> <span class="c1">//=&gt; TypeError: tripleMultiply(..) is not a function
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">curriedMultiply</span> <span class="o">=</span> <span class="nx">R</span><span class="p">.</span><span class="nx">curry</span><span class="p">(</span><span class="nx">tripleMultiply</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="nx">curriedMultiply</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">9</span><span class="p">)(</span><span class="mi">2</span><span class="p">);</span> <span class="c1">//=&gt; 54
</span></span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="c1"></span><span class="nx">curriedMultiply</span><span class="p">(</span><span class="mi">3</span><span class="p">)(</span><span class="mi">9</span><span class="p">)(</span><span class="mi">2</span><span class="p">);</span> <span class="c1">//=&gt; 54
</span></span></span></code></pre></div><p>Pattern matching is also available through <em>R.cond</em>. That allows you to
check sequence of conditions to match different patterns:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="kd">let</span> <span class="nx">checkNumber</span> <span class="o">=</span> <span class="nx">R</span><span class="p">.</span><span class="nx">cond</span><span class="p">([</span> <span class="p">[</span><span class="nx">R</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nb">Number</span><span class="p">),</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nx">R</span><span class="p">.</span><span class="nx">identity</span><span class="p">],</span> <span class="p">[</span><span class="nx">R</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nb">String</span><span class="p">),</span> <span class="nb">parseInt</span><span class="p">],</span> <span class="p">[</span><span class="nx">R</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nb">Boolean</span><span class="p">),</span> <span class="nb">Number</span><span class="p">],</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="p">[</span><span class="nx">R</span><span class="p">.</span><span class="nx">isEmpty</span><span class="p">,</span> <span class="nx">R</span><span class="p">.</span><span class="nx">always</span><span class="p">(</span><span class="mi">0</span><span class="p">)],</span> <span class="p">[</span><span class="nx">R</span><span class="p">.</span><span class="nx">T</span><span class="p">,</span> <span class="nx">R</span><span class="p">.</span><span class="nx">always</span><span class="p">(</span><span class="kc">NaN</span><span class="p">)]]);</span> <span class="nx">checkNumber</span><span class="p">(</span><span class="mi">100500</span><span class="p">);</span> <span class="c1">//=&gt; 100500
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="c1"></span><span class="nx">checkNumber</span><span class="p">(</span><span class="s1">&#39;146%&#39;</span><span class="p">);</span> <span class="c1">//=&gt; 146
</span></span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="c1"></span><span class="nx">checkNumber</span><span class="p">(</span><span class="s1">&#39;Hodor&#39;</span><span class="p">);</span> <span class="c1">//=&gt; NaN
</span></span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="c1"></span><span class="nx">checkNumber</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span> <span class="c1">//=&gt; 1
</span></span></span><span class="line"><span class="ln">7</span><span class="cl"><span class="c1"></span><span class="nx">checkNumber</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span> <span class="c1">//=&gt; 0
</span></span></span><span class="line"><span class="ln">8</span><span class="cl"><span class="c1"></span><span class="nx">checkNumber</span><span class="p">([]);</span> <span class="c1">//=&gt; 0
</span></span></span><span class="line"><span class="ln">9</span><span class="cl"><span class="c1"></span><span class="nx">checkNumber</span><span class="p">([</span><span class="s1">&#39;test&#39;</span><span class="p">]);</span> <span class="c1">//=&gt; NaN
</span></span></span></code></pre></div><p>Ramda.js is one of the best functional programming libraries that exists
in JavaScript ecosystem. It can completely replace <em>Underscore</em>,
<em>Lodash</em> in your project with own object, lists and others helpers.
Immutability, currying and composing allows you to write both efficient
and simple code in pure functional style.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Functional programming with Ramda.js</title>
      <link>https://neiro.io/posts/2015-09-05-functional-programming-with-ramda-js/</link>
      <pubDate>Sat, 05 Sep 2015 10:00:00 +0200</pubDate>
      <guid>https://neiro.io/posts/2015-09-05-functional-programming-with-ramda-js/</guid>
      <description>&lt;p&gt;JavaScript is one of the most dynamic, flexible programming&#xA;languages. It supports multiple programming paradigms - imperative,&#xA;object (prototype) oriented, scripting, and functional.&lt;br /&gt;&#xA;Let&amp;rsquo; see what JavaScript has common with functional programming&#xA;languages:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;First-class functions - functions are objects themselves&lt;/li&gt;&#xA;&lt;li&gt;Anonymous functions - functions can be unnamed and nested&lt;/li&gt;&#xA;&lt;li&gt;Closures - functions that refer to independent variables, that were&#xA;created in other scope&lt;/li&gt;&#xA;&lt;li&gt;Recursion - function can call itself&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;By the way, there are some significant differences:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>JavaScript is one of the most dynamic, flexible programming
languages. It supports multiple programming paradigms - imperative,
object (prototype) oriented, scripting, and functional.<br />
Let&rsquo; see what JavaScript has common with functional programming
languages:</p>
<ul>
<li>First-class functions - functions are objects themselves</li>
<li>Anonymous functions - functions can be unnamed and nested</li>
<li>Closures - functions that refer to independent variables, that were
created in other scope</li>
<li>Recursion - function can call itself</li>
</ul>
<p>By the way, there are some significant differences:</p>
<ul>
<li>Immutability - objects, functions in JavaScript can be modified after
creation</li>
<li>Pure functions - JavaScript functions often depends on outside scope,
and it&rsquo;s hard to create function that always returns the same result
with given same parameters</li>
<li>Strong (and static) typing - JavaScript allows use a value of one type
as if it were a value of another type, and has not static typing
system</li>
</ul>
<p>JavaScript ecosystem has great tools for advanced use of functional
programming features, such as <em>Underscore</em> and <em>Lodash</em> - most popular
toolkit libraries. But if you want use library, that was specifically
designed for functional programming, you may have to look at
<a href="http://ramdajs.com/0.17/index.html">Ramda.js</a> .</p>
<p>Ramda.js has some distinguishing features:</p>
<ul>
<li>It&rsquo;s designed in pure functional style, with immutability and
side-effects free functions, that helps you to write simple and
effective code.</li>
<li>Parameters in functions have the same order, with key params at first
and data at last</li>
<li>Ramda.js functions are automatically curried, that allows you to
easily build new functions from old ones</li>
</ul>
<p>To show examples of Ramda.js using, i will use io.js 3.2 and Babel, so
let&rsquo;s create new <em>.js</em> file:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="ch">#!/usr/bin/env babel-node
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="ch"></span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="kr">import</span> <span class="nx">R</span> <span class="nx">from</span> <span class="s1">&#39;ramda&#39;</span><span class="p">;</span></span></span></code></pre></div><p>Ramda.js API has some general use functions:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl">
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1">// Typing let str = &#39;test&#39;;
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nb">String</span><span class="p">,</span> <span class="nx">str</span><span class="p">);</span> <span class="c1">//=&gt; true // The same with currying
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nb">String</span><span class="p">)(</span><span class="nx">str</span><span class="p">);</span> <span class="c1">//=&gt; true
</span></span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">isString</span> <span class="o">=</span> <span class="nx">R</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nb">String</span><span class="p">);</span> <span class="nx">isString</span><span class="p">(</span><span class="s1">&#39;string&#39;</span><span class="p">);</span> <span class="c1">//=&gt; true
</span></span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">type</span><span class="p">(</span><span class="nx">isString</span><span class="p">);</span> <span class="c1">//=&gt; String
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="c1">// Math
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">500</span><span class="p">);</span> <span class="c1">//=&gt; 600
</span></span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="mi">100</span><span class="p">)(</span><span class="mi">500</span><span class="p">);</span> <span class="c1">//=&gt; 600
</span></span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">mean</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">]);</span> <span class="c1">//=&gt; 4 R.sum(R.range(1, 5)); //=&gt; 10
</span></span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="c1">// Logic
</span></span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">and</span><span class="p">(</span><span class="kc">true</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span> <span class="c1">//=&gt; false
</span></span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">and</span><span class="p">([])(</span><span class="mi">0</span><span class="p">);</span> <span class="c1">//=&gt; 0
</span></span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">not</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span><span class="c1">//=&gt; false
</span></span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">both</span><span class="p">(</span><span class="nx">isString</span><span class="p">,</span> <span class="nx">R</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nb">String</span><span class="p">))(</span><span class="nx">str</span><span class="p">);</span> <span class="c1">// =&gt; true
</span></span></span></code></pre></div><p>Like the <em>Underscore</em> and <em>Lodash</em>, Ramda has collection helper
functions:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl">
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1">// Lists
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">animals</span> <span class="o">=</span> <span class="p">[</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;goose&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;bird&#39;</span><span class="p">,</span> <span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;white&#39;</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;parrot&#39;</span><span class="p">,</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;bird&#39;</span><span class="p">,</span> <span class="nx">color</span><span class="o">:</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="s1">&#39;yellow&#39;</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;cat&#39;</span><span class="p">,</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;mammal&#39;</span><span class="p">,</span> <span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;grey&#39;</span> <span class="p">}];</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="nx">R</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">animal</span> <span class="p">=&gt;</span> <span class="nx">animal</span><span class="p">.</span><span class="nx">color</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="nx">animal</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="nx">animals</span><span class="p">);</span> <span class="c1">//=&gt; [
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="c1"></span><span class="s1">&#39;white goose&#39;</span><span class="p">,</span> <span class="s1">&#39;yellow parrot&#39;</span><span class="p">,</span> <span class="s1">&#39;grey cat&#39;</span> <span class="p">]</span> <span class="nx">R</span><span class="p">.</span><span class="nx">head</span><span class="p">(</span><span class="nx">animals</span><span class="p">).</span><span class="nx">name</span><span class="p">;</span> <span class="c1">//=&gt;
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="c1"></span><span class="nx">goose</span> <span class="nx">R</span><span class="p">.</span><span class="nx">last</span><span class="p">(</span><span class="nx">animals</span><span class="p">).</span><span class="nx">name</span><span class="p">;</span> <span class="c1">//=&gt; cat
</span></span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">uniq</span><span class="p">(</span><span class="nx">R</span><span class="p">.</span><span class="nx">pluck</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">,</span> <span class="nx">animals</span><span class="p">));</span> <span class="c1">//=&gt; [ &#39;bird&#39;, &#39;mammal&#39; ]
</span></span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">length</span><span class="p">(</span><span class="nx">R</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">animal</span> <span class="p">=&gt;</span> <span class="nx">animal</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;bird&#39;</span><span class="p">,</span> <span class="nx">animals</span><span class="p">));</span> <span class="c1">//=&gt; 2
</span></span></span></code></pre></div><p>And object helpers too:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl">
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1">// Objects let cat = { type: &#39;animal&#39;,
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="c1"></span><span class="nx">subclass</span><span class="o">:</span> <span class="s1">&#39;mammal&#39;</span><span class="p">,</span> <span class="nx">binomialName</span><span class="o">:</span> <span class="s1">&#39;Felis catus&#39;</span> <span class="p">};</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="nx">R</span><span class="p">.</span><span class="nx">assoc</span><span class="p">(</span><span class="s1">&#39;status&#39;</span><span class="p">,</span> <span class="s1">&#39;domesticated&#39;</span><span class="p">,</span> <span class="nx">cat</span><span class="p">).</span><span class="nx">status</span><span class="p">;</span> <span class="c1">//=&gt; domesticated
</span></span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">dissoc</span><span class="p">(</span><span class="s1">&#39;binomialName&#39;</span><span class="p">,</span> <span class="nx">cat</span><span class="p">).</span><span class="nx">binomialName</span><span class="p">;</span> <span class="c1">//=&gt; undefined
</span></span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">cat</span><span class="p">);</span> <span class="c1">//=&gt; [ &#39;type&#39;, &#39;subclass&#39;, &#39;binomialName&#39; ]
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">,</span> <span class="nx">cat</span><span class="p">);</span> <span class="c1">//=&gt; true
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">prop</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">,</span> <span class="nx">cat</span><span class="p">);</span> <span class="c1">//=&gt; animal
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">values</span><span class="p">(</span><span class="nx">cat</span><span class="p">);</span> <span class="c1">//=&gt; [ &#39;animal&#39;, &#39;mammal&#39;, &#39;felis catus&#39; ]
</span></span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="c1">// Object transformation
</span></span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">transformations</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="nx">R</span><span class="p">.</span><span class="nx">toUpper</span><span class="p">,</span> <span class="nx">binomialName</span><span class="o">:</span> <span class="nx">R</span><span class="p">.</span><span class="nx">toLower</span> <span class="p">}</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="nx">R</span><span class="p">.</span><span class="nx">evolve</span><span class="p">(</span><span class="nx">transformations</span><span class="p">,</span> <span class="nx">cat</span><span class="p">).</span><span class="nx">type</span><span class="p">;</span> <span class="c1">// =&gt; ANIMAL
</span></span></span></code></pre></div><p>But key point of Ramda.js is functions. Ramda allows you to easily
compose multiple functions in different orders:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="c1">// Compose and pipe R.join(&#39; and &#39;,
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">uniq</span><span class="p">(</span><span class="nx">R</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">R</span><span class="p">.</span><span class="nx">toUpper</span><span class="p">)(</span><span class="nx">R</span><span class="p">.</span><span class="nx">pluck</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">,</span> <span class="nx">animals</span><span class="p">))));</span> <span class="c1">//=&gt; BIRD and MAMMAL
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1">// Performs right-to-left function composition
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">compose</span><span class="p">(</span><span class="nx">R</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39; and &#39;</span><span class="p">),</span> <span class="nx">R</span><span class="p">.</span><span class="nx">uniq</span><span class="p">,</span> <span class="nx">R</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">R</span><span class="p">.</span><span class="nx">toUpper</span><span class="p">),</span> <span class="nx">R</span><span class="p">.</span><span class="nx">pluck</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">)</span> <span class="p">)(</span><span class="nx">animals</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="c1">//=&gt; BIRD and MAMMAL
</span></span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="ln">7</span><span class="cl"><span class="c1">// Performs left-to-right function composition
</span></span></span><span class="line"><span class="ln">8</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">R</span><span class="p">.</span><span class="nx">pluck</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">)</span> <span class="nx">R</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">R</span><span class="p">.</span><span class="nx">toUpper</span><span class="p">),</span> <span class="nx">R</span><span class="p">.</span><span class="nx">uniq</span><span class="p">,</span> <span class="nx">R</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39; and &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">9</span><span class="cl"><span class="p">)(</span><span class="nx">animals</span><span class="p">);</span> <span class="c1">//=&gt; BIRD and MAMMAL
</span></span></span></code></pre></div><p>Another power of Ramda is currying. Currying is the process of
translating evaluation of function that takes multiple parameters in
evaluating a sequence of functions, each with one argument.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="kd">let</span> <span class="nx">tripleMultiply</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">a</span> <span class="o">*</span> <span class="nx">b</span> <span class="o">*</span> <span class="nx">c</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nx">tripleMultiply</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span> <span class="c1">//=&gt; 54
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"></span><span class="nx">tripleMultiply</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">9</span><span class="p">)(</span><span class="mi">2</span><span class="p">);</span> <span class="c1">//=&gt; TypeError: tripleMultiply(..) is not a function
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">curriedMultiply</span> <span class="o">=</span> <span class="nx">R</span><span class="p">.</span><span class="nx">curry</span><span class="p">(</span><span class="nx">tripleMultiply</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="nx">curriedMultiply</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">9</span><span class="p">)(</span><span class="mi">2</span><span class="p">);</span> <span class="c1">//=&gt; 54
</span></span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="c1"></span><span class="nx">curriedMultiply</span><span class="p">(</span><span class="mi">3</span><span class="p">)(</span><span class="mi">9</span><span class="p">)(</span><span class="mi">2</span><span class="p">);</span> <span class="c1">//=&gt; 54
</span></span></span></code></pre></div><p>Pattern matching is also available through <em>R.cond</em>. That allows you to
check sequence of conditions to match different patterns:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="kd">let</span> <span class="nx">checkNumber</span> <span class="o">=</span> <span class="nx">R</span><span class="p">.</span><span class="nx">cond</span><span class="p">([</span> <span class="p">[</span><span class="nx">R</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nb">Number</span><span class="p">),</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nx">R</span><span class="p">.</span><span class="nx">identity</span><span class="p">],</span> <span class="p">[</span><span class="nx">R</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nb">String</span><span class="p">),</span> <span class="nb">parseInt</span><span class="p">],</span> <span class="p">[</span><span class="nx">R</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nb">Boolean</span><span class="p">),</span> <span class="nb">Number</span><span class="p">],</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="p">[</span><span class="nx">R</span><span class="p">.</span><span class="nx">isEmpty</span><span class="p">,</span> <span class="nx">R</span><span class="p">.</span><span class="nx">always</span><span class="p">(</span><span class="mi">0</span><span class="p">)],</span> <span class="p">[</span><span class="nx">R</span><span class="p">.</span><span class="nx">T</span><span class="p">,</span> <span class="nx">R</span><span class="p">.</span><span class="nx">always</span><span class="p">(</span><span class="kc">NaN</span><span class="p">)]]);</span> <span class="nx">checkNumber</span><span class="p">(</span><span class="mi">100500</span><span class="p">);</span> <span class="c1">//=&gt; 100500
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="c1"></span><span class="nx">checkNumber</span><span class="p">(</span><span class="s1">&#39;146%&#39;</span><span class="p">);</span> <span class="c1">//=&gt; 146
</span></span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="c1"></span><span class="nx">checkNumber</span><span class="p">(</span><span class="s1">&#39;Hodor&#39;</span><span class="p">);</span> <span class="c1">//=&gt; NaN
</span></span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="c1"></span><span class="nx">checkNumber</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span> <span class="c1">//=&gt; 1
</span></span></span><span class="line"><span class="ln">7</span><span class="cl"><span class="c1"></span><span class="nx">checkNumber</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span> <span class="c1">//=&gt; 0
</span></span></span><span class="line"><span class="ln">8</span><span class="cl"><span class="c1"></span><span class="nx">checkNumber</span><span class="p">([]);</span> <span class="c1">//=&gt; 0
</span></span></span><span class="line"><span class="ln">9</span><span class="cl"><span class="c1"></span><span class="nx">checkNumber</span><span class="p">([</span><span class="s1">&#39;test&#39;</span><span class="p">]);</span> <span class="c1">//=&gt; NaN
</span></span></span></code></pre></div><p>Ramda.js is one of the best functional programming libraries that exists
in JavaScript ecosystem. It can completely replace <em>Underscore</em>,
<em>Lodash</em> in your project with own object, lists and others helpers.
Immutability, currying and composing allows you to write both efficient
and simple code in pure functional style.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
