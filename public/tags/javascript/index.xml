<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Javascript on neiro blog</title>
    <link>https://neiro.io/tags/javascript/</link>
    <description>Recent content in Javascript on neiro blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <copyright>neiro Â© 2012-2025</copyright>
    <lastBuildDate>Thu, 28 Jan 2016 10:00:00 +0100</lastBuildDate>
    <atom:link href="https://neiro.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>High level Node.JS streams</title>
      <link>https://neiro.io/blog/2016-01-28-high-level-nodejs-streams-with-highland/</link>
      <pubDate>Thu, 28 Jan 2016 10:00:00 +0100</pubDate>
      <guid>https://neiro.io/blog/2016-01-28-high-level-nodejs-streams-with-highland/</guid>
      <description>&lt;p&gt;Node.js has a simple and powerful stream API. Streams in Node.js are&#xA;unix pipes that let you perform asynchronous I/O operations by reading&#xA;source data and pipe it to destination. If your application operates not&#xA;with streams only, but promises, callbacks or synchronous code, you may&#xA;want to use more deeper abstraction that fits your needs. In this case&#xA;you may take a look at &lt;a href=&#34;http://highlandjs.org/&#34;&gt;Highland&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;highland&#34;&gt;Highland&lt;/h2&gt;&#xA;&lt;p&gt;Highland library allows you to manage asynchronous and synchronous code&#xA;easily both in Node.js and in the browser. With Highland you can simple&#xA;switch between synchronous and asynchronous data sources without&#xA;re-writing your code. You can install Highland with NPM:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Node.js has a simple and powerful stream API. Streams in Node.js are
unix pipes that let you perform asynchronous I/O operations by reading
source data and pipe it to destination. If your application operates not
with streams only, but promises, callbacks or synchronous code, you may
want to use more deeper abstraction that fits your needs. In this case
you may take a look at <a href="http://highlandjs.org/">Highland</a>.</p>
<h2 id="highland">Highland</h2>
<p>Highland library allows you to manage asynchronous and synchronous code
easily both in Node.js and in the browser. With Highland you can simple
switch between synchronous and asynchronous data sources without
re-writing your code. You can install Highland with NPM:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln">1</span><span class="cl"> npm install highland</span></span></code></pre></div><p>and require or import it as yet another Node.js module:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="kr">import</span> <span class="nx">_</span> <span class="nx">from</span> <span class="s1">&#39;highland&#39;</span><span class="p">;</span></span></span></code></pre></div><h2 id="general-examples">General examples</h2>
<p>Converting from arrays to Highland Streams:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="nx">_</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]).</span><span class="nx">toArray</span><span class="p">(</span><span class="nx">xs</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">xs</span><span class="p">));</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1">// 0, 1, 2
</span></span></span></code></pre></div><p>Map and reduce over a stream:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="nx">_</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]).</span><span class="nx">map</span><span class="p">(</span><span class="nx">x</span> <span class="p">=&gt;</span> <span class="nx">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">).</span><span class="nx">reduce</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nx">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">a</span> <span class="o">*</span> <span class="nx">b</span><span class="p">);</span> <span class="c1">// [6]
</span></span></span></code></pre></div><p>Reading files in parallel:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="kr">import</span> <span class="nx">fs</span> <span class="nx">from</span> <span class="s1">&#39;fs&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="kr">const</span> <span class="nx">readFile</span> <span class="o">=</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="sr">/.wrapCallback(fs.readFile); const stream = /</span><span class="p">([</span><span class="s1">&#39;./.babelrc&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="s1">&#39;./.eslintrc&#39;</span><span class="p">]).</span><span class="nx">map</span><span class="p">(</span><span class="nx">readFile</span><span class="p">).</span><span class="nx">parallel</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span></span></span></code></pre></div><p>Handling errors:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="nx">stream</span><span class="p">.</span><span class="nx">errors</span><span class="p">((</span><span class="nx">err</span><span class="p">,</span> <span class="nx">rethrow</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span> <span class="p">});</span></span></span></code></pre></div><p>Pipe to Node.js streams:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="nx">stream</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">outputStream</span><span class="p">);</span></span></span></code></pre></div><h2 id="stream-objects">Stream objects</h2>
<p>Constructor:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="kr">const</span> <span class="nx">stream</span> <span class="o">=</span> <span class="nx">_</span><span class="p">(</span><span class="nx">source</span><span class="p">);</span> <span class="c1">// source - Array/Generator/Node Stream/Event Emitter/Promise/Iterator/Iterable
</span></span></span></code></pre></div><p>General functions:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="nx">stream</span><span class="p">.</span><span class="nx">destroy</span><span class="p">();</span> <span class="nx">stream</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nx">stream</span><span class="p">.</span><span class="nx">pause</span><span class="p">();</span> <span class="nx">stream</span><span class="p">.</span><span class="nx">resume</span><span class="p">();</span> <span class="nx">stream</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// Write x value to
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"></span><span class="nx">stream</span></span></span></code></pre></div><h2 id="transformations">Transformations</h2>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl"> <span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]).</span><span class="nx">append</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span> <span class="c1">// [0, 1, 2, 3]
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1"></span> <span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">]).</span><span class="nx">compact</span><span class="p">();</span> <span class="c1">// [1, 2]
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="c1"></span> <span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">]).</span><span class="nx">filter</span><span class="p">(</span><span class="nx">x</span> <span class="p">=&gt;</span> <span class="nx">x</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="o">&lt;=</span> <span class="mi">3</span><span class="p">);</span> <span class="c1">// [1, 2]
</span></span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="c1"></span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]).</span><span class="nx">head</span><span class="p">();</span> <span class="c1">// 1
</span></span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="c1"></span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]).</span><span class="nx">last</span><span class="p">();</span> <span class="c1">// 3
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="c1"></span><span class="p">([</span><span class="s1">&#39;ABC&#39;</span><span class="p">]).</span><span class="nx">invoke</span><span class="p">(</span><span class="s1">&#39;toLowerCase&#39;</span><span class="p">,</span> <span class="p">[]);</span> <span class="c1">// abc
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="c1"></span><span class="p">([{</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">}]).</span><span class="nx">pick</span><span class="p">([</span><span class="s1">&#39;foo&#39;</span><span class="p">]);</span> <span class="c1">// { foo: &#39;bar&#39; }
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="c1"></span><span class="p">([{</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">}]).</span><span class="nx">pluck</span><span class="p">([</span><span class="s1">&#39;foo&#39;</span><span class="p">]);</span> <span class="c1">// bar
</span></span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="c1"></span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]).</span><span class="nx">slice</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span> <span class="c1">// [2, 3]
</span></span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="c1"></span><span class="p">([</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">]).</span><span class="nx">sort</span><span class="p">();</span> <span class="c1">// [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]
</span></span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="c1"></span><span class="nx">_</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]).</span><span class="nx">uniq</span><span class="p">();</span> <span class="c1">// [0, 2, 3]
</span></span></span></code></pre></div><h2 id="high-order-streams">High-order Streams</h2>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">]).</span><span class="nx">concat</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]);</span> <span class="c1">// [0, 1, 2, 3]
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1"></span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="mi">3</span><span class="p">]]]).</span><span class="nx">flatten</span><span class="p">();</span> <span class="c1">// [0, 1, 2, 3]
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"></span><span class="p">(</span><span class="sr">/([0, 1]), /</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])).</span><span class="nx">sequence</span><span class="p">();</span> <span class="c1">// [0, 1, 2, 3]
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="c1"></span><span class="p">([</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">]).</span><span class="nx">zip</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]);</span> <span class="c1">// =&gt; [&#39;a&#39;, 1], [&#39;b&#39;, 2]
</span></span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="kr">const</span> <span class="nx">fork</span> <span class="o">=</span> <span class="nx">stream</span><span class="p">.</span><span class="nx">fork</span><span class="p">();</span> <span class="kr">const</span> <span class="nx">observer</span> <span class="o">=</span> <span class="nx">stream</span><span class="p">.</span><span class="nx">observe</span><span class="p">();</span>
</span></span><span class="line"><span class="ln">7</span><span class="cl"><span class="nx">fork</span><span class="p">.</span><span class="nx">resume</span><span class="p">();</span></span></span></code></pre></div><h2 id="objects">Objects</h2>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="p">.</span><span class="nx">extend</span><span class="p">({</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;foo&#39;</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;obj&#39;</span> <span class="p">});</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1">// { name: &#39;foo&#39;, type: &#39;obj&#39; }
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"></span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">});</span> <span class="c1">// bar
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="c1"></span><span class="p">.</span><span class="nx">keys</span><span class="p">({</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">});</span> <span class="c1">// [&#39;foo&#39;]
</span></span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="c1"></span><span class="p">.</span><span class="nx">values</span><span class="p">({</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">});</span> <span class="c1">// [&#39;bar&#39;]
</span></span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="c1"></span><span class="nx">_</span><span class="p">.</span><span class="nx">pairs</span><span class="p">({</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">});</span> <span class="c1">// [&#39;foo&#39;, &#39;bar&#39;]
</span></span></span></code></pre></div><h2 id="utils">Utils</h2>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="p">.</span><span class="nx">isStream</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]);</span> <span class="c1">// false
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1"></span><span class="p">.</span><span class="nx">isStream</span><span class="p">(</span><span class="nx">stream</span><span class="p">);</span> <span class="c1">// true
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]).</span><span class="nx">each</span><span class="p">(.</span><span class="nx">log</span><span class="p">);</span> <span class="c1">// 1, 2, 3
</span></span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="kr">const</span> <span class="nx">readFile</span> <span class="o">=</span> <span class="p">.</span><span class="nx">wrapCallback</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">);</span> <span class="c1">// Wraps callback to Highland stream
</span></span></span><span class="line"><span class="ln">7</span><span class="cl"><span class="c1"></span><span class="p">.</span><span class="nx">isStream</span><span class="p">(</span><span class="nx">readFile</span><span class="p">);</span> <span class="c1">// true
</span></span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>If you need to handle your synchronous and asynchronous data with
differrent abstractions in one way, operate with Node.js streams at
higher level, you can use Highland high-level streams library to fit
your needs. You can find more at <a href="http://highlandjs.org/">Highland
docs</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>High level Node.JS streams</title>
      <link>https://neiro.io/posts/2016-01-28-high-level-nodejs-streams-with-highland/</link>
      <pubDate>Thu, 28 Jan 2016 10:00:00 +0100</pubDate>
      <guid>https://neiro.io/posts/2016-01-28-high-level-nodejs-streams-with-highland/</guid>
      <description>&lt;p&gt;Node.js has a simple and powerful stream API. Streams in Node.js are&#xA;unix pipes that let you perform asynchronous I/O operations by reading&#xA;source data and pipe it to destination. If your application operates not&#xA;with streams only, but promises, callbacks or synchronous code, you may&#xA;want to use more deeper abstraction that fits your needs. In this case&#xA;you may take a look at &lt;a href=&#34;http://highlandjs.org/&#34;&gt;Highland&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;highland&#34;&gt;Highland&lt;/h2&gt;&#xA;&lt;p&gt;Highland library allows you to manage asynchronous and synchronous code&#xA;easily both in Node.js and in the browser. With Highland you can simple&#xA;switch between synchronous and asynchronous data sources without&#xA;re-writing your code. You can install Highland with NPM:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Node.js has a simple and powerful stream API. Streams in Node.js are
unix pipes that let you perform asynchronous I/O operations by reading
source data and pipe it to destination. If your application operates not
with streams only, but promises, callbacks or synchronous code, you may
want to use more deeper abstraction that fits your needs. In this case
you may take a look at <a href="http://highlandjs.org/">Highland</a>.</p>
<h2 id="highland">Highland</h2>
<p>Highland library allows you to manage asynchronous and synchronous code
easily both in Node.js and in the browser. With Highland you can simple
switch between synchronous and asynchronous data sources without
re-writing your code. You can install Highland with NPM:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln">1</span><span class="cl"> npm install highland</span></span></code></pre></div><p>and require or import it as yet another Node.js module:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="kr">import</span> <span class="nx">_</span> <span class="nx">from</span> <span class="s1">&#39;highland&#39;</span><span class="p">;</span></span></span></code></pre></div><h2 id="general-examples">General examples</h2>
<p>Converting from arrays to Highland Streams:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="nx">_</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]).</span><span class="nx">toArray</span><span class="p">(</span><span class="nx">xs</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">xs</span><span class="p">));</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1">// 0, 1, 2
</span></span></span></code></pre></div><p>Map and reduce over a stream:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="nx">_</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]).</span><span class="nx">map</span><span class="p">(</span><span class="nx">x</span> <span class="p">=&gt;</span> <span class="nx">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">).</span><span class="nx">reduce</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nx">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">a</span> <span class="o">*</span> <span class="nx">b</span><span class="p">);</span> <span class="c1">// [6]
</span></span></span></code></pre></div><p>Reading files in parallel:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="kr">import</span> <span class="nx">fs</span> <span class="nx">from</span> <span class="s1">&#39;fs&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="kr">const</span> <span class="nx">readFile</span> <span class="o">=</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="sr">/.wrapCallback(fs.readFile); const stream = /</span><span class="p">([</span><span class="s1">&#39;./.babelrc&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="s1">&#39;./.eslintrc&#39;</span><span class="p">]).</span><span class="nx">map</span><span class="p">(</span><span class="nx">readFile</span><span class="p">).</span><span class="nx">parallel</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span></span></span></code></pre></div><p>Handling errors:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="nx">stream</span><span class="p">.</span><span class="nx">errors</span><span class="p">((</span><span class="nx">err</span><span class="p">,</span> <span class="nx">rethrow</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span> <span class="p">});</span></span></span></code></pre></div><p>Pipe to Node.js streams:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="nx">stream</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">outputStream</span><span class="p">);</span></span></span></code></pre></div><h2 id="stream-objects">Stream objects</h2>
<p>Constructor:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="kr">const</span> <span class="nx">stream</span> <span class="o">=</span> <span class="nx">_</span><span class="p">(</span><span class="nx">source</span><span class="p">);</span> <span class="c1">// source - Array/Generator/Node Stream/Event Emitter/Promise/Iterator/Iterable
</span></span></span></code></pre></div><p>General functions:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="nx">stream</span><span class="p">.</span><span class="nx">destroy</span><span class="p">();</span> <span class="nx">stream</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nx">stream</span><span class="p">.</span><span class="nx">pause</span><span class="p">();</span> <span class="nx">stream</span><span class="p">.</span><span class="nx">resume</span><span class="p">();</span> <span class="nx">stream</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// Write x value to
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"></span><span class="nx">stream</span></span></span></code></pre></div><h2 id="transformations">Transformations</h2>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl"> <span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]).</span><span class="nx">append</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span> <span class="c1">// [0, 1, 2, 3]
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1"></span> <span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">]).</span><span class="nx">compact</span><span class="p">();</span> <span class="c1">// [1, 2]
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="c1"></span> <span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">]).</span><span class="nx">filter</span><span class="p">(</span><span class="nx">x</span> <span class="p">=&gt;</span> <span class="nx">x</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="o">&lt;=</span> <span class="mi">3</span><span class="p">);</span> <span class="c1">// [1, 2]
</span></span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="c1"></span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]).</span><span class="nx">head</span><span class="p">();</span> <span class="c1">// 1
</span></span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="c1"></span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]).</span><span class="nx">last</span><span class="p">();</span> <span class="c1">// 3
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="c1"></span><span class="p">([</span><span class="s1">&#39;ABC&#39;</span><span class="p">]).</span><span class="nx">invoke</span><span class="p">(</span><span class="s1">&#39;toLowerCase&#39;</span><span class="p">,</span> <span class="p">[]);</span> <span class="c1">// abc
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="c1"></span><span class="p">([{</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">}]).</span><span class="nx">pick</span><span class="p">([</span><span class="s1">&#39;foo&#39;</span><span class="p">]);</span> <span class="c1">// { foo: &#39;bar&#39; }
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="c1"></span><span class="p">([{</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">}]).</span><span class="nx">pluck</span><span class="p">([</span><span class="s1">&#39;foo&#39;</span><span class="p">]);</span> <span class="c1">// bar
</span></span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="c1"></span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]).</span><span class="nx">slice</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span> <span class="c1">// [2, 3]
</span></span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="c1"></span><span class="p">([</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">]).</span><span class="nx">sort</span><span class="p">();</span> <span class="c1">// [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]
</span></span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="c1"></span><span class="nx">_</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]).</span><span class="nx">uniq</span><span class="p">();</span> <span class="c1">// [0, 2, 3]
</span></span></span></code></pre></div><h2 id="high-order-streams">High-order Streams</h2>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">]).</span><span class="nx">concat</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]);</span> <span class="c1">// [0, 1, 2, 3]
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1"></span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="mi">3</span><span class="p">]]]).</span><span class="nx">flatten</span><span class="p">();</span> <span class="c1">// [0, 1, 2, 3]
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"></span><span class="p">(</span><span class="sr">/([0, 1]), /</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])).</span><span class="nx">sequence</span><span class="p">();</span> <span class="c1">// [0, 1, 2, 3]
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="c1"></span><span class="p">([</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">]).</span><span class="nx">zip</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]);</span> <span class="c1">// =&gt; [&#39;a&#39;, 1], [&#39;b&#39;, 2]
</span></span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="kr">const</span> <span class="nx">fork</span> <span class="o">=</span> <span class="nx">stream</span><span class="p">.</span><span class="nx">fork</span><span class="p">();</span> <span class="kr">const</span> <span class="nx">observer</span> <span class="o">=</span> <span class="nx">stream</span><span class="p">.</span><span class="nx">observe</span><span class="p">();</span>
</span></span><span class="line"><span class="ln">7</span><span class="cl"><span class="nx">fork</span><span class="p">.</span><span class="nx">resume</span><span class="p">();</span></span></span></code></pre></div><h2 id="objects">Objects</h2>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="p">.</span><span class="nx">extend</span><span class="p">({</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;foo&#39;</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;obj&#39;</span> <span class="p">});</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1">// { name: &#39;foo&#39;, type: &#39;obj&#39; }
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"></span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">});</span> <span class="c1">// bar
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="c1"></span><span class="p">.</span><span class="nx">keys</span><span class="p">({</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">});</span> <span class="c1">// [&#39;foo&#39;]
</span></span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="c1"></span><span class="p">.</span><span class="nx">values</span><span class="p">({</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">});</span> <span class="c1">// [&#39;bar&#39;]
</span></span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="c1"></span><span class="nx">_</span><span class="p">.</span><span class="nx">pairs</span><span class="p">({</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">});</span> <span class="c1">// [&#39;foo&#39;, &#39;bar&#39;]
</span></span></span></code></pre></div><h2 id="utils">Utils</h2>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="p">.</span><span class="nx">isStream</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]);</span> <span class="c1">// false
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1"></span><span class="p">.</span><span class="nx">isStream</span><span class="p">(</span><span class="nx">stream</span><span class="p">);</span> <span class="c1">// true
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]).</span><span class="nx">each</span><span class="p">(.</span><span class="nx">log</span><span class="p">);</span> <span class="c1">// 1, 2, 3
</span></span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="kr">const</span> <span class="nx">readFile</span> <span class="o">=</span> <span class="p">.</span><span class="nx">wrapCallback</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">);</span> <span class="c1">// Wraps callback to Highland stream
</span></span></span><span class="line"><span class="ln">7</span><span class="cl"><span class="c1"></span><span class="p">.</span><span class="nx">isStream</span><span class="p">(</span><span class="nx">readFile</span><span class="p">);</span> <span class="c1">// true
</span></span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>If you need to handle your synchronous and asynchronous data with
differrent abstractions in one way, operate with Node.js streams at
higher level, you can use Highland high-level streams library to fit
your needs. You can find more at <a href="http://highlandjs.org/">Highland
docs</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Trine util library</title>
      <link>https://neiro.io/blog/2015-12-31-trine-utility-library/</link>
      <pubDate>Thu, 31 Dec 2015 10:00:00 +0100</pubDate>
      <guid>https://neiro.io/blog/2015-12-31-trine-utility-library/</guid>
      <description>&lt;p&gt;As we know, functional programming in JavaScript is not the best&#xA;experience, unlike the plain functional languages (&lt;em&gt;Haskell, Lisp,&#xA;etc&lt;/em&gt;). But new standards of JavaScript - ES6 &lt;em&gt;(ECMAScript 2015)&lt;/em&gt; and&#xA;&lt;em&gt;ES7(ECMAScript 2016)&lt;/em&gt; introduce some improvements and allows you to&#xA;write code in more functional style:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;nx&#34;&gt;flatten&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;collection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;func1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;func2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But there&amp;rsquo;s more: new&#xA;&lt;a href=&#34;https://github.com/zenparsing/es-function-bind&#34;&gt;function bind syntax&lt;/a&gt;&#xA;performs function binding and method extraction. The previous example&#xA;can be rewritten as:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;collection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;func1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;func2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;flatten&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ES6 also introduces the concept of iterators - protocol, that most JS&#xA;collection types implement. You can extend your custom collections to&#xA;support the same protocol, and generators functions support it too. So,&#xA;if you looking for utility library that supports new function bind&#xA;syntax, and iterators, you can take a look on&#xA;&lt;a href=&#34;https://github.com/jussi-kalliokoski/trine&#34;&gt;Trine&lt;/a&gt;.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>As we know, functional programming in JavaScript is not the best
experience, unlike the plain functional languages (<em>Haskell, Lisp,
etc</em>). But new standards of JavaScript - ES6 <em>(ECMAScript 2015)</em> and
<em>ES7(ECMAScript 2016)</em> introduce some improvements and allows you to
write code in more functional style:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="nx">flatten</span><span class="p">(</span><span class="nx">collection</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">func1</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="nx">func2</span><span class="p">));</span></span></span></code></pre></div><p>But there&rsquo;s more: new
<a href="https://github.com/zenparsing/es-function-bind">function bind syntax</a>
performs function binding and method extraction. The previous example
can be rewritten as:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl">
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nx">collection</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">func1</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="nx">func2</span><span class="p">)</span><span class="o">::</span><span class="nx">flatten</span><span class="p">();</span></span></span></code></pre></div><p>ES6 also introduces the concept of iterators - protocol, that most JS
collection types implement. You can extend your custom collections to
support the same protocol, and generators functions support it too. So,
if you looking for utility library that supports new function bind
syntax, and iterators, you can take a look on
<a href="https://github.com/jussi-kalliokoski/trine">Trine</a>.</p>
<h2 id="installing">Installing</h2>
<p>First of all, you may want to use all features of ES6 and most of ES7
standards with <a href="https://babeljs.io/">Babel</a>:</p>
<p><em>npm install &ndash;save babel babel-preset-stage-0 babel-preset-es2015</em></p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="c1">//.babelrc { &#34;presets&#34;: [&#34;stage-0&#34;, &#34;es2015&#34;]
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></div><p>Then install Trine:</p>
<p><em>npm install &ndash;save trine</em></p>
<p>and import to your project required functions:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="kr">import</span> <span class="p">{</span> <span class="nx">last</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;trine/iterable/last&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">
</span></span><span class="line"><span class="ln">3</span><span class="cl"> <span class="kr">const</span> <span class="nx">lastCh</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">]</span><span class="o">::</span><span class="nx">last</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="c1">// yields &#39;c&#39;
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="c1"></span> <span class="nx">lastCh</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">;</span> <span class="c1">// c
</span></span></span></code></pre></div><h2 id="boolean">Boolean</h2>
<p>Trine provides common boolean helpers:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="kc">true</span><span class="o">::</span><span class="nx">not</span><span class="p">()</span> <span class="c1">// false
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1"></span><span class="kc">true</span><span class="o">::</span><span class="nx">and</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span> <span class="c1">// false
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"></span><span class="kc">true</span><span class="o">::</span><span class="nx">or</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span> <span class="c1">// true
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="c1"></span><span class="kc">true</span><span class="o">::</span><span class="nx">xor</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span> <span class="c1">// true
</span></span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="c1"></span><span class="mi">0</span><span class="o">::</span><span class="nx">not</span><span class="p">()</span> <span class="c1">// true
</span></span></span></code></pre></div><h2 id="number">Number</h2>
<p>#+begin_src javascript
10::min(100) <em>/ 10
-100::abs() /</em> 100
4::div(2) <em>/ 2
4::mod(3) /</em> 1
2::pow(4)::max(15) // 16</p>
<h2 id="value">Value</h2>
<p>Extract , compare or convert values to functions:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="s1">&#39;foo&#39;</span><span class="o">::</span><span class="nx">equals</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">)</span><span class="o">::</span><span class="nx">is</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span> <span class="c1">// true
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">func</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">}</span><span class="o">::</span><span class="nx">prop</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">)</span><span class="o">::</span><span class="nx">toFunction</span><span class="p">();</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="nx">func</span><span class="p">();</span> <span class="c1">// bar
</span></span></span></code></pre></div><h2 id="partial">Partial</h2>
<p>Trine includes partial helper:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">parseInt</span><span class="o">::</span><span class="nx">partial</span><span class="p">(</span><span class="nx">_</span><span class="p">,</span> <span class="mi">2</span><span class="p">)(</span><span class="s1">&#39;1010&#39;</span><span class="p">)</span> <span class="c1">// 10
</span></span></span></code></pre></div><h2 id="object">Object</h2>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">};</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nx">obj</span><span class="o">::</span><span class="nx">keys</span><span class="p">().</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">;</span> <span class="c1">// foo
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"></span><span class="nx">obj</span><span class="o">::</span><span class="nx">values</span><span class="p">().</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">;</span> <span class="c1">// bar
</span></span></span></code></pre></div><h2 id="iterable">Iterable</h2>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="kd">let</span> <span class="nx">nums</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nx">nums</span><span class="o">::</span><span class="nx">count</span><span class="p">().</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">;</span> <span class="c1">// 2
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"></span><span class="nx">nums</span><span class="o">::</span><span class="nx">reverse</span><span class="p">()</span><span class="o">::</span><span class="nx">to</span><span class="p">(</span><span class="nb">Array</span><span class="p">);</span> <span class="c1">// 1, 5
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="c1"></span><span class="s1">&#39;cab&#39;</span><span class="o">::</span><span class="nx">sortAlphabetically</span><span class="p">()</span><span class="o">::</span><span class="nx">to</span><span class="p">(</span><span class="nb">Array</span><span class="p">)</span> <span class="c1">// a, b, c
</span></span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="c1"></span><span class="p">[</span><span class="nx">nums</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]]</span><span class="o">::</span><span class="nx">flatten</span><span class="p">()</span><span class="o">::</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="k">this</span> <span class="o">*</span> <span class="mi">3</span> <span class="p">})</span><span class="o">::</span><span class="nx">to</span><span class="p">(</span><span class="nb">Array</span><span class="p">);</span> <span class="c1">// 15, 3, 6, 9
</span></span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>If you like new syntax of ES6, ES7 and want to use iterators, function
binding, you can use Trine as base utility library. If you want to know
more about Trine, you can take a look at it&rsquo;s
<a href="http://jussi-kalliokoski.github.io/trine/docs/latest/">documentation</a>
.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Trine util library</title>
      <link>https://neiro.io/posts/2015-12-31-trine-utility-library/</link>
      <pubDate>Thu, 31 Dec 2015 10:00:00 +0100</pubDate>
      <guid>https://neiro.io/posts/2015-12-31-trine-utility-library/</guid>
      <description>&lt;p&gt;As we know, functional programming in JavaScript is not the best&#xA;experience, unlike the plain functional languages (&lt;em&gt;Haskell, Lisp,&#xA;etc&lt;/em&gt;). But new standards of JavaScript - ES6 &lt;em&gt;(ECMAScript 2015)&lt;/em&gt; and&#xA;&lt;em&gt;ES7(ECMAScript 2016)&lt;/em&gt; introduce some improvements and allows you to&#xA;write code in more functional style:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;nx&#34;&gt;flatten&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;collection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;func1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;func2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But there&amp;rsquo;s more: new&#xA;&lt;a href=&#34;https://github.com/zenparsing/es-function-bind&#34;&gt;function bind syntax&lt;/a&gt;&#xA;performs function binding and method extraction. The previous example&#xA;can be rewritten as:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;collection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;func1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;func2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;flatten&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ES6 also introduces the concept of iterators - protocol, that most JS&#xA;collection types implement. You can extend your custom collections to&#xA;support the same protocol, and generators functions support it too. So,&#xA;if you looking for utility library that supports new function bind&#xA;syntax, and iterators, you can take a look on&#xA;&lt;a href=&#34;https://github.com/jussi-kalliokoski/trine&#34;&gt;Trine&lt;/a&gt;.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>As we know, functional programming in JavaScript is not the best
experience, unlike the plain functional languages (<em>Haskell, Lisp,
etc</em>). But new standards of JavaScript - ES6 <em>(ECMAScript 2015)</em> and
<em>ES7(ECMAScript 2016)</em> introduce some improvements and allows you to
write code in more functional style:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="nx">flatten</span><span class="p">(</span><span class="nx">collection</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">func1</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="nx">func2</span><span class="p">));</span></span></span></code></pre></div><p>But there&rsquo;s more: new
<a href="https://github.com/zenparsing/es-function-bind">function bind syntax</a>
performs function binding and method extraction. The previous example
can be rewritten as:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl">
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nx">collection</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">func1</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="nx">func2</span><span class="p">)</span><span class="o">::</span><span class="nx">flatten</span><span class="p">();</span></span></span></code></pre></div><p>ES6 also introduces the concept of iterators - protocol, that most JS
collection types implement. You can extend your custom collections to
support the same protocol, and generators functions support it too. So,
if you looking for utility library that supports new function bind
syntax, and iterators, you can take a look on
<a href="https://github.com/jussi-kalliokoski/trine">Trine</a>.</p>
<h2 id="installing">Installing</h2>
<p>First of all, you may want to use all features of ES6 and most of ES7
standards with <a href="https://babeljs.io/">Babel</a>:</p>
<p><em>npm install &ndash;save babel babel-preset-stage-0 babel-preset-es2015</em></p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="c1">//.babelrc { &#34;presets&#34;: [&#34;stage-0&#34;, &#34;es2015&#34;]
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></div><p>Then install Trine:</p>
<p><em>npm install &ndash;save trine</em></p>
<p>and import to your project required functions:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="kr">import</span> <span class="p">{</span> <span class="nx">last</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;trine/iterable/last&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">
</span></span><span class="line"><span class="ln">3</span><span class="cl"> <span class="kr">const</span> <span class="nx">lastCh</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">]</span><span class="o">::</span><span class="nx">last</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="c1">// yields &#39;c&#39;
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="c1"></span> <span class="nx">lastCh</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">;</span> <span class="c1">// c
</span></span></span></code></pre></div><h2 id="boolean">Boolean</h2>
<p>Trine provides common boolean helpers:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="kc">true</span><span class="o">::</span><span class="nx">not</span><span class="p">()</span> <span class="c1">// false
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1"></span><span class="kc">true</span><span class="o">::</span><span class="nx">and</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span> <span class="c1">// false
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"></span><span class="kc">true</span><span class="o">::</span><span class="nx">or</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span> <span class="c1">// true
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="c1"></span><span class="kc">true</span><span class="o">::</span><span class="nx">xor</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span> <span class="c1">// true
</span></span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="c1"></span><span class="mi">0</span><span class="o">::</span><span class="nx">not</span><span class="p">()</span> <span class="c1">// true
</span></span></span></code></pre></div><h2 id="number">Number</h2>
<p>#+begin_src javascript
10::min(100) <em>/ 10
-100::abs() /</em> 100
4::div(2) <em>/ 2
4::mod(3) /</em> 1
2::pow(4)::max(15) // 16</p>
<h2 id="value">Value</h2>
<p>Extract , compare or convert values to functions:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="s1">&#39;foo&#39;</span><span class="o">::</span><span class="nx">equals</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">)</span><span class="o">::</span><span class="nx">is</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span> <span class="c1">// true
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">func</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">}</span><span class="o">::</span><span class="nx">prop</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">)</span><span class="o">::</span><span class="nx">toFunction</span><span class="p">();</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="nx">func</span><span class="p">();</span> <span class="c1">// bar
</span></span></span></code></pre></div><h2 id="partial">Partial</h2>
<p>Trine includes partial helper:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">parseInt</span><span class="o">::</span><span class="nx">partial</span><span class="p">(</span><span class="nx">_</span><span class="p">,</span> <span class="mi">2</span><span class="p">)(</span><span class="s1">&#39;1010&#39;</span><span class="p">)</span> <span class="c1">// 10
</span></span></span></code></pre></div><h2 id="object">Object</h2>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">};</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nx">obj</span><span class="o">::</span><span class="nx">keys</span><span class="p">().</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">;</span> <span class="c1">// foo
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"></span><span class="nx">obj</span><span class="o">::</span><span class="nx">values</span><span class="p">().</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">;</span> <span class="c1">// bar
</span></span></span></code></pre></div><h2 id="iterable">Iterable</h2>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"> <span class="kd">let</span> <span class="nx">nums</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nx">nums</span><span class="o">::</span><span class="nx">count</span><span class="p">().</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">;</span> <span class="c1">// 2
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"></span><span class="nx">nums</span><span class="o">::</span><span class="nx">reverse</span><span class="p">()</span><span class="o">::</span><span class="nx">to</span><span class="p">(</span><span class="nb">Array</span><span class="p">);</span> <span class="c1">// 1, 5
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="c1"></span><span class="s1">&#39;cab&#39;</span><span class="o">::</span><span class="nx">sortAlphabetically</span><span class="p">()</span><span class="o">::</span><span class="nx">to</span><span class="p">(</span><span class="nb">Array</span><span class="p">)</span> <span class="c1">// a, b, c
</span></span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="c1"></span><span class="p">[</span><span class="nx">nums</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]]</span><span class="o">::</span><span class="nx">flatten</span><span class="p">()</span><span class="o">::</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="k">this</span> <span class="o">*</span> <span class="mi">3</span> <span class="p">})</span><span class="o">::</span><span class="nx">to</span><span class="p">(</span><span class="nb">Array</span><span class="p">);</span> <span class="c1">// 15, 3, 6, 9
</span></span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>If you like new syntax of ES6, ES7 and want to use iterators, function
binding, you can use Trine as base utility library. If you want to know
more about Trine, you can take a look at it&rsquo;s
<a href="http://jussi-kalliokoski.github.io/trine/docs/latest/">documentation</a>
.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Functional programming with Ramda.js</title>
      <link>https://neiro.io/blog/2015-09-05-functional-programming-with-ramda-js/</link>
      <pubDate>Sat, 05 Sep 2015 10:00:00 +0200</pubDate>
      <guid>https://neiro.io/blog/2015-09-05-functional-programming-with-ramda-js/</guid>
      <description>&lt;p&gt;JavaScript is one of the most dynamic, flexible programming&#xA;languages. It supports multiple programming paradigms - imperative,&#xA;object (prototype) oriented, scripting, and functional.&lt;br /&gt;&#xA;Let&amp;rsquo; see what JavaScript has common with functional programming&#xA;languages:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;First-class functions - functions are objects themselves&lt;/li&gt;&#xA;&lt;li&gt;Anonymous functions - functions can be unnamed and nested&lt;/li&gt;&#xA;&lt;li&gt;Closures - functions that refer to independent variables, that were&#xA;created in other scope&lt;/li&gt;&#xA;&lt;li&gt;Recursion - function can call itself&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;By the way, there are some significant differences:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>JavaScript is one of the most dynamic, flexible programming
languages. It supports multiple programming paradigms - imperative,
object (prototype) oriented, scripting, and functional.<br />
Let&rsquo; see what JavaScript has common with functional programming
languages:</p>
<ul>
<li>First-class functions - functions are objects themselves</li>
<li>Anonymous functions - functions can be unnamed and nested</li>
<li>Closures - functions that refer to independent variables, that were
created in other scope</li>
<li>Recursion - function can call itself</li>
</ul>
<p>By the way, there are some significant differences:</p>
<ul>
<li>Immutability - objects, functions in JavaScript can be modified after
creation</li>
<li>Pure functions - JavaScript functions often depends on outside scope,
and it&rsquo;s hard to create function that always returns the same result
with given same parameters</li>
<li>Strong (and static) typing - JavaScript allows use a value of one type
as if it were a value of another type, and has not static typing
system</li>
</ul>
<p>JavaScript ecosystem has great tools for advanced use of functional
programming features, such as <em>Underscore</em> and <em>Lodash</em> - most popular
toolkit libraries. But if you want use library, that was specifically
designed for functional programming, you may have to look at
<a href="http://ramdajs.com/0.17/index.html">Ramda.js</a> .</p>
<p>Ramda.js has some distinguishing features:</p>
<ul>
<li>It&rsquo;s designed in pure functional style, with immutability and
side-effects free functions, that helps you to write simple and
effective code.</li>
<li>Parameters in functions have the same order, with key params at first
and data at last</li>
<li>Ramda.js functions are automatically curried, that allows you to
easily build new functions from old ones</li>
</ul>
<p>To show examples of Ramda.js using, i will use io.js 3.2 and Babel, so
let&rsquo;s create new <em>.js</em> file:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="ch">#!/usr/bin/env babel-node
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="ch"></span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="kr">import</span> <span class="nx">R</span> <span class="nx">from</span> <span class="s1">&#39;ramda&#39;</span><span class="p">;</span></span></span></code></pre></div><p>Ramda.js API has some general use functions:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl">
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1">// Typing let str = &#39;test&#39;;
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nb">String</span><span class="p">,</span> <span class="nx">str</span><span class="p">);</span> <span class="c1">//=&gt; true // The same with currying
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nb">String</span><span class="p">)(</span><span class="nx">str</span><span class="p">);</span> <span class="c1">//=&gt; true
</span></span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">isString</span> <span class="o">=</span> <span class="nx">R</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nb">String</span><span class="p">);</span> <span class="nx">isString</span><span class="p">(</span><span class="s1">&#39;string&#39;</span><span class="p">);</span> <span class="c1">//=&gt; true
</span></span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">type</span><span class="p">(</span><span class="nx">isString</span><span class="p">);</span> <span class="c1">//=&gt; String
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="c1">// Math
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">500</span><span class="p">);</span> <span class="c1">//=&gt; 600
</span></span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="mi">100</span><span class="p">)(</span><span class="mi">500</span><span class="p">);</span> <span class="c1">//=&gt; 600
</span></span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">mean</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">]);</span> <span class="c1">//=&gt; 4 R.sum(R.range(1, 5)); //=&gt; 10
</span></span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="c1">// Logic
</span></span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">and</span><span class="p">(</span><span class="kc">true</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span> <span class="c1">//=&gt; false
</span></span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">and</span><span class="p">([])(</span><span class="mi">0</span><span class="p">);</span> <span class="c1">//=&gt; 0
</span></span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">not</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span><span class="c1">//=&gt; false
</span></span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">both</span><span class="p">(</span><span class="nx">isString</span><span class="p">,</span> <span class="nx">R</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nb">String</span><span class="p">))(</span><span class="nx">str</span><span class="p">);</span> <span class="c1">// =&gt; true
</span></span></span></code></pre></div><p>Like the <em>Underscore</em> and <em>Lodash</em>, Ramda has collection helper
functions:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl">
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1">// Lists
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">animals</span> <span class="o">=</span> <span class="p">[</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;goose&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;bird&#39;</span><span class="p">,</span> <span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;white&#39;</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;parrot&#39;</span><span class="p">,</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;bird&#39;</span><span class="p">,</span> <span class="nx">color</span><span class="o">:</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="s1">&#39;yellow&#39;</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;cat&#39;</span><span class="p">,</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;mammal&#39;</span><span class="p">,</span> <span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;grey&#39;</span> <span class="p">}];</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="nx">R</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">animal</span> <span class="p">=&gt;</span> <span class="nx">animal</span><span class="p">.</span><span class="nx">color</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="nx">animal</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="nx">animals</span><span class="p">);</span> <span class="c1">//=&gt; [
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="c1"></span><span class="s1">&#39;white goose&#39;</span><span class="p">,</span> <span class="s1">&#39;yellow parrot&#39;</span><span class="p">,</span> <span class="s1">&#39;grey cat&#39;</span> <span class="p">]</span> <span class="nx">R</span><span class="p">.</span><span class="nx">head</span><span class="p">(</span><span class="nx">animals</span><span class="p">).</span><span class="nx">name</span><span class="p">;</span> <span class="c1">//=&gt;
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="c1"></span><span class="nx">goose</span> <span class="nx">R</span><span class="p">.</span><span class="nx">last</span><span class="p">(</span><span class="nx">animals</span><span class="p">).</span><span class="nx">name</span><span class="p">;</span> <span class="c1">//=&gt; cat
</span></span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">uniq</span><span class="p">(</span><span class="nx">R</span><span class="p">.</span><span class="nx">pluck</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">,</span> <span class="nx">animals</span><span class="p">));</span> <span class="c1">//=&gt; [ &#39;bird&#39;, &#39;mammal&#39; ]
</span></span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">length</span><span class="p">(</span><span class="nx">R</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">animal</span> <span class="p">=&gt;</span> <span class="nx">animal</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;bird&#39;</span><span class="p">,</span> <span class="nx">animals</span><span class="p">));</span> <span class="c1">//=&gt; 2
</span></span></span></code></pre></div><p>And object helpers too:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl">
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1">// Objects let cat = { type: &#39;animal&#39;,
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="c1"></span><span class="nx">subclass</span><span class="o">:</span> <span class="s1">&#39;mammal&#39;</span><span class="p">,</span> <span class="nx">binomialName</span><span class="o">:</span> <span class="s1">&#39;Felis catus&#39;</span> <span class="p">};</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="nx">R</span><span class="p">.</span><span class="nx">assoc</span><span class="p">(</span><span class="s1">&#39;status&#39;</span><span class="p">,</span> <span class="s1">&#39;domesticated&#39;</span><span class="p">,</span> <span class="nx">cat</span><span class="p">).</span><span class="nx">status</span><span class="p">;</span> <span class="c1">//=&gt; domesticated
</span></span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">dissoc</span><span class="p">(</span><span class="s1">&#39;binomialName&#39;</span><span class="p">,</span> <span class="nx">cat</span><span class="p">).</span><span class="nx">binomialName</span><span class="p">;</span> <span class="c1">//=&gt; undefined
</span></span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">cat</span><span class="p">);</span> <span class="c1">//=&gt; [ &#39;type&#39;, &#39;subclass&#39;, &#39;binomialName&#39; ]
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">,</span> <span class="nx">cat</span><span class="p">);</span> <span class="c1">//=&gt; true
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">prop</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">,</span> <span class="nx">cat</span><span class="p">);</span> <span class="c1">//=&gt; animal
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">values</span><span class="p">(</span><span class="nx">cat</span><span class="p">);</span> <span class="c1">//=&gt; [ &#39;animal&#39;, &#39;mammal&#39;, &#39;felis catus&#39; ]
</span></span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="c1">// Object transformation
</span></span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">transformations</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="nx">R</span><span class="p">.</span><span class="nx">toUpper</span><span class="p">,</span> <span class="nx">binomialName</span><span class="o">:</span> <span class="nx">R</span><span class="p">.</span><span class="nx">toLower</span> <span class="p">}</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="nx">R</span><span class="p">.</span><span class="nx">evolve</span><span class="p">(</span><span class="nx">transformations</span><span class="p">,</span> <span class="nx">cat</span><span class="p">).</span><span class="nx">type</span><span class="p">;</span> <span class="c1">// =&gt; ANIMAL
</span></span></span></code></pre></div><p>But key point of Ramda.js is functions. Ramda allows you to easily
compose multiple functions in different orders:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="c1">// Compose and pipe R.join(&#39; and &#39;,
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">uniq</span><span class="p">(</span><span class="nx">R</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">R</span><span class="p">.</span><span class="nx">toUpper</span><span class="p">)(</span><span class="nx">R</span><span class="p">.</span><span class="nx">pluck</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">,</span> <span class="nx">animals</span><span class="p">))));</span> <span class="c1">//=&gt; BIRD and MAMMAL
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1">// Performs right-to-left function composition
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">compose</span><span class="p">(</span><span class="nx">R</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39; and &#39;</span><span class="p">),</span> <span class="nx">R</span><span class="p">.</span><span class="nx">uniq</span><span class="p">,</span> <span class="nx">R</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">R</span><span class="p">.</span><span class="nx">toUpper</span><span class="p">),</span> <span class="nx">R</span><span class="p">.</span><span class="nx">pluck</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">)</span> <span class="p">)(</span><span class="nx">animals</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="c1">//=&gt; BIRD and MAMMAL
</span></span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="ln">7</span><span class="cl"><span class="c1">// Performs left-to-right function composition
</span></span></span><span class="line"><span class="ln">8</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">R</span><span class="p">.</span><span class="nx">pluck</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">)</span> <span class="nx">R</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">R</span><span class="p">.</span><span class="nx">toUpper</span><span class="p">),</span> <span class="nx">R</span><span class="p">.</span><span class="nx">uniq</span><span class="p">,</span> <span class="nx">R</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39; and &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">9</span><span class="cl"><span class="p">)(</span><span class="nx">animals</span><span class="p">);</span> <span class="c1">//=&gt; BIRD and MAMMAL
</span></span></span></code></pre></div><p>Another power of Ramda is currying. Currying is the process of
translating evaluation of function that takes multiple parameters in
evaluating a sequence of functions, each with one argument.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="kd">let</span> <span class="nx">tripleMultiply</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">a</span> <span class="o">*</span> <span class="nx">b</span> <span class="o">*</span> <span class="nx">c</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nx">tripleMultiply</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span> <span class="c1">//=&gt; 54
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"></span><span class="nx">tripleMultiply</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">9</span><span class="p">)(</span><span class="mi">2</span><span class="p">);</span> <span class="c1">//=&gt; TypeError: tripleMultiply(..) is not a function
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">curriedMultiply</span> <span class="o">=</span> <span class="nx">R</span><span class="p">.</span><span class="nx">curry</span><span class="p">(</span><span class="nx">tripleMultiply</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="nx">curriedMultiply</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">9</span><span class="p">)(</span><span class="mi">2</span><span class="p">);</span> <span class="c1">//=&gt; 54
</span></span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="c1"></span><span class="nx">curriedMultiply</span><span class="p">(</span><span class="mi">3</span><span class="p">)(</span><span class="mi">9</span><span class="p">)(</span><span class="mi">2</span><span class="p">);</span> <span class="c1">//=&gt; 54
</span></span></span></code></pre></div><p>Pattern matching is also available through <em>R.cond</em>. That allows you to
check sequence of conditions to match different patterns:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="kd">let</span> <span class="nx">checkNumber</span> <span class="o">=</span> <span class="nx">R</span><span class="p">.</span><span class="nx">cond</span><span class="p">([</span> <span class="p">[</span><span class="nx">R</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nb">Number</span><span class="p">),</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nx">R</span><span class="p">.</span><span class="nx">identity</span><span class="p">],</span> <span class="p">[</span><span class="nx">R</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nb">String</span><span class="p">),</span> <span class="nb">parseInt</span><span class="p">],</span> <span class="p">[</span><span class="nx">R</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nb">Boolean</span><span class="p">),</span> <span class="nb">Number</span><span class="p">],</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="p">[</span><span class="nx">R</span><span class="p">.</span><span class="nx">isEmpty</span><span class="p">,</span> <span class="nx">R</span><span class="p">.</span><span class="nx">always</span><span class="p">(</span><span class="mi">0</span><span class="p">)],</span> <span class="p">[</span><span class="nx">R</span><span class="p">.</span><span class="nx">T</span><span class="p">,</span> <span class="nx">R</span><span class="p">.</span><span class="nx">always</span><span class="p">(</span><span class="kc">NaN</span><span class="p">)]]);</span> <span class="nx">checkNumber</span><span class="p">(</span><span class="mi">100500</span><span class="p">);</span> <span class="c1">//=&gt; 100500
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="c1"></span><span class="nx">checkNumber</span><span class="p">(</span><span class="s1">&#39;146%&#39;</span><span class="p">);</span> <span class="c1">//=&gt; 146
</span></span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="c1"></span><span class="nx">checkNumber</span><span class="p">(</span><span class="s1">&#39;Hodor&#39;</span><span class="p">);</span> <span class="c1">//=&gt; NaN
</span></span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="c1"></span><span class="nx">checkNumber</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span> <span class="c1">//=&gt; 1
</span></span></span><span class="line"><span class="ln">7</span><span class="cl"><span class="c1"></span><span class="nx">checkNumber</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span> <span class="c1">//=&gt; 0
</span></span></span><span class="line"><span class="ln">8</span><span class="cl"><span class="c1"></span><span class="nx">checkNumber</span><span class="p">([]);</span> <span class="c1">//=&gt; 0
</span></span></span><span class="line"><span class="ln">9</span><span class="cl"><span class="c1"></span><span class="nx">checkNumber</span><span class="p">([</span><span class="s1">&#39;test&#39;</span><span class="p">]);</span> <span class="c1">//=&gt; NaN
</span></span></span></code></pre></div><p>Ramda.js is one of the best functional programming libraries that exists
in JavaScript ecosystem. It can completely replace <em>Underscore</em>,
<em>Lodash</em> in your project with own object, lists and others helpers.
Immutability, currying and composing allows you to write both efficient
and simple code in pure functional style.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Functional programming with Ramda.js</title>
      <link>https://neiro.io/posts/2015-09-05-functional-programming-with-ramda-js/</link>
      <pubDate>Sat, 05 Sep 2015 10:00:00 +0200</pubDate>
      <guid>https://neiro.io/posts/2015-09-05-functional-programming-with-ramda-js/</guid>
      <description>&lt;p&gt;JavaScript is one of the most dynamic, flexible programming&#xA;languages. It supports multiple programming paradigms - imperative,&#xA;object (prototype) oriented, scripting, and functional.&lt;br /&gt;&#xA;Let&amp;rsquo; see what JavaScript has common with functional programming&#xA;languages:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;First-class functions - functions are objects themselves&lt;/li&gt;&#xA;&lt;li&gt;Anonymous functions - functions can be unnamed and nested&lt;/li&gt;&#xA;&lt;li&gt;Closures - functions that refer to independent variables, that were&#xA;created in other scope&lt;/li&gt;&#xA;&lt;li&gt;Recursion - function can call itself&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;By the way, there are some significant differences:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>JavaScript is one of the most dynamic, flexible programming
languages. It supports multiple programming paradigms - imperative,
object (prototype) oriented, scripting, and functional.<br />
Let&rsquo; see what JavaScript has common with functional programming
languages:</p>
<ul>
<li>First-class functions - functions are objects themselves</li>
<li>Anonymous functions - functions can be unnamed and nested</li>
<li>Closures - functions that refer to independent variables, that were
created in other scope</li>
<li>Recursion - function can call itself</li>
</ul>
<p>By the way, there are some significant differences:</p>
<ul>
<li>Immutability - objects, functions in JavaScript can be modified after
creation</li>
<li>Pure functions - JavaScript functions often depends on outside scope,
and it&rsquo;s hard to create function that always returns the same result
with given same parameters</li>
<li>Strong (and static) typing - JavaScript allows use a value of one type
as if it were a value of another type, and has not static typing
system</li>
</ul>
<p>JavaScript ecosystem has great tools for advanced use of functional
programming features, such as <em>Underscore</em> and <em>Lodash</em> - most popular
toolkit libraries. But if you want use library, that was specifically
designed for functional programming, you may have to look at
<a href="http://ramdajs.com/0.17/index.html">Ramda.js</a> .</p>
<p>Ramda.js has some distinguishing features:</p>
<ul>
<li>It&rsquo;s designed in pure functional style, with immutability and
side-effects free functions, that helps you to write simple and
effective code.</li>
<li>Parameters in functions have the same order, with key params at first
and data at last</li>
<li>Ramda.js functions are automatically curried, that allows you to
easily build new functions from old ones</li>
</ul>
<p>To show examples of Ramda.js using, i will use io.js 3.2 and Babel, so
let&rsquo;s create new <em>.js</em> file:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="ch">#!/usr/bin/env babel-node
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="ch"></span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="kr">import</span> <span class="nx">R</span> <span class="nx">from</span> <span class="s1">&#39;ramda&#39;</span><span class="p">;</span></span></span></code></pre></div><p>Ramda.js API has some general use functions:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl">
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1">// Typing let str = &#39;test&#39;;
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nb">String</span><span class="p">,</span> <span class="nx">str</span><span class="p">);</span> <span class="c1">//=&gt; true // The same with currying
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nb">String</span><span class="p">)(</span><span class="nx">str</span><span class="p">);</span> <span class="c1">//=&gt; true
</span></span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">isString</span> <span class="o">=</span> <span class="nx">R</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nb">String</span><span class="p">);</span> <span class="nx">isString</span><span class="p">(</span><span class="s1">&#39;string&#39;</span><span class="p">);</span> <span class="c1">//=&gt; true
</span></span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">type</span><span class="p">(</span><span class="nx">isString</span><span class="p">);</span> <span class="c1">//=&gt; String
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="c1">// Math
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">500</span><span class="p">);</span> <span class="c1">//=&gt; 600
</span></span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="mi">100</span><span class="p">)(</span><span class="mi">500</span><span class="p">);</span> <span class="c1">//=&gt; 600
</span></span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">mean</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">]);</span> <span class="c1">//=&gt; 4 R.sum(R.range(1, 5)); //=&gt; 10
</span></span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="c1">// Logic
</span></span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">and</span><span class="p">(</span><span class="kc">true</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span> <span class="c1">//=&gt; false
</span></span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">and</span><span class="p">([])(</span><span class="mi">0</span><span class="p">);</span> <span class="c1">//=&gt; 0
</span></span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">not</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span><span class="c1">//=&gt; false
</span></span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">both</span><span class="p">(</span><span class="nx">isString</span><span class="p">,</span> <span class="nx">R</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nb">String</span><span class="p">))(</span><span class="nx">str</span><span class="p">);</span> <span class="c1">// =&gt; true
</span></span></span></code></pre></div><p>Like the <em>Underscore</em> and <em>Lodash</em>, Ramda has collection helper
functions:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl">
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1">// Lists
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">animals</span> <span class="o">=</span> <span class="p">[</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;goose&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;bird&#39;</span><span class="p">,</span> <span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;white&#39;</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;parrot&#39;</span><span class="p">,</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;bird&#39;</span><span class="p">,</span> <span class="nx">color</span><span class="o">:</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="s1">&#39;yellow&#39;</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;cat&#39;</span><span class="p">,</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;mammal&#39;</span><span class="p">,</span> <span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;grey&#39;</span> <span class="p">}];</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="nx">R</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">animal</span> <span class="p">=&gt;</span> <span class="nx">animal</span><span class="p">.</span><span class="nx">color</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="nx">animal</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="nx">animals</span><span class="p">);</span> <span class="c1">//=&gt; [
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="c1"></span><span class="s1">&#39;white goose&#39;</span><span class="p">,</span> <span class="s1">&#39;yellow parrot&#39;</span><span class="p">,</span> <span class="s1">&#39;grey cat&#39;</span> <span class="p">]</span> <span class="nx">R</span><span class="p">.</span><span class="nx">head</span><span class="p">(</span><span class="nx">animals</span><span class="p">).</span><span class="nx">name</span><span class="p">;</span> <span class="c1">//=&gt;
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="c1"></span><span class="nx">goose</span> <span class="nx">R</span><span class="p">.</span><span class="nx">last</span><span class="p">(</span><span class="nx">animals</span><span class="p">).</span><span class="nx">name</span><span class="p">;</span> <span class="c1">//=&gt; cat
</span></span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">uniq</span><span class="p">(</span><span class="nx">R</span><span class="p">.</span><span class="nx">pluck</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">,</span> <span class="nx">animals</span><span class="p">));</span> <span class="c1">//=&gt; [ &#39;bird&#39;, &#39;mammal&#39; ]
</span></span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">length</span><span class="p">(</span><span class="nx">R</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">animal</span> <span class="p">=&gt;</span> <span class="nx">animal</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;bird&#39;</span><span class="p">,</span> <span class="nx">animals</span><span class="p">));</span> <span class="c1">//=&gt; 2
</span></span></span></code></pre></div><p>And object helpers too:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl">
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1">// Objects let cat = { type: &#39;animal&#39;,
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="c1"></span><span class="nx">subclass</span><span class="o">:</span> <span class="s1">&#39;mammal&#39;</span><span class="p">,</span> <span class="nx">binomialName</span><span class="o">:</span> <span class="s1">&#39;Felis catus&#39;</span> <span class="p">};</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="nx">R</span><span class="p">.</span><span class="nx">assoc</span><span class="p">(</span><span class="s1">&#39;status&#39;</span><span class="p">,</span> <span class="s1">&#39;domesticated&#39;</span><span class="p">,</span> <span class="nx">cat</span><span class="p">).</span><span class="nx">status</span><span class="p">;</span> <span class="c1">//=&gt; domesticated
</span></span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">dissoc</span><span class="p">(</span><span class="s1">&#39;binomialName&#39;</span><span class="p">,</span> <span class="nx">cat</span><span class="p">).</span><span class="nx">binomialName</span><span class="p">;</span> <span class="c1">//=&gt; undefined
</span></span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">cat</span><span class="p">);</span> <span class="c1">//=&gt; [ &#39;type&#39;, &#39;subclass&#39;, &#39;binomialName&#39; ]
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">,</span> <span class="nx">cat</span><span class="p">);</span> <span class="c1">//=&gt; true
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">prop</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">,</span> <span class="nx">cat</span><span class="p">);</span> <span class="c1">//=&gt; animal
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">values</span><span class="p">(</span><span class="nx">cat</span><span class="p">);</span> <span class="c1">//=&gt; [ &#39;animal&#39;, &#39;mammal&#39;, &#39;felis catus&#39; ]
</span></span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="c1">// Object transformation
</span></span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">transformations</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="nx">R</span><span class="p">.</span><span class="nx">toUpper</span><span class="p">,</span> <span class="nx">binomialName</span><span class="o">:</span> <span class="nx">R</span><span class="p">.</span><span class="nx">toLower</span> <span class="p">}</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="nx">R</span><span class="p">.</span><span class="nx">evolve</span><span class="p">(</span><span class="nx">transformations</span><span class="p">,</span> <span class="nx">cat</span><span class="p">).</span><span class="nx">type</span><span class="p">;</span> <span class="c1">// =&gt; ANIMAL
</span></span></span></code></pre></div><p>But key point of Ramda.js is functions. Ramda allows you to easily
compose multiple functions in different orders:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="c1">// Compose and pipe R.join(&#39; and &#39;,
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">uniq</span><span class="p">(</span><span class="nx">R</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">R</span><span class="p">.</span><span class="nx">toUpper</span><span class="p">)(</span><span class="nx">R</span><span class="p">.</span><span class="nx">pluck</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">,</span> <span class="nx">animals</span><span class="p">))));</span> <span class="c1">//=&gt; BIRD and MAMMAL
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1">// Performs right-to-left function composition
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">compose</span><span class="p">(</span><span class="nx">R</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39; and &#39;</span><span class="p">),</span> <span class="nx">R</span><span class="p">.</span><span class="nx">uniq</span><span class="p">,</span> <span class="nx">R</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">R</span><span class="p">.</span><span class="nx">toUpper</span><span class="p">),</span> <span class="nx">R</span><span class="p">.</span><span class="nx">pluck</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">)</span> <span class="p">)(</span><span class="nx">animals</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="c1">//=&gt; BIRD and MAMMAL
</span></span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="ln">7</span><span class="cl"><span class="c1">// Performs left-to-right function composition
</span></span></span><span class="line"><span class="ln">8</span><span class="cl"><span class="c1"></span><span class="nx">R</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">R</span><span class="p">.</span><span class="nx">pluck</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">)</span> <span class="nx">R</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">R</span><span class="p">.</span><span class="nx">toUpper</span><span class="p">),</span> <span class="nx">R</span><span class="p">.</span><span class="nx">uniq</span><span class="p">,</span> <span class="nx">R</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39; and &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">9</span><span class="cl"><span class="p">)(</span><span class="nx">animals</span><span class="p">);</span> <span class="c1">//=&gt; BIRD and MAMMAL
</span></span></span></code></pre></div><p>Another power of Ramda is currying. Currying is the process of
translating evaluation of function that takes multiple parameters in
evaluating a sequence of functions, each with one argument.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="kd">let</span> <span class="nx">tripleMultiply</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">a</span> <span class="o">*</span> <span class="nx">b</span> <span class="o">*</span> <span class="nx">c</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nx">tripleMultiply</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span> <span class="c1">//=&gt; 54
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"></span><span class="nx">tripleMultiply</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">9</span><span class="p">)(</span><span class="mi">2</span><span class="p">);</span> <span class="c1">//=&gt; TypeError: tripleMultiply(..) is not a function
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">curriedMultiply</span> <span class="o">=</span> <span class="nx">R</span><span class="p">.</span><span class="nx">curry</span><span class="p">(</span><span class="nx">tripleMultiply</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="nx">curriedMultiply</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">9</span><span class="p">)(</span><span class="mi">2</span><span class="p">);</span> <span class="c1">//=&gt; 54
</span></span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="c1"></span><span class="nx">curriedMultiply</span><span class="p">(</span><span class="mi">3</span><span class="p">)(</span><span class="mi">9</span><span class="p">)(</span><span class="mi">2</span><span class="p">);</span> <span class="c1">//=&gt; 54
</span></span></span></code></pre></div><p>Pattern matching is also available through <em>R.cond</em>. That allows you to
check sequence of conditions to match different patterns:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="kd">let</span> <span class="nx">checkNumber</span> <span class="o">=</span> <span class="nx">R</span><span class="p">.</span><span class="nx">cond</span><span class="p">([</span> <span class="p">[</span><span class="nx">R</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nb">Number</span><span class="p">),</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nx">R</span><span class="p">.</span><span class="nx">identity</span><span class="p">],</span> <span class="p">[</span><span class="nx">R</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nb">String</span><span class="p">),</span> <span class="nb">parseInt</span><span class="p">],</span> <span class="p">[</span><span class="nx">R</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nb">Boolean</span><span class="p">),</span> <span class="nb">Number</span><span class="p">],</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="p">[</span><span class="nx">R</span><span class="p">.</span><span class="nx">isEmpty</span><span class="p">,</span> <span class="nx">R</span><span class="p">.</span><span class="nx">always</span><span class="p">(</span><span class="mi">0</span><span class="p">)],</span> <span class="p">[</span><span class="nx">R</span><span class="p">.</span><span class="nx">T</span><span class="p">,</span> <span class="nx">R</span><span class="p">.</span><span class="nx">always</span><span class="p">(</span><span class="kc">NaN</span><span class="p">)]]);</span> <span class="nx">checkNumber</span><span class="p">(</span><span class="mi">100500</span><span class="p">);</span> <span class="c1">//=&gt; 100500
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="c1"></span><span class="nx">checkNumber</span><span class="p">(</span><span class="s1">&#39;146%&#39;</span><span class="p">);</span> <span class="c1">//=&gt; 146
</span></span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="c1"></span><span class="nx">checkNumber</span><span class="p">(</span><span class="s1">&#39;Hodor&#39;</span><span class="p">);</span> <span class="c1">//=&gt; NaN
</span></span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="c1"></span><span class="nx">checkNumber</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span> <span class="c1">//=&gt; 1
</span></span></span><span class="line"><span class="ln">7</span><span class="cl"><span class="c1"></span><span class="nx">checkNumber</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span> <span class="c1">//=&gt; 0
</span></span></span><span class="line"><span class="ln">8</span><span class="cl"><span class="c1"></span><span class="nx">checkNumber</span><span class="p">([]);</span> <span class="c1">//=&gt; 0
</span></span></span><span class="line"><span class="ln">9</span><span class="cl"><span class="c1"></span><span class="nx">checkNumber</span><span class="p">([</span><span class="s1">&#39;test&#39;</span><span class="p">]);</span> <span class="c1">//=&gt; NaN
</span></span></span></code></pre></div><p>Ramda.js is one of the best functional programming libraries that exists
in JavaScript ecosystem. It can completely replace <em>Underscore</em>,
<em>Lodash</em> in your project with own object, lists and others helpers.
Immutability, currying and composing allows you to write both efficient
and simple code in pure functional style.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
