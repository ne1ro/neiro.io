<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Jekyll on neiro blog</title>
    <link>https://neiro.io/tags/jekyll/</link>
    <description>Recent content in Jekyll on neiro blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <copyright>neiro Â© 2012-2025</copyright>
    <lastBuildDate>Wed, 30 Dec 2020 13:20:00 +0100</lastBuildDate>
    <atom:link href="https://neiro.io/tags/jekyll/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Migrating from Jekyll to org-static-blog</title>
      <link>https://neiro.io/blog/2020-12-30-migrating-from-jekyll-to-org-static-blog/</link>
      <pubDate>Wed, 30 Dec 2020 13:20:00 +0100</pubDate>
      <guid>https://neiro.io/blog/2020-12-30-migrating-from-jekyll-to-org-static-blog/</guid>
      <description>&lt;p&gt;One of the biggest (and positive) discoveries this year for me was definitely an Emacs.&#xA;I&amp;rsquo;ve decided to switch to this editor after using Vim for almost 8 years as I&amp;rsquo;ve started embracing&#xA;Lisps (especially Clojure) and wanted an editor where I can have a first-class integration with these programming languages.&lt;/p&gt;&#xA;&lt;p&gt;Besides the nice integration I&amp;rsquo;ve found out a lot of very interesting related things,&#xA;e.g. REPL-driven development, Org-mode, org-roam, and plenty of others.&#xA;For sure, one of the biggest benefits is the &lt;strong&gt;org-mode&lt;/strong&gt; - which is a most powerful, elegant&#xA;and nicely integrated in Emacs ecosystem markdown language and extensions, in my opinion.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>One of the biggest (and positive) discoveries this year for me was definitely an Emacs.
I&rsquo;ve decided to switch to this editor after using Vim for almost 8 years as I&rsquo;ve started embracing
Lisps (especially Clojure) and wanted an editor where I can have a first-class integration with these programming languages.</p>
<p>Besides the nice integration I&rsquo;ve found out a lot of very interesting related things,
e.g. REPL-driven development, Org-mode, org-roam, and plenty of others.
For sure, one of the biggest benefits is the <strong>org-mode</strong> - which is a most powerful, elegant
and nicely integrated in Emacs ecosystem markdown language and extensions, in my opinion.</p>
<p>After some time I&rsquo;ve started to thinking about improving my blogging experience.
The ergonomics of typing, ease of use are quite important to me, so the ideal solution
would be to embrace the power of the org-mode, evil mode (to keep vim bindings in place) and
apply it for my personal blog. However, this was not as simple as I&rsquo;ve expected - and there were
a lot of options.</p>
<h2 id="org-mode-support-in-existing-blog-engines">Org-mode support in existing blog engines</h2>
<h3 id="jekyll">Jekyll</h3>
<p>Jekyll has <a href="https://github.com/eggcaker/jekyll-org">a support for org mode</a> , however, it&rsquo;s based on an outdated
<strong>org-ruby</strong> gem which might not have a full support of all `org-mode` features.</p>
<h3 id="gatsby">Gatsby</h3>
<p>Gatsby.js seems to be a relatively popular choice for building static websites - and it has all
modern and shiny technologies on the front side, like React, server-side rendering, GraphQL, etc.
Gatsby also has an <a href="https://www.gatsbyjs.com/plugins/gatsby-transformer-orga/">org-mode plugin</a>, and it looks more or less fully-featured.</p>
<h3 id="emacs-itself">Emacs itself</h3>
<p>Emacs has a variety of solutions to have some static website or a small blog built from org-mode.
So far I&rsquo;ve liked <a href="https://github.com/bastibe/org-static-blog">an org-static-blog</a> solution which can be installed right to an emacs and could be
an extension to the org-mode.</p>
<h2 id="migration-from-jekyll">Migration from Jekyll</h2>
<p>I&rsquo;ve had a lot of issues with outdated Jekyll version and my attempts to update it with assets have failed.
As for the Gatsby, I&rsquo;ve gave it a try, but it looked like that it focuses more on Markdown and it took a lot of
efforts to make something tangible with org-mode.
I&rsquo;ve wanted to re-organise the current assets structure to make it way more minimalistic, so I&rsquo;ve decided to switch
to the <strong>org-static-blog</strong>.</p>
<h3 id="installation-of-the-org-static-blog">Installation of the org-static-blog</h3>
<p>It&rsquo;s quite simple - you just need to run from your Emacs</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-emacs" data-lang="emacs"><span class="line"><span class="ln">1</span><span class="cl"><span class="nv">package-install</span></span></span></code></pre></div><p>and choose</p>





<pre tabindex="0"><code class="language-nil" data-lang="nil">org-static-blog</code></pre><h3 id="configuration">Configuration</h3>
<p>org-static blog has a lot of configuration options, so it&rsquo;s better to refer the <a href="https://github.com/bastibe/org-static-blog#examples">examples and documentation on the website</a>.</p>
<h3 id="convert-markdown-to-org">Convert markdown to org</h3>
<p>This is required step which can be quickly done by simple script, assuming that you have pandoc installed:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln">1</span><span class="cl"><span class="k">for</span> f in <span class="sb">`</span>ls *.md<span class="sb">`</span><span class="p">;</span> <span class="k">do</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">    pandoc -f markdown -t org -o <span class="si">${</span><span class="nv">f</span><span class="si">}</span>.org <span class="si">${</span><span class="nv">f</span><span class="si">}</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="k">done</span></span></span></code></pre></div><h3 id="writing-a-new-post">Writing a new post</h3>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-emacs" data-lang="emacs"><span class="line"><span class="ln">1</span><span class="cl"><span class="nv">org-static-blog-mode</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nv">org-static-blog-create-new-post</span></span></span></code></pre></div><p>These commands will create a new post with some default template. Run <span class="underline">org-static-blog-publish</span> once you have your post ready.
This will build a new HTML page in the <strong>/blog</strong> directory.</p>
<h3 id="ci-cd">CI/CD</h3>
<p>So far the simplest solution I&rsquo;ve found is just to keep built HTML version of the website in the repo and deploy it on
each change. <a href="https://gitlab.com/_zngguvnf/org-static-blog-example">There&rsquo;s an example</a> of how the CI/CD can be improved.</p>
<h2 id="issues-that-are-still-not-solved-by-migration">Issues that are still not solved by migration</h2>
<p>The migration was not ideal, and there are still some pain points and issues not solved:</p>
<h3 id="better-code-highlighting">Better code highlighting</h3>
<p>Some programming languages are highlighted poorly.</p>
<h3 id="better-ci-cd-experience">Better CI/CD experience</h3>
<p>There is a way to build the website right from CI, e.g. by executing Emacs Lisp code from the container,
though it may require some setup &amp; efforts spent before.</p>
<h3 id="assets-management">Assets management</h3>
<p>Probably I&rsquo;ll still need to configure Webpack, stylesheets, javascripts to make the website looking more neat
and more fully featured.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Switching from Jekyll to <strong>org-static-mode</strong> definitely improved the blogging experience, and now it&rsquo;s a way more
simpler, faster and enjoyable process. There are still some painful issues which were resolved in other mainstream
blog engines, but the benefits of having everything typed in <strong>org-mode</strong> and managed by the Emacs are more significant for me.</p>
<p>Happy new year and keep hacking!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Migrating from Jekyll to org-static-blog</title>
      <link>https://neiro.io/posts/2020-12-30-migrating-from-jekyll-to-org-static-blog/</link>
      <pubDate>Wed, 30 Dec 2020 13:20:00 +0100</pubDate>
      <guid>https://neiro.io/posts/2020-12-30-migrating-from-jekyll-to-org-static-blog/</guid>
      <description>&lt;p&gt;One of the biggest (and positive) discoveries this year for me was definitely an Emacs.&#xA;I&amp;rsquo;ve decided to switch to this editor after using Vim for almost 8 years as I&amp;rsquo;ve started embracing&#xA;Lisps (especially Clojure) and wanted an editor where I can have a first-class integration with these programming languages.&lt;/p&gt;&#xA;&lt;p&gt;Besides the nice integration I&amp;rsquo;ve found out a lot of very interesting related things,&#xA;e.g. REPL-driven development, Org-mode, org-roam, and plenty of others.&#xA;For sure, one of the biggest benefits is the &lt;strong&gt;org-mode&lt;/strong&gt; - which is a most powerful, elegant&#xA;and nicely integrated in Emacs ecosystem markdown language and extensions, in my opinion.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>One of the biggest (and positive) discoveries this year for me was definitely an Emacs.
I&rsquo;ve decided to switch to this editor after using Vim for almost 8 years as I&rsquo;ve started embracing
Lisps (especially Clojure) and wanted an editor where I can have a first-class integration with these programming languages.</p>
<p>Besides the nice integration I&rsquo;ve found out a lot of very interesting related things,
e.g. REPL-driven development, Org-mode, org-roam, and plenty of others.
For sure, one of the biggest benefits is the <strong>org-mode</strong> - which is a most powerful, elegant
and nicely integrated in Emacs ecosystem markdown language and extensions, in my opinion.</p>
<p>After some time I&rsquo;ve started to thinking about improving my blogging experience.
The ergonomics of typing, ease of use are quite important to me, so the ideal solution
would be to embrace the power of the org-mode, evil mode (to keep vim bindings in place) and
apply it for my personal blog. However, this was not as simple as I&rsquo;ve expected - and there were
a lot of options.</p>
<h2 id="org-mode-support-in-existing-blog-engines">Org-mode support in existing blog engines</h2>
<h3 id="jekyll">Jekyll</h3>
<p>Jekyll has <a href="https://github.com/eggcaker/jekyll-org">a support for org mode</a> , however, it&rsquo;s based on an outdated
<strong>org-ruby</strong> gem which might not have a full support of all `org-mode` features.</p>
<h3 id="gatsby">Gatsby</h3>
<p>Gatsby.js seems to be a relatively popular choice for building static websites - and it has all
modern and shiny technologies on the front side, like React, server-side rendering, GraphQL, etc.
Gatsby also has an <a href="https://www.gatsbyjs.com/plugins/gatsby-transformer-orga/">org-mode plugin</a>, and it looks more or less fully-featured.</p>
<h3 id="emacs-itself">Emacs itself</h3>
<p>Emacs has a variety of solutions to have some static website or a small blog built from org-mode.
So far I&rsquo;ve liked <a href="https://github.com/bastibe/org-static-blog">an org-static-blog</a> solution which can be installed right to an emacs and could be
an extension to the org-mode.</p>
<h2 id="migration-from-jekyll">Migration from Jekyll</h2>
<p>I&rsquo;ve had a lot of issues with outdated Jekyll version and my attempts to update it with assets have failed.
As for the Gatsby, I&rsquo;ve gave it a try, but it looked like that it focuses more on Markdown and it took a lot of
efforts to make something tangible with org-mode.
I&rsquo;ve wanted to re-organise the current assets structure to make it way more minimalistic, so I&rsquo;ve decided to switch
to the <strong>org-static-blog</strong>.</p>
<h3 id="installation-of-the-org-static-blog">Installation of the org-static-blog</h3>
<p>It&rsquo;s quite simple - you just need to run from your Emacs</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-emacs" data-lang="emacs"><span class="line"><span class="ln">1</span><span class="cl"><span class="nv">package-install</span></span></span></code></pre></div><p>and choose</p>





<pre tabindex="0"><code class="language-nil" data-lang="nil">org-static-blog</code></pre><h3 id="configuration">Configuration</h3>
<p>org-static blog has a lot of configuration options, so it&rsquo;s better to refer the <a href="https://github.com/bastibe/org-static-blog#examples">examples and documentation on the website</a>.</p>
<h3 id="convert-markdown-to-org">Convert markdown to org</h3>
<p>This is required step which can be quickly done by simple script, assuming that you have pandoc installed:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln">1</span><span class="cl"><span class="k">for</span> f in <span class="sb">`</span>ls *.md<span class="sb">`</span><span class="p">;</span> <span class="k">do</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">    pandoc -f markdown -t org -o <span class="si">${</span><span class="nv">f</span><span class="si">}</span>.org <span class="si">${</span><span class="nv">f</span><span class="si">}</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="k">done</span></span></span></code></pre></div><h3 id="writing-a-new-post">Writing a new post</h3>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-emacs" data-lang="emacs"><span class="line"><span class="ln">1</span><span class="cl"><span class="nv">org-static-blog-mode</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nv">org-static-blog-create-new-post</span></span></span></code></pre></div><p>These commands will create a new post with some default template. Run <span class="underline">org-static-blog-publish</span> once you have your post ready.
This will build a new HTML page in the <strong>/blog</strong> directory.</p>
<h3 id="ci-cd">CI/CD</h3>
<p>So far the simplest solution I&rsquo;ve found is just to keep built HTML version of the website in the repo and deploy it on
each change. <a href="https://gitlab.com/_zngguvnf/org-static-blog-example">There&rsquo;s an example</a> of how the CI/CD can be improved.</p>
<h2 id="issues-that-are-still-not-solved-by-migration">Issues that are still not solved by migration</h2>
<p>The migration was not ideal, and there are still some pain points and issues not solved:</p>
<h3 id="better-code-highlighting">Better code highlighting</h3>
<p>Some programming languages are highlighted poorly.</p>
<h3 id="better-ci-cd-experience">Better CI/CD experience</h3>
<p>There is a way to build the website right from CI, e.g. by executing Emacs Lisp code from the container,
though it may require some setup &amp; efforts spent before.</p>
<h3 id="assets-management">Assets management</h3>
<p>Probably I&rsquo;ll still need to configure Webpack, stylesheets, javascripts to make the website looking more neat
and more fully featured.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Switching from Jekyll to <strong>org-static-mode</strong> definitely improved the blogging experience, and now it&rsquo;s a way more
simpler, faster and enjoyable process. There are still some painful issues which were resolved in other mainstream
blog engines, but the benefits of having everything typed in <strong>org-mode</strong> and managed by the Emacs are more significant for me.</p>
<p>Happy new year and keep hacking!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Deploy Jekyll with Capistrano</title>
      <link>https://neiro.io/blog/2015-05-24-deploy-jekyll-with-capistrano/</link>
      <pubDate>Sun, 24 May 2015 10:00:00 +0200</pubDate>
      <guid>https://neiro.io/blog/2015-05-24-deploy-jekyll-with-capistrano/</guid>
      <description>&lt;p&gt;If you&amp;rsquo;re using Jekyll to generate your static website, you may want to&#xA;deploy it as simple and fast, as Jekyll works. For this case, Ruby&#xA;ecosystem has remote server automation and deployment tool that called&#xA;&lt;a href=&#34;http://capistranorb.com/&#34;&gt;Capistrano&lt;/a&gt; .&lt;/p&gt;&#xA;&lt;p&gt;First of all, you need to create &lt;em&gt;Gemfile&lt;/em&gt; in your Jekyll project and&#xA;add this lines:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;source&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;https://rubygems.org&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;gem&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;capistrano&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;~&amp;gt; 3.4.0&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then execute:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;bundle install &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; bundle &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; cap install&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This creates configuration files, that you can change with your&#xA;parameters. Make sure that you set up production configuration with your&#xA;server data (&lt;em&gt;/config/deploy/production.rb&lt;/em&gt;):&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>If you&rsquo;re using Jekyll to generate your static website, you may want to
deploy it as simple and fast, as Jekyll works. For this case, Ruby
ecosystem has remote server automation and deployment tool that called
<a href="http://capistranorb.com/">Capistrano</a> .</p>
<p>First of all, you need to create <em>Gemfile</em> in your Jekyll project and
add this lines:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">source</span> <span class="s1">&#39;https://rubygems.org&#39;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">gem</span> <span class="s1">&#39;capistrano&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 3.4.0&#39;</span></span></span></code></pre></div><p>Then execute:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln">1</span><span class="cl">bundle install <span class="o">&amp;&amp;</span> bundle <span class="nb">exec</span> cap install</span></span></code></pre></div><p>This creates configuration files, that you can change with your
parameters. Make sure that you set up production configuration with your
server data (<em>/config/deploy/production.rb</em>):</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl">
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">role</span> <span class="ss">:app</span><span class="p">,</span> <span class="sx">%w{user@server}</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="n">role</span> <span class="ss">:web</span><span class="p">,</span> <span class="sx">%w{user@server}</span></span></span></code></pre></div><p>After configuration you can deploy your project with one simple command:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln">1</span><span class="cl">bundle <span class="nb">exec</span> cap production deploy</span></span></code></pre></div><p>This command deploys source to <em>/var/www/website_name</em>, but it does not
generate website. To execute <code>jekyll build</code> command you need to install
Ruby using <a href="https://github.com/sstephenson/rbenv">rbenv</a> or
<a href="https://rvm.io/">RVM</a> first.</p>
<p>Next you should add Capistrano plugin for rbenv in <em>Gemfile</em>:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">gem</span> <span class="s1">&#39;capistrano-rbenv&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 2.0&#39;</span></span></span></code></pre></div><p>Then execute</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">bundle</span> <span class="nb">exec</span></span></span></code></pre></div><p>And add this line to <em>Capfile</em>:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">require</span> <span class="s1">&#39;capistrano/rbenv&#39;</span></span></span></code></pre></div><p>Install Jekyll gem on server and add it to rbenv binaries list in
<em>config/deploy.rb</em>:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">set</span> <span class="ss">:rbenv_map_bins</span><span class="p">,</span> <span class="sx">%w{rake gem bundle ruby jekyll}</span></span></span></code></pre></div><p>Now you can use my
<a href="https://github.com/ne1ro/capistrano-jekyll">capistrano-jekyll</a> gem to
execute <code>jekyll build</code> command every time when you deploy your website&rsquo;s
changes:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="c1"># Gemfile</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">gem</span> <span class="s1">&#39;capistrano-jekyll&#39;</span></span></span></code></pre></div>




<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln">1</span><span class="cl">$ bundle install <span class="o">&amp;&amp;</span> bundle <span class="nb">exec</span> cap production deploy</span></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Deploy Jekyll with Capistrano</title>
      <link>https://neiro.io/posts/2015-05-24-deploy-jekyll-with-capistrano/</link>
      <pubDate>Sun, 24 May 2015 10:00:00 +0200</pubDate>
      <guid>https://neiro.io/posts/2015-05-24-deploy-jekyll-with-capistrano/</guid>
      <description>&lt;p&gt;If you&amp;rsquo;re using Jekyll to generate your static website, you may want to&#xA;deploy it as simple and fast, as Jekyll works. For this case, Ruby&#xA;ecosystem has remote server automation and deployment tool that called&#xA;&lt;a href=&#34;http://capistranorb.com/&#34;&gt;Capistrano&lt;/a&gt; .&lt;/p&gt;&#xA;&lt;p&gt;First of all, you need to create &lt;em&gt;Gemfile&lt;/em&gt; in your Jekyll project and&#xA;add this lines:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;source&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;https://rubygems.org&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;gem&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;capistrano&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;~&amp;gt; 3.4.0&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then execute:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;bundle install &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; bundle &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; cap install&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This creates configuration files, that you can change with your&#xA;parameters. Make sure that you set up production configuration with your&#xA;server data (&lt;em&gt;/config/deploy/production.rb&lt;/em&gt;):&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>If you&rsquo;re using Jekyll to generate your static website, you may want to
deploy it as simple and fast, as Jekyll works. For this case, Ruby
ecosystem has remote server automation and deployment tool that called
<a href="http://capistranorb.com/">Capistrano</a> .</p>
<p>First of all, you need to create <em>Gemfile</em> in your Jekyll project and
add this lines:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">source</span> <span class="s1">&#39;https://rubygems.org&#39;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">gem</span> <span class="s1">&#39;capistrano&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 3.4.0&#39;</span></span></span></code></pre></div><p>Then execute:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln">1</span><span class="cl">bundle install <span class="o">&amp;&amp;</span> bundle <span class="nb">exec</span> cap install</span></span></code></pre></div><p>This creates configuration files, that you can change with your
parameters. Make sure that you set up production configuration with your
server data (<em>/config/deploy/production.rb</em>):</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl">
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">role</span> <span class="ss">:app</span><span class="p">,</span> <span class="sx">%w{user@server}</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="n">role</span> <span class="ss">:web</span><span class="p">,</span> <span class="sx">%w{user@server}</span></span></span></code></pre></div><p>After configuration you can deploy your project with one simple command:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln">1</span><span class="cl">bundle <span class="nb">exec</span> cap production deploy</span></span></code></pre></div><p>This command deploys source to <em>/var/www/website_name</em>, but it does not
generate website. To execute <code>jekyll build</code> command you need to install
Ruby using <a href="https://github.com/sstephenson/rbenv">rbenv</a> or
<a href="https://rvm.io/">RVM</a> first.</p>
<p>Next you should add Capistrano plugin for rbenv in <em>Gemfile</em>:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">gem</span> <span class="s1">&#39;capistrano-rbenv&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 2.0&#39;</span></span></span></code></pre></div><p>Then execute</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">bundle</span> <span class="nb">exec</span></span></span></code></pre></div><p>And add this line to <em>Capfile</em>:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">require</span> <span class="s1">&#39;capistrano/rbenv&#39;</span></span></span></code></pre></div><p>Install Jekyll gem on server and add it to rbenv binaries list in
<em>config/deploy.rb</em>:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">set</span> <span class="ss">:rbenv_map_bins</span><span class="p">,</span> <span class="sx">%w{rake gem bundle ruby jekyll}</span></span></span></code></pre></div><p>Now you can use my
<a href="https://github.com/ne1ro/capistrano-jekyll">capistrano-jekyll</a> gem to
execute <code>jekyll build</code> command every time when you deploy your website&rsquo;s
changes:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="c1"># Gemfile</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">gem</span> <span class="s1">&#39;capistrano-jekyll&#39;</span></span></span></code></pre></div>




<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln">1</span><span class="cl">$ bundle install <span class="o">&amp;&amp;</span> bundle <span class="nb">exec</span> cap production deploy</span></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Jekyll with Rails assets</title>
      <link>https://neiro.io/blog/2015-05-14-jekyll-with-rails-assets/</link>
      <pubDate>Thu, 14 May 2015 10:00:00 +0200</pubDate>
      <guid>https://neiro.io/blog/2015-05-14-jekyll-with-rails-assets/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; is the great static website generator,&#xA;that can be easily used for blogs, portfolio pages, galleries and others&#xA;simple projects. It`s very simple, flexible tool that can be upgraded&#xA;with hundreds powerful plugins.&lt;/p&gt;&#xA;&lt;p&gt;If you like Ruby on Rails, you might want to use Rails assets pipeline&#xA;when you work with front-end in Jekyll. If so, here are&#xA;&lt;a href=&#34;https://github.com/jekyll-assets/jekyll-assets&#34;&gt;jekyll-assets&lt;/a&gt;. This&#xA;project allows you to use some Rails-like assets pipeline functionality:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><a href="http://jekyllrb.com/">Jekyll</a> is the great static website generator,
that can be easily used for blogs, portfolio pages, galleries and others
simple projects. It`s very simple, flexible tool that can be upgraded
with hundreds powerful plugins.</p>
<p>If you like Ruby on Rails, you might want to use Rails assets pipeline
when you work with front-end in Jekyll. If so, here are
<a href="https://github.com/jekyll-assets/jekyll-assets">jekyll-assets</a>. This
project allows you to use some Rails-like assets pipeline functionality:</p>
<ul>
<li>
<p>SASS, LESS, Coffeescript and even ERB</p>
</li>
<li>
<p>Rails assets dependencies management:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl">  <span class="c1">//=require &#39;jquery&#39;
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1"></span>  <span class="c1">//=require &#39;parallax&#39;
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"></span>  <span class="c1">//=require &#39;slideout&#39;
</span></span></span></code></pre></div></li>
<li>
<p>Minification and compression for Javascript and CSS</p>
</li>
<li>
<p>Gzipped versions of assets</p>
</li>
</ul>
<p>But what if you also wants to use popular Bower packages with Jekyll and
jekyll-assets?<br />
First, you need <a href="https://rails-assets.org/">Rails assets</a> project,
that allows you to use any Bower modules with Bundler. You just need to
add required packages in your <em>Gemfile</em> like this:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">source</span> <span class="s1">&#39;https://rails-assets.org&#39;</span> <span class="k">do</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">  <span class="n">gem</span> <span class="s1">&#39;rails-assets-jquery&#39;</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">  <span class="n">gem</span> <span class="s1">&#39;rails-assets-normalize-scss&#39;</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">  <span class="n">gem</span> <span class="s1">&#39;rails-assets-slideout.js&#39;</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="k">end</span></span></span></code></pre></div><p>It works great with Ruby on Rails, but you need some hack to use it
with jekyll-assets - by default, jekyll-assets configuration does not
include rails-assets paths. To fix this, you can load paths with
<strong>Sprockets</strong> in your Jekyll plugin file (<strong>_plugins/ext.rb</strong>) .</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="nb">require</span> <span class="s1">&#39;jekyll-assets&#39;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="nb">require</span> <span class="s1">&#39;bundler/setup&#39;</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="no">Bundler</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:default</span><span class="p">,</span> <span class="s1">&#39;development&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="k">if</span> <span class="n">defined?</span><span class="p">(</span><span class="no">RailsAssets</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">  <span class="no">RailsAssets</span><span class="o">.</span><span class="n">load_paths</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">path</span><span class="o">|</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="no">Sprockets</span><span class="o">.</span><span class="n">append_path</span> <span class="n">path</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="k">end</span></span></span></code></pre></div><p>When you&rsquo;ve completed this setup, you can manage your assets almost like in
Ruby on Rails.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Jekyll with Rails assets</title>
      <link>https://neiro.io/posts/2015-05-14-jekyll-with-rails-assets/</link>
      <pubDate>Thu, 14 May 2015 10:00:00 +0200</pubDate>
      <guid>https://neiro.io/posts/2015-05-14-jekyll-with-rails-assets/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; is the great static website generator,&#xA;that can be easily used for blogs, portfolio pages, galleries and others&#xA;simple projects. It`s very simple, flexible tool that can be upgraded&#xA;with hundreds powerful plugins.&lt;/p&gt;&#xA;&lt;p&gt;If you like Ruby on Rails, you might want to use Rails assets pipeline&#xA;when you work with front-end in Jekyll. If so, here are&#xA;&lt;a href=&#34;https://github.com/jekyll-assets/jekyll-assets&#34;&gt;jekyll-assets&lt;/a&gt;. This&#xA;project allows you to use some Rails-like assets pipeline functionality:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><a href="http://jekyllrb.com/">Jekyll</a> is the great static website generator,
that can be easily used for blogs, portfolio pages, galleries and others
simple projects. It`s very simple, flexible tool that can be upgraded
with hundreds powerful plugins.</p>
<p>If you like Ruby on Rails, you might want to use Rails assets pipeline
when you work with front-end in Jekyll. If so, here are
<a href="https://github.com/jekyll-assets/jekyll-assets">jekyll-assets</a>. This
project allows you to use some Rails-like assets pipeline functionality:</p>
<ul>
<li>
<p>SASS, LESS, Coffeescript and even ERB</p>
</li>
<li>
<p>Rails assets dependencies management:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl">  <span class="c1">//=require &#39;jquery&#39;
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1"></span>  <span class="c1">//=require &#39;parallax&#39;
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"></span>  <span class="c1">//=require &#39;slideout&#39;
</span></span></span></code></pre></div></li>
<li>
<p>Minification and compression for Javascript and CSS</p>
</li>
<li>
<p>Gzipped versions of assets</p>
</li>
</ul>
<p>But what if you also wants to use popular Bower packages with Jekyll and
jekyll-assets?<br />
First, you need <a href="https://rails-assets.org/">Rails assets</a> project,
that allows you to use any Bower modules with Bundler. You just need to
add required packages in your <em>Gemfile</em> like this:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">source</span> <span class="s1">&#39;https://rails-assets.org&#39;</span> <span class="k">do</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">  <span class="n">gem</span> <span class="s1">&#39;rails-assets-jquery&#39;</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">  <span class="n">gem</span> <span class="s1">&#39;rails-assets-normalize-scss&#39;</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">  <span class="n">gem</span> <span class="s1">&#39;rails-assets-slideout.js&#39;</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="k">end</span></span></span></code></pre></div><p>It works great with Ruby on Rails, but you need some hack to use it
with jekyll-assets - by default, jekyll-assets configuration does not
include rails-assets paths. To fix this, you can load paths with
<strong>Sprockets</strong> in your Jekyll plugin file (<strong>_plugins/ext.rb</strong>) .</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="nb">require</span> <span class="s1">&#39;jekyll-assets&#39;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="nb">require</span> <span class="s1">&#39;bundler/setup&#39;</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="no">Bundler</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:default</span><span class="p">,</span> <span class="s1">&#39;development&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="k">if</span> <span class="n">defined?</span><span class="p">(</span><span class="no">RailsAssets</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">  <span class="no">RailsAssets</span><span class="o">.</span><span class="n">load_paths</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">path</span><span class="o">|</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="no">Sprockets</span><span class="o">.</span><span class="n">append_path</span> <span class="n">path</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="k">end</span></span></span></code></pre></div><p>When you&rsquo;ve completed this setup, you can manage your assets almost like in
Ruby on Rails.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
